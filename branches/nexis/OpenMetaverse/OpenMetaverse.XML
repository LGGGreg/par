<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OpenMetaverse</name>
    </assembly>
    <members>
        <member name="T:OpenMetaverse.ScriptPermission">
            <summary>
            Permission request flags, asked when a script wants to control an Avatar
            </summary>
        </member>
        <member name="F:OpenMetaverse.ScriptPermission.None">
            <summary>Placeholder for empty values, shouldn't ever see this</summary>
        </member>
        <member name="F:OpenMetaverse.ScriptPermission.Debit">
            <summary>Script wants ability to take money from you</summary>
        </member>
        <member name="F:OpenMetaverse.ScriptPermission.TakeControls">
            <summary>Script wants to take camera controls for you</summary>
        </member>
        <member name="F:OpenMetaverse.ScriptPermission.RemapControls">
            <summary>Script wants to remap avatars controls</summary>
        </member>
        <member name="F:OpenMetaverse.ScriptPermission.TriggerAnimation">
            <summary>Script wants to trigger avatar animations</summary>
            <remarks>This function is not implemented on the grid</remarks>
        </member>
        <member name="F:OpenMetaverse.ScriptPermission.Attach">
            <summary>Script wants to attach or detach the prim or primset to your avatar</summary>
        </member>
        <member name="F:OpenMetaverse.ScriptPermission.ReleaseOwnership">
            <summary>Script wants permission to release ownership</summary>
            <remarks>This function is not implemented on the grid
            The concept of "public" objects does not exist anymore.</remarks>
        </member>
        <member name="F:OpenMetaverse.ScriptPermission.ChangeLinks">
            <summary>Script wants ability to link/delink with other prims</summary>
        </member>
        <member name="F:OpenMetaverse.ScriptPermission.ChangeJoints">
            <summary>Script wants permission to change joints</summary>
            <remarks>This function is not implemented on the grid</remarks>
        </member>
        <member name="F:OpenMetaverse.ScriptPermission.ChangePermissions">
            <summary>Script wants permissions to change permissions</summary>
            <remarks>This function is not implemented on the grid</remarks>
        </member>
        <member name="F:OpenMetaverse.ScriptPermission.TrackCamera">
            <summary>Script wants to track avatars camera position and rotation </summary>
        </member>
        <member name="F:OpenMetaverse.ScriptPermission.ControlCamera">
            <summary>Script wants to control your camera</summary>
        </member>
        <member name="T:OpenMetaverse.InstantMessageDialog">
            <summary>
            Special commands used in Instant Messages
            </summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.MessageFromAgent">
            <summary>Indicates a regular IM from another agent</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.MessageBox">
            <summary>Simple notification box with an OK button</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.GroupInvitation">
            <summary>You've been invited to join a group.</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.InventoryOffered">
            <summary>Inventory offer</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.InventoryAccepted">
            <summary>Accepted inventory offer</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.InventoryDeclined">
            <summary>Declined inventory offer</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.GroupVote">
            <summary>Group vote</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.TaskInventoryOffered">
            <summary>An object is offering its inventory</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.TaskInventoryAccepted">
            <summary>Accept an inventory offer from an object</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.TaskInventoryDeclined">
            <summary>Decline an inventory offer from an object</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.NewUserDefault">
            <summary>Unknown</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.SessionAdd">
            <summary>Start a session, or add users to a session</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.SessionOfflineAdd">
            <summary>Start a session, but don't prune offline users</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.SessionGroupStart">
            <summary>Start a session with your group</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.SessionCardlessStart">
            <summary>Start a session without a calling card (finder or objects)</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.SessionSend">
            <summary>Send a message to a session</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.SessionDrop">
            <summary>Leave a session</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.MessageFromObject">
            <summary>Indicates that the IM is from an object</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.BusyAutoResponse">
            <summary>Sent an IM to a busy user, this is the auto response</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.ConsoleAndChatHistory">
            <summary>Shows the message in the console and chat history</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.RequestTeleport">
            <summary>Send a teleport lure</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.AcceptTeleport">
            <summary>Response sent to the agent which inititiated a teleport invitation</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.DenyTeleport">
            <summary>Response sent to the agent which inititiated a teleport invitation</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.GodLikeRequestTeleport">
            <summary>Only useful if you have Linden permissions</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.CurrentlyUnused">
            <summary>A placeholder type for future expansion, currently not
            used</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.GotoUrl">
            <summary>IM to tell the user to go to an URL</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.Session911Start">
            <summary>IM for help</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.Lure911">
            <summary>IM sent automatically on call for help, sends a lure 
            to each Helper reached</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.FromTaskAsAlert">
            <summary>Like an IM but won't go to email</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.GroupNotice">
            <summary>IM from a group officer to all group members</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.GroupNoticeInventoryAccepted">
            <summary>Unknown</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.GroupNoticeInventoryDeclined">
            <summary>Unknown</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.GroupInvitationAccept">
            <summary>Accept a group invitation</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.GroupInvitationDecline">
            <summary>Decline a group invitation</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.GroupNoticeRequested">
            <summary>Unknown</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.FriendshipOffered">
            <summary>An avatar is offering you friendship</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.FriendshipAccepted">
            <summary>An avatar has accepted your friendship offer</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.FriendshipDeclined">
            <summary>An avatar has declined your friendship offer</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.StartTyping">
            <summary>Indicates that a user has started typing</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.StopTyping">
            <summary>Indicates that a user has stopped typing</summary>
        </member>
        <member name="T:OpenMetaverse.InstantMessageOnline">
            <summary>
            Flag in Instant Messages, whether the IM should be delivered to
            offline avatars as well
            </summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageOnline.Online">
            <summary>Only deliver to online avatars</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageOnline.Offline">
            <summary>If the avatar is offline the message will be held until
            they login next, and possibly forwarded to their e-mail account</summary>
        </member>
        <member name="T:OpenMetaverse.ChatType">
            <summary>
            Conversion type to denote Chat Packet types in an easier-to-understand format
            </summary>
        </member>
        <member name="F:OpenMetaverse.ChatType.Whisper">
            <summary>Whisper (5m radius)</summary>
        </member>
        <member name="F:OpenMetaverse.ChatType.Normal">
            <summary>Normal chat (10/20m radius), what the official viewer typically sends</summary>
        </member>
        <member name="F:OpenMetaverse.ChatType.Shout">
            <summary>Shouting! (100m radius)</summary>
        </member>
        <member name="F:OpenMetaverse.ChatType.StartTyping">
            <summary>Event message when an Avatar has begun to type</summary>
        </member>
        <member name="F:OpenMetaverse.ChatType.StopTyping">
            <summary>Event message when an Avatar has stopped typing</summary>
        </member>
        <member name="F:OpenMetaverse.ChatType.Debug">
            <summary>Unknown</summary>
        </member>
        <member name="F:OpenMetaverse.ChatType.OwnerSay">
            <summary>Event message when an object uses llOwnerSay</summary>
        </member>
        <member name="F:OpenMetaverse.ChatType.RegionSay">
            <summary>Special value to support llRegionSay, never sent to the client</summary>
        </member>
        <member name="T:OpenMetaverse.ChatSourceType">
            <summary>
            Identifies the source of a chat message
            </summary>
        </member>
        <member name="F:OpenMetaverse.ChatSourceType.System">
            <summary>Chat from the grid or simulator</summary>
        </member>
        <member name="F:OpenMetaverse.ChatSourceType.Agent">
            <summary>Chat from another avatar</summary>
        </member>
        <member name="F:OpenMetaverse.ChatSourceType.Object">
            <summary>Chat from an object</summary>
        </member>
        <member name="T:OpenMetaverse.ChatAudibleLevel">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenMetaverse.ChatAudibleLevel.Not">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.ChatAudibleLevel.Barely">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.ChatAudibleLevel.Fully">
            <summary></summary>
        </member>
        <member name="T:OpenMetaverse.EffectType">
            <summary>
            Effect type used in ViewerEffect packets
            </summary>
        </member>
        <member name="F:OpenMetaverse.EffectType.Text">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.EffectType.Icon">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.EffectType.Connector">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.EffectType.FlexibleObject">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.EffectType.AnimalControls">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.EffectType.AnimationObject">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.EffectType.Cloth">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.EffectType.Beam">
            <summary>Project a beam from a source to a destination, such as
            the one used when editing an object</summary>
        </member>
        <member name="F:OpenMetaverse.EffectType.Glow">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.EffectType.Point">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.EffectType.Trail">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.EffectType.Sphere">
            <summary>Create a swirl of particles around an object</summary>
        </member>
        <member name="F:OpenMetaverse.EffectType.Spiral">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.EffectType.Edit">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.EffectType.LookAt">
            <summary>Cause an avatar to look at an object</summary>
        </member>
        <member name="F:OpenMetaverse.EffectType.PointAt">
            <summary>Cause an avatar to point at an object</summary>
        </member>
        <member name="T:OpenMetaverse.LookAtType">
            <summary>
            The action an avatar is doing when looking at something, used in 
            ViewerEffect packets for the LookAt effect
            </summary>
        </member>
        <member name="F:OpenMetaverse.LookAtType.None">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.LookAtType.Idle">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.LookAtType.AutoListen">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.LookAtType.FreeLook">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.LookAtType.Respond">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.LookAtType.Hover">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.LookAtType.Conversation">
            <summary>Deprecated</summary>
        </member>
        <member name="F:OpenMetaverse.LookAtType.Select">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.LookAtType.Focus">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.LookAtType.Mouselook">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.LookAtType.Clear">
            <summary></summary>
        </member>
        <member name="T:OpenMetaverse.PointAtType">
            <summary>
            The action an avatar is doing when pointing at something, used in
            ViewerEffect packets for the PointAt effect
            </summary>
        </member>
        <member name="F:OpenMetaverse.PointAtType.None">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.PointAtType.Select">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.PointAtType.Grab">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.PointAtType.Clear">
            <summary></summary>
        </member>
        <member name="T:OpenMetaverse.MoneyTransactionType">
            <summary>
            Money transaction types
            </summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.None">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.FailSimulatorTimeout">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.FailDataserverTimeout">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.ObjectClaim">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.LandClaim">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.GroupCreate">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.ObjectPublicClaim">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.GroupJoin">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.TeleportCharge">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.UploadCharge">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.LandAuction">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.ClassifiedCharge">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.ObjectTax">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.LandTax">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.LightTax">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.ParcelDirFee">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.GroupTax">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.ClassifiedRenew">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.GiveInventory">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.ObjectSale">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.Gift">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.LandSale">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.ReferBonus">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.InventorySale">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.RefundPurchase">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.LandPassSale">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.DwellBonus">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.PayObject">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.ObjectPays">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.GroupLandDeed">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.GroupObjectDeed">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.GroupLiability">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.GroupDividend">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.GroupMembershipDues">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.ObjectRelease">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.LandRelease">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.ObjectDelete">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.ObjectPublicDecay">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.ObjectPublicDelete">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.LindenAdjustment">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.LindenGrant">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.LindenPenalty">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.EventFee">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.EventPrize">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.StipendBasic">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.StipendDeveloper">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.StipendAlways">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.StipendDaily">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.StipendRating">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.StipendDelta">
            <summary></summary>
        </member>
        <member name="T:OpenMetaverse.TransactionFlags">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenMetaverse.TransactionFlags.None">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.TransactionFlags.SourceGroup">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.TransactionFlags.DestGroup">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.TransactionFlags.OwnerGroup">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.TransactionFlags.SimultaneousContribution">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.TransactionFlags.ContributionRemoval">
            <summary></summary>
        </member>
        <member name="T:OpenMetaverse.MeanCollisionType">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenMetaverse.MeanCollisionType.None">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.MeanCollisionType.Bump">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.MeanCollisionType.LLPushObject">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.MeanCollisionType.SelectedObjectCollide">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.MeanCollisionType.ScriptedObjectCollide">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.MeanCollisionType.PhysicalObjectCollide">
            <summary></summary>
        </member>
        <member name="T:OpenMetaverse.ScriptControlChange">
            <summary>
            Flags sent when a script takes or releases a control
            </summary>
            <remarks>NOTE: (need to verify) These might be a subset of the ControlFlags enum in Movement,</remarks>
        </member>
        <member name="F:OpenMetaverse.ScriptControlChange.None">
            <summary>No Flags set</summary>
        </member>
        <member name="F:OpenMetaverse.ScriptControlChange.Forward">
            <summary>Forward (W or up Arrow)</summary>
        </member>
        <member name="F:OpenMetaverse.ScriptControlChange.Back">
            <summary>Back (S or down arrow)</summary>
        </member>
        <member name="F:OpenMetaverse.ScriptControlChange.Left">
            <summary>Move left (shift+A or left arrow)</summary>
        </member>
        <member name="F:OpenMetaverse.ScriptControlChange.Right">
            <summary>Move right (shift+D or right arrow)</summary>
        </member>
        <member name="F:OpenMetaverse.ScriptControlChange.Up">
            <summary>Up (E or PgUp)</summary>
        </member>
        <member name="F:OpenMetaverse.ScriptControlChange.Down">
            <summary>Down (C or PgDown</summary>
        </member>
        <member name="F:OpenMetaverse.ScriptControlChange.RotateLeft">
            <summary>Rotate left (A or left arrow)</summary>
        </member>
        <member name="F:OpenMetaverse.ScriptControlChange.RotateRight">
            <summary>Rotate right (D or right arrow)</summary>
        </member>
        <member name="F:OpenMetaverse.ScriptControlChange.LeftButton">
            <summary>Left Mouse Button</summary>
        </member>
        <member name="F:OpenMetaverse.ScriptControlChange.MouseLookLeftButton">
            <summary>Left Mouse button in MouseLook</summary>
        </member>
        <member name="T:OpenMetaverse.AgentFlags">
            <summary>
            Currently only used to hide your group title
            </summary>
        </member>
        <member name="F:OpenMetaverse.AgentFlags.None">
            <summary>No flags set</summary>
        </member>
        <member name="F:OpenMetaverse.AgentFlags.HideTitle">
            <summary>Hide your group title</summary>
        </member>
        <member name="T:OpenMetaverse.AgentState">
            <summary>
            Action state of the avatar, which can currently be typing and
            editing
            </summary>
        </member>
        <member name="F:OpenMetaverse.AgentState.None">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.AgentState.Typing">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.AgentState.Editing">
            <summary></summary>
        </member>
        <member name="T:OpenMetaverse.TeleportStatus">
            <summary>
            Current teleport status
            </summary>
        </member>
        <member name="F:OpenMetaverse.TeleportStatus.None">
            <summary>Unknown status</summary>
        </member>
        <member name="F:OpenMetaverse.TeleportStatus.Start">
            <summary>Teleport initialized</summary>
        </member>
        <member name="F:OpenMetaverse.TeleportStatus.Progress">
            <summary>Teleport in progress</summary>
        </member>
        <member name="F:OpenMetaverse.TeleportStatus.Failed">
            <summary>Teleport failed</summary>
        </member>
        <member name="F:OpenMetaverse.TeleportStatus.Finished">
            <summary>Teleport completed</summary>
        </member>
        <member name="F:OpenMetaverse.TeleportStatus.Cancelled">
            <summary>Teleport cancelled</summary>
        </member>
        <member name="T:OpenMetaverse.TeleportFlags">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenMetaverse.TeleportFlags.Default">
            <summary>No flags set, or teleport failed</summary>
        </member>
        <member name="F:OpenMetaverse.TeleportFlags.SetHomeToTarget">
            <summary>Set when newbie leaves help island for first time</summary>
        </member>
        <member name="F:OpenMetaverse.TeleportFlags.SetLastToTarget">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.TeleportFlags.ViaLure">
            <summary>Via Lure</summary>
        </member>
        <member name="F:OpenMetaverse.TeleportFlags.ViaLandmark">
            <summary>Via Landmark</summary>
        </member>
        <member name="F:OpenMetaverse.TeleportFlags.ViaLocation">
            <summary>Via Location</summary>
        </member>
        <member name="F:OpenMetaverse.TeleportFlags.ViaHome">
            <summary>Via Home</summary>
        </member>
        <member name="F:OpenMetaverse.TeleportFlags.ViaTelehub">
            <summary>Via Telehub</summary>
        </member>
        <member name="F:OpenMetaverse.TeleportFlags.ViaLogin">
            <summary>Via Login</summary>
        </member>
        <member name="F:OpenMetaverse.TeleportFlags.ViaGodlikeLure">
            <summary>Linden Summoned</summary>
        </member>
        <member name="F:OpenMetaverse.TeleportFlags.Godlike">
            <summary>Linden Forced me</summary>
        </member>
        <member name="F:OpenMetaverse.TeleportFlags.NineOneOne">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.TeleportFlags.DisableCancel">
            <summary>Agent Teleported Home via Script</summary>
        </member>
        <member name="F:OpenMetaverse.TeleportFlags.ViaRegionID">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.TeleportFlags.IsFlying">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.TeleportFlags.ResetHome">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.TeleportFlags.ForceRedirect">
            <summary>forced to new location for example when avatar is banned or ejected</summary>
        </member>
        <member name="F:OpenMetaverse.TeleportFlags.FinishedViaLure">
            <summary>Teleport Finished via a Lure</summary>
        </member>
        <member name="F:OpenMetaverse.TeleportFlags.FinishedViaNewSim">
            <summary>Finished, Sim Changed</summary>
        </member>
        <member name="F:OpenMetaverse.TeleportFlags.FinishedViaSameSim">
            <summary>Finished, Same Sim</summary>
        </member>
        <member name="T:OpenMetaverse.TeleportLureFlags">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenMetaverse.TeleportLureFlags.NormalLure">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.TeleportLureFlags.GodlikeLure">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.TeleportLureFlags.GodlikePursuit">
            <summary></summary>
        </member>
        <member name="T:OpenMetaverse.ScriptSensorTypeFlags">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenMetaverse.ScriptSensorTypeFlags.Agent">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.ScriptSensorTypeFlags.Active">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.ScriptSensorTypeFlags.Passive">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.ScriptSensorTypeFlags.Scripted">
            <summary></summary>
        </member>
        <member name="T:OpenMetaverse.InstantMessage">
            <summary>
            Instant Message
            </summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessage.FromAgentID">
            <summary>Key of sender</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessage.FromAgentName">
            <summary>Name of sender</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessage.ToAgentID">
            <summary>Key of destination avatar</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessage.ParentEstateID">
            <summary>ID of originating estate</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessage.RegionID">
            <summary>Key of originating region</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessage.Position">
            <summary>Coordinates in originating region</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessage.Dialog">
            <summary>Instant message type</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessage.GroupIM">
            <summary>Group IM session toggle</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessage.IMSessionID">
            <summary>Key of IM session, for Group Messages, the groups UUID</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessage.Timestamp">
            <summary>Timestamp of the instant message</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessage.Message">
            <summary>Instant message text</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessage.Offline">
            <summary>Whether this message is held for offline avatars</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessage.BinaryBucket">
            <summary>Context specific packed data</summary>
        </member>
        <member name="T:OpenMetaverse.AgentManager">
            <summary>
            Manager class for our own avatar
            </summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.Client">
            <summary>Reference to the GridClient object</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.Movement">
            <summary>Used for movement and camera tracking</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.SignaledAnimations">
            <summary>Currently playing animations for the agent. Can be used to
            check the current movement status such as walking, hovering, aiming,
            etc. by checking for system animations in the Animations class</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.GroupChatSessions">
            <summary>
            Dictionary containing current Group Chat sessions and members
            </summary>
        </member>
        <member name="M:OpenMetaverse.AgentManager.#ctor(OpenMetaverse.GridClient)">
            <summary>
            Constructor, setup callbacks for packets related to our avatar
            </summary>
            <param name="client">A reference to the <seealso cref="T:OpenMetaverse.GridClient"/> Class</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.Chat(System.String,System.Int32,OpenMetaverse.ChatType)">
            <summary>
            Send a chat message
            </summary>
            <param name="message">The Message you're sending out.</param>
            <param name="channel">Channel number (0 would be default 'Say' message, other numbers 
            denote the equivalent of /# in normal client).</param>
            <param name="type">Chat Type, see above.</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.RetrieveInstantMessages">
            <summary>Requests missed/offline messages</summary>
        </member>
        <member name="M:OpenMetaverse.AgentManager.InstantMessage(OpenMetaverse.UUID,System.String)">
            <summary>
            Send an Instant Message
            </summary>
            <param name="target">Target of the Instant Message</param>
            <param name="message">Text message being sent</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.InstantMessage(OpenMetaverse.UUID,System.String,OpenMetaverse.UUID)">
            <summary>
            Send an Instant Message
            </summary>
            <param name="target">Target of the Instant Message</param>
            <param name="message">Text message being sent</param>
            <param name="imSessionID">IM session ID (to differentiate between IM windows)</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.InstantMessage(System.String,OpenMetaverse.UUID,System.String,OpenMetaverse.UUID,OpenMetaverse.UUID[])">
            <summary>
            Send an Instant Message
            </summary>
            <param name="fromName">The name this IM will show up as being from</param>
            <param name="target">Key of Avatar</param>
            <param name="message">Text message being sent</param>
            <param name="imSessionID">IM session ID (to differentiate between IM windows)</param>
            <param name="conferenceIDs">IDs of sessions for a conference</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.InstantMessage(System.String,OpenMetaverse.UUID,System.String,OpenMetaverse.UUID,OpenMetaverse.InstantMessageDialog,OpenMetaverse.InstantMessageOnline,OpenMetaverse.Vector3,OpenMetaverse.UUID,System.Byte[])">
            <summary>
            Send an Instant Message
            </summary>
            <param name="fromName">The name this IM will show up as being from</param>
            <param name="target">Key of Avatar</param>
            <param name="message">Text message being sent</param>
            <param name="imSessionID">IM session ID (to differentiate between IM windows)</param>
            <param name="dialog">Type of instant message to send</param>
            <param name="offline">Whether to IM offline avatars as well</param>
            <param name="position">Senders Position</param>
            <param name="regionID">RegionID Sender is In</param>
            <param name="binaryBucket">Packed binary data that is specific to
            the dialog type</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.InstantMessageGroup(OpenMetaverse.UUID,System.String)">
            <summary>
            Send an Instant Message to a group
            </summary>
            <param name="groupID"><seealso cref="T:OpenMetaverse.UUID"/> of the group to send message to</param>
            <param name="message">Text Message being sent.</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.InstantMessageGroup(System.String,OpenMetaverse.UUID,System.String)">
            <summary>
            Send an Instant Message to a group
            </summary>
            <param name="fromName">The name this IM will show up as being from</param>
            <param name="groupID"><seealso cref="T:OpenMetaverse.UUID"/> of the group to send message to</param>
            <param name="message">Text message being sent</param>
            <remarks>This does not appear to function with groups the agent is not in</remarks>
        </member>
        <member name="M:OpenMetaverse.AgentManager.RequestJoinGroupChat(OpenMetaverse.UUID)">
            <summary>
            Send a request to join a group chat session
            </summary>
            <param name="groupID"><seealso cref="T:OpenMetaverse.UUID"/> of Group to leave</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.RequestLeaveGroupChat(OpenMetaverse.UUID)">
            <summary>
            Request self terminates group chat. This will stop Group IM's from showing up
            until session is rejoined or expires.
            </summary>
            <param name="groupID"><seealso cref="T:OpenMetaverse.UUID"/> of Group to leave</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.ReplyToScriptDialog(System.Int32,System.Int32,System.String,OpenMetaverse.UUID)">
            <summary>
            Reply to script dialog questions. 
            </summary>
            <param name="channel">Channel initial request came on</param>
            <param name="buttonIndex">Index of button you're "clicking"</param>
            <param name="buttonlabel">Label of button you're "clicking"</param>
            <param name="objectID"><seealso cref="T:OpenMetaverse.UUID"/> of Object that sent the dialog request</param>
            <seealso cref="E:OpenMetaverse.AgentManager.OnScriptDialog"/>
        </member>
        <member name="M:OpenMetaverse.AgentManager.ChatterBoxAcceptInvite(OpenMetaverse.UUID)">
            <summary>
            Accept invite for to a chatterbox session
            </summary>
            <param name="session_id"><seealso cref="T:OpenMetaverse.UUID"/> of session to accept invite to</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.StartIMConfrence(System.Collections.Generic.List{OpenMetaverse.UUID},OpenMetaverse.UUID)">
            <summary>
            Start a friends confrence
            </summary>
            <param name="participants"><seealso cref="T:OpenMetaverse.UUID"/> List of UUIDs to start a confrence with</param>
            <param name="tmp_session_id"><seealso cref="T:OpenMetaverse.UUID"/>a Unique UUID that will be returned in the OnJoinedGroupChat callback&gt;</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.PointAtEffect(OpenMetaverse.UUID,OpenMetaverse.UUID,OpenMetaverse.Vector3d,OpenMetaverse.PointAtType,OpenMetaverse.UUID)">
            <summary>
            Start a particle stream between an agent and an object
            </summary>
            <param name="sourceAvatar"><seealso cref="T:OpenMetaverse.UUID"/> Key of the source agent</param>
            <param name="targetObject"><seealso cref="T:OpenMetaverse.UUID"/> Key of the target object</param>
            <param name="globalOffset"></param>
            <param name="type">The type from the <seealso cref="T:PointAtType"/> enum</param>
            <param name="effectID">A unique <seealso cref="T:OpenMetaverse.UUID"/> for this effect</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.LookAtEffect(OpenMetaverse.UUID,OpenMetaverse.UUID,OpenMetaverse.Vector3d,OpenMetaverse.LookAtType,OpenMetaverse.UUID)">
            <summary>
            Start a particle stream between an agent and an object
            </summary>
            <param name="sourceAvatar"><seealso cref="T:OpenMetaverse.UUID"/> Key of the source agent</param>
            <param name="targetObject"><seealso cref="T:OpenMetaverse.UUID"/> Key of the target object</param>
            <param name="globalOffset">A <seealso cref="T:OpenMetaverse.Vector3d"/> representing the beams offset from the source</param>
            <param name="type">A <seealso cref="T:PointAtType"/> which sets the avatars lookat animation</param>
            <param name="effectID"><seealso cref="T:OpenMetaverse.UUID"/> of the Effect</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.BeamEffect(OpenMetaverse.UUID,OpenMetaverse.UUID,OpenMetaverse.Vector3d,OpenMetaverse.Color4,System.Single,OpenMetaverse.UUID)">
            <summary>
            Create a particle beam between an avatar and an primitive
            </summary>
            <param name="sourceAvatar"><seealso cref="T:OpenMetaverse.UUID"/> of sources avatar</param>
            <param name="targetObject"><seealso cref="T:OpenMetaverse.UUID"/> of the target</param>
            <param name="globalOffset"><seealso cref="T:OpenMetaverse.Vector3d"/>global offset</param>
            <param name="color"><seealso cref="T:OpenMetaverse.Color4"/>Color values of beam</param>
            <param name="duration">a float representing the duration the beam will last</param>
            <param name="effectID"><seealso cref="T:OpenMetaverse.UUID"/> of the Effect</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.RequestSit(OpenMetaverse.UUID,OpenMetaverse.Vector3)">
            <summary>
            Sends a request to sit on the specified object
            </summary>
            <param name="targetID"><seealso cref="T:OpenMetaverse.UUID"/> of the object to sit on</param>
            <param name="offset">Sit at offset</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.Sit">
            <summary>
            Follows a call to <seealso cref="M:OpenMetaverse.AgentManager.RequestSit(OpenMetaverse.UUID,OpenMetaverse.Vector3)"/> to actually sit on the object
            </summary>
        </member>
        <member name="M:OpenMetaverse.AgentManager.Stand">
            <summary>Stands up from sitting on a prim or the ground</summary>
            <returns>true of AgentUpdate was sent</returns>
        </member>
        <member name="M:OpenMetaverse.AgentManager.SitOnGround">
            <summary>
            Does a "ground sit" at the avatar's current position
            </summary>
        </member>
        <member name="M:OpenMetaverse.AgentManager.Fly(System.Boolean)">
            <summary>
            Starts or stops flying
            </summary>
            <param name="start">True to start flying, false to stop flying</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.Crouch(System.Boolean)">
            <summary>
            Starts or stops crouching
            </summary>
            <param name="crouching">True to start crouching, false to stop crouching</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.Jump(System.Boolean)">
            <summary>
            Starts a jump (begin holding the jump key)
            </summary>
        </member>
        <member name="M:OpenMetaverse.AgentManager.AutoPilot(System.Double,System.Double,System.Double)">
            <summary>
            Use the autopilot sim function to move the avatar to a new
            position. Uses double precision to get precise movements
            </summary>
            <remarks>The z value is currently not handled properly by the simulator</remarks>
            <param name="globalX">Global X coordinate to move to</param>
            <param name="globalY">Global Y coordinate to move to</param>
            <param name="z">Z coordinate to move to</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.AutoPilot(System.UInt64,System.UInt64,System.Single)">
            <summary>
            Use the autopilot sim function to move the avatar to a new position
            </summary>
            <remarks>The z value is currently not handled properly by the simulator</remarks>
            <param name="globalX">Integer value for the global X coordinate to move to</param>
            <param name="globalY">Integer value for the global Y coordinate to move to</param>
            <param name="z">Floating-point value for the Z coordinate to move to</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.AutoPilotLocal(System.Int32,System.Int32,System.Single)">
            <summary>
            Use the autopilot sim function to move the avatar to a new position
            </summary>
            <remarks>The z value is currently not handled properly by the simulator</remarks>
            <param name="localX">Integer value for the local X coordinate to move to</param>
            <param name="localY">Integer value for the local Y coordinate to move to</param>
            <param name="z">Floating-point value for the Z coordinate to move to</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.AutoPilotCancel">
            <summary>Macro to cancel autopilot sim function</summary>
            <remarks>Not certain if this is how it is really done</remarks>
            <returns>true if control flags were set and AgentUpdate was sent to the simulator</returns>
        </member>
        <member name="M:OpenMetaverse.AgentManager.Grab(System.UInt32)">
            <summary>
            Grabs an object
            </summary>
            <param name="objectLocalID">an unsigned integer of the objects ID within the simulator</param>
            <seealso cref="T:OpenMetaverse.NetworkManager.CurrentSim.ObjectsPrimitives"/>
        </member>
        <member name="M:OpenMetaverse.AgentManager.GrabUpdate(OpenMetaverse.UUID,OpenMetaverse.Vector3)">
            <summary>
            Drags an object
            </summary>
            <param name="objectID"><seealso cref="T:OpenMetaverse.UUID"/> of the object to drag</param>
            <param name="grabPosition">Drag target in region coordinates</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.DeGrab(System.UInt32)">
            <summary>
            Releases a grabbed object
            </summary>
            <param name="objectLocalID">The Objects Simulator Local ID</param>
            <seealso cref="T:OpenMetaverse.NetworkManager.CurrentSim.ObjectsPrimitives"/>
            <seealso cref="M:OpenMetaverse.AgentManager.Grab(System.UInt32)"/>
            <seealso cref="M:OpenMetaverse.AgentManager.GrabUpdate(OpenMetaverse.UUID,OpenMetaverse.Vector3)"/>
        </member>
        <member name="M:OpenMetaverse.AgentManager.Touch(System.UInt32)">
            <summary>
            Touches an object
            </summary>
            <param name="objectLocalID">an unsigned integer of the objects ID within the simulator</param>
            <seealso cref="T:OpenMetaverse.NetworkManager.CurrentSim.ObjectsPrimitives"/>
        </member>
        <member name="M:OpenMetaverse.AgentManager.RequestBalance">
            <summary>
            Request the current L$ balance
            </summary>
        </member>
        <member name="M:OpenMetaverse.AgentManager.GiveAvatarMoney(OpenMetaverse.UUID,System.Int32)">
            <summary>
            Give Money to destination Avatar
            </summary>
            <param name="target">UUID of the Target Avatar</param>
            <param name="amount">Amount in L$</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.GiveAvatarMoney(OpenMetaverse.UUID,System.Int32,System.String)">
            <summary>
            Give Money to destination Avatar
            </summary>
            <param name="target">UUID of the Target Avatar</param>
            <param name="amount">Amount in L$</param>
            <param name="description">Description that will show up in the
            recipients transaction history</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.GiveObjectMoney(OpenMetaverse.UUID,System.Int32,System.String)">
            <summary>
            Give L$ to an object
            </summary>
            <param name="target">object <seealso cref="T:OpenMetaverse.UUID"/> to give money to</param>
            <param name="amount">amount of L$ to give</param>
            <param name="objectName">name of object</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.GiveGroupMoney(OpenMetaverse.UUID,System.Int32)">
            <summary>
            Give L$ to a group
            </summary>
            <param name="target">group <seealso cref="T:OpenMetaverse.UUID"/> to give money to</param>
            <param name="amount">amount of L$ to give</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.GiveGroupMoney(OpenMetaverse.UUID,System.Int32,System.String)">
            <summary>
            Give L$ to a group
            </summary>
            <param name="target">group <seealso cref="T:OpenMetaverse.UUID"/> to give money to</param>
            <param name="amount">amount of L$ to give</param>
            <param name="description">description of transaction</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.PayUploadFee">
            <summary>
            Pay texture/animation upload fee
            </summary>
        </member>
        <member name="M:OpenMetaverse.AgentManager.PayUploadFee(System.String)">
            <summary>
            Pay texture/animation upload fee
            </summary>
            <param name="description">description of the transaction</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.GiveMoney(OpenMetaverse.UUID,System.Int32,System.String,OpenMetaverse.MoneyTransactionType,OpenMetaverse.TransactionFlags)">
            <summary>
            Give Money to destionation Object or Avatar
            </summary>
            <param name="target">UUID of the Target Object/Avatar</param>
            <param name="amount">Amount in L$</param>
            <param name="description">Reason (Optional normally)</param>
            <param name="type">The type of transaction</param>
            <param name="flags">Transaction flags, mostly for identifying group
            transactions</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.AnimationStart(OpenMetaverse.UUID,System.Boolean)">
            <summary>
            Send an AgentAnimation packet that toggles a single animation on
            </summary>
            <param name="animation">The <seealso cref="T:OpenMetaverse.UUID"/> of the animation to start playing</param>
            <param name="reliable">Whether to ensure delivery of this packet or not</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.AnimationStop(OpenMetaverse.UUID,System.Boolean)">
            <summary>
            Send an AgentAnimation packet that toggles a single animation off
            </summary>
            <param name="animation">The <seealso cref="T:OpenMetaverse.UUID"/> of a 
            currently playing animation to stop playing</param>
            <param name="reliable">Whether to ensure delivery of this packet or not</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.Animate(System.Collections.Generic.Dictionary{OpenMetaverse.UUID,System.Boolean},System.Boolean)">
            <summary>
            Send an AgentAnimation packet that will toggle animations on or off
            </summary>
            <param name="animations">A list of animation <seealso cref="T:OpenMetaverse.UUID"/>s, and whether to
            turn that animation on or off</param>
            <param name="reliable">Whether to ensure delivery of this packet or not</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.GoHome">
            <summary>
            Teleports agent to their stored home location
            </summary>
            <returns>true on successful teleport to home location</returns>
        </member>
        <member name="M:OpenMetaverse.AgentManager.Teleport(OpenMetaverse.UUID)">
            <summary>
            Teleport agent to a landmark
            </summary>
            <param name="landmark"><seealso cref="T:OpenMetaverse.UUID"/> of the landmark to teleport agent to</param>
            <returns>true on success, false on failure</returns>
        </member>
        <member name="M:OpenMetaverse.AgentManager.Teleport(System.String,OpenMetaverse.Vector3)">
            <summary>
            Attempt to look up a simulator name and teleport to the discovered
            destination
            </summary>
            <param name="simName">Region name to look up</param>
            <param name="position">Position to teleport to</param>
            <returns>True if the lookup and teleport were successful, otherwise
            false</returns>
        </member>
        <member name="M:OpenMetaverse.AgentManager.Teleport(System.String,OpenMetaverse.Vector3,OpenMetaverse.Vector3)">
            <summary>
            Attempt to look up a simulator name and teleport to the discovered
            destination
            </summary>
            <param name="simName">Region name to look up</param>
            <param name="position">Position to teleport to</param>
            <param name="lookAt">Target to look at</param>
            <returns>True if the lookup and teleport were successful, otherwise
            false</returns>
        </member>
        <member name="M:OpenMetaverse.AgentManager.Teleport(System.UInt64,OpenMetaverse.Vector3)">
            <summary>
            Teleport agent to another region
            </summary>
            <param name="regionHandle">handle of region to teleport agent to</param>
            <param name="position"><seealso cref="T:OpenMetaverse.Vector3"/> position in destination sim to teleport to</param>
            <returns>true on success, false on failure</returns>
            <remarks>This call is blocking</remarks>
        </member>
        <member name="M:OpenMetaverse.AgentManager.Teleport(System.UInt64,OpenMetaverse.Vector3,OpenMetaverse.Vector3)">
            <summary>
            Teleport agent to another region
            </summary>
            <param name="regionHandle">handle of region to teleport agent to</param>
            <param name="position"><seealso cref="T:OpenMetaverse.Vector3"/> position in destination sim to teleport to</param>
            <param name="lookAt"><seealso cref="T:OpenMetaverse.Vector3"/> direction in destination sim agent will look at</param>
            <returns>true on success, false on failure</returns>
            <remarks>This call is blocking</remarks>
        </member>
        <member name="M:OpenMetaverse.AgentManager.RequestTeleport(System.UInt64,OpenMetaverse.Vector3)">
            <summary>
            Request teleport to a another simulator
            </summary>
            <param name="regionHandle">handle of region to teleport agent to</param>
            <param name="position"><seealso cref="T:OpenMetaverse.Vector3"/> position in destination sim to teleport to</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.RequestTeleport(System.UInt64,OpenMetaverse.Vector3,OpenMetaverse.Vector3)">
            <summary>
            Request teleport to a another simulator
            </summary>
            <param name="regionHandle">handle of region to teleport agent to</param>
            <param name="position"><seealso cref="T:OpenMetaverse.Vector3"/> position in destination sim to teleport to</param>
            <param name="lookAt"><seealso cref="T:OpenMetaverse.Vector3"/> direction in destination sim agent will look at</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.RequestTeleport(OpenMetaverse.UUID)">
            <summary>
            Teleport agent to a landmark
            </summary>
            <param name="landmark"><seealso cref="T:OpenMetaverse.UUID"/> of the landmark to teleport agent to</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.SendTeleportLure(OpenMetaverse.UUID)">
            <summary>
            Send a teleport lure to another avatar with default "Join me in ..." invitation message
            </summary>
            <param name="targetID">target avatars <seealso cref="T:OpenMetaverse.UUID"/> to lure</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.SendTeleportLure(OpenMetaverse.UUID,System.String)">
            <summary>
            Send a teleport lure to another avatar with custom invitation message
            </summary>
            <param name="targetID">target avatars <seealso cref="T:OpenMetaverse.UUID"/> to lure</param>
            <param name="message">custom message to send with invitation</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.TeleportLureRespond(OpenMetaverse.UUID,System.Boolean)">
            <summary>
            Respond to a teleport lure by either accepting it and initiating 
            the teleport, or denying it
            </summary>
            <param name="requesterID"><seealso cref="T:OpenMetaverse.UUID"/> of the avatar sending the lure</param>
            <param name="accept">true to accept the lure, false to decline it</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.UpdateProfile(OpenMetaverse.Avatar.AvatarProperties)">
            <summary>
            Update agent profile
            </summary>
            <param name="profile"><seealso cref="T:OpenMetaverse.Avatar.AvatarProperties"/> struct containing updated 
            profile information</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.UpdateInterests(OpenMetaverse.Avatar.Interests)">
            <summary>
            Update agents profile interests
            </summary>
            <param name="interests">selection of interests from <seealso cref="T:OpenMetaverse.Avatar.Interests"/> struct</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.SetHeightWidth(System.UInt16,System.UInt16)">
            <summary>
            Set the height and the width of the client window. This is used
            by the server to build a virtual camera frustum for our avatar
            </summary>
            <param name="height">New height of the viewer window</param>
            <param name="width">New width of the viewer window</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.RequestMuteList">
            <summary>
            Request the list of muted objects and avatars for this agent
            </summary>
        </member>
        <member name="M:OpenMetaverse.AgentManager.SetHome">
            <summary>
            Sets home location to agents current position
            </summary>
            <remarks>will fire an AlertMessage (<seealso cref="E:OpenMetaverse.AgentManager.OnAlertMessage"/>) with 
            success or failure message</remarks>
        </member>
        <member name="M:OpenMetaverse.AgentManager.CompleteAgentMovement(OpenMetaverse.Simulator)">
            <summary>
            Move an agent in to a simulator. This packet is the last packet
            needed to complete the transition in to a new simulator
            </summary>
            <param name="simulator"><seealso cref="T:OpenMetaverse.Simulator"/> Object</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.ScriptQuestionReply(OpenMetaverse.Simulator,OpenMetaverse.UUID,OpenMetaverse.UUID,OpenMetaverse.ScriptPermission)">
            <summary>
            Reply to script permissions request
            </summary>
            <param name="simulator"><seealso cref="T:OpenMetaverse.Simulator"/> Object</param>
            <param name="itemID"><seealso cref="T:OpenMetaverse.UUID"/> of the itemID requesting permissions</param>
            <param name="taskID"><seealso cref="T:OpenMetaverse.UUID"/> of the taskID requesting permissions</param>
            <param name="permissions"><seealso cref="T:OpenMetaverse.ScriptPermission"/> list of permissions to allow</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.GroupInviteRespond(OpenMetaverse.UUID,OpenMetaverse.UUID,System.Boolean)">
            <summary>
            Respond to a group invitation by either accepting or denying it
            </summary>
            <param name="groupID">UUID of the group (sent in the AgentID field of the invite message)</param>
            <param name="imSessionID">IM Session ID from the group invitation message</param>
            <param name="accept">Accept the group invitation or deny it</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.RequestScriptSensor(System.String,OpenMetaverse.UUID,OpenMetaverse.ScriptSensorTypeFlags,System.Single,System.Single,OpenMetaverse.UUID,OpenMetaverse.Simulator)">
            <summary>
            Requests script detection of objects and avatars
            </summary>
            <param name="name">name of the object/avatar to search for</param>
            <param name="searchID">UUID of the object or avatar to search for</param>
            <param name="type">Type of search from ScriptSensorTypeFlags</param>
            <param name="range">range of scan (96 max?)</param>
            <param name="arc">the arc in radians to search within</param>
            <param name="requestID">an user generated ID to correlate replies with</param>
            <param name="sim">Simulator to perform search in</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.PickInfoUpdate(OpenMetaverse.UUID,System.Boolean,OpenMetaverse.UUID,System.String,OpenMetaverse.Vector3d,OpenMetaverse.UUID,System.String)">
            <summary>
            Create or update profile pick
            </summary>
            <param name="pickID">UUID of the pick to update, or random UUID to create a new pick</param>
            <param name="topPick">Is this a top pick? (typically false)</param>
            <param name="parcelID">UUID of the parcel (UUID.Zero for the current parcel)</param>
            <param name="name">Name of the pick</param>
            <param name="globalPosition">Global position of the pick landmark</param>
            <param name="textureID">UUID of the image displayed with the pick</param>
            <param name="description">Long description of the pick</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.PickDelete(OpenMetaverse.UUID)">
            <summary>
            Delete profile pick
            </summary>
            <param name="pickID">UUID of the pick to delete</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.InstantMessageHandler(OpenMetaverse.Packets.Packet,OpenMetaverse.Simulator)">
            <summary>
            Take an incoming ImprovedInstantMessage packet, auto-parse, and if
            OnInstantMessage is defined call that with the appropriate arguments
            </summary>
            <param name="packet">Incoming ImprovedInstantMessagePacket</param>
            <param name="simulator">Unused</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.ChatHandler(OpenMetaverse.Packets.Packet,OpenMetaverse.Simulator)">
            <summary>
            Take an incoming Chat packet, auto-parse, and if OnChat is defined call 
              that with the appropriate arguments.
            </summary>
            <param name="packet">Incoming ChatFromSimulatorPacket</param>
            <param name="simulator">Unused</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.ScriptDialogHandler(OpenMetaverse.Packets.Packet,OpenMetaverse.Simulator)">
            <summary>
            Used for parsing llDialogs
            </summary>
            <param name="packet">Incoming ScriptDialog packet</param>
            <param name="simulator">Unused</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.ScriptQuestionHandler(OpenMetaverse.Packets.Packet,OpenMetaverse.Simulator)">
            <summary>
            Used for parsing llRequestPermissions dialogs
            </summary>
            <param name="packet">Incoming ScriptDialog packet</param>
            <param name="simulator">Unused</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.ScriptControlChangeHandler(OpenMetaverse.Packets.Packet,OpenMetaverse.Simulator)">
            <summary>
            Handles Script Control changes when Script with permissions releases or takes a control
            </summary>
            <param name="packet"></param>
            <param name="simulator"></param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.LoadURLHandler(OpenMetaverse.Packets.Packet,OpenMetaverse.Simulator)">
            <summary>
            Used for parsing llLoadURL Dialogs
            </summary>
            <param name="packet"></param>
            <param name="simulator"></param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.MovementCompleteHandler(OpenMetaverse.Packets.Packet,OpenMetaverse.Simulator)">
            <summary>
            Update client's Position, LookAt and region handle from incoming packet
            </summary>
            <param name="packet">Incoming AgentMovementCompletePacket</param>
            <param name="simulator">Unused</param>
            <remarks>This occurs when after an avatar moves into a new sim</remarks>
        </member>
        <member name="M:OpenMetaverse.AgentManager.HealthHandler(OpenMetaverse.Packets.Packet,OpenMetaverse.Simulator)">
            <summary>
            Update Client Avatar's health via incoming packet
            </summary>
            <param name="packet">Incoming HealthMessagePacket</param>
            <param name="simulator">Unused</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.BalanceHandler(OpenMetaverse.Packets.Packet,OpenMetaverse.Simulator)">
            <summary>
            Update Client Avatar's L$ balance from incoming packet
            </summary>
            <param name="packet">Incoming MoneyBalanceReplyPacket</param>
            <param name="simulator">Unused</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.TeleportFinishEventHandler(System.String,OpenMetaverse.StructuredData.OSD,OpenMetaverse.Simulator)">
            <summary>
            Process TeleportFinish from Event Queue and pass it onto our TeleportHandler
            </summary>
            <param name="message"></param>
            <param name="osd"></param>
            <param name="simulator"></param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.TeleportHandler(OpenMetaverse.Packets.Packet,OpenMetaverse.Simulator)">
            <summary>
            Handler for teleport Requests
            </summary>
            <param name="packet">Incoming TeleportHandler packet</param>
            <param name="simulator">Simulator sending teleport information</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.AvatarAnimationHandler(OpenMetaverse.Packets.Packet,OpenMetaverse.Simulator)">
            <summary>
            
            </summary>
            <param name="packet"></param>
            <param name="sim"></param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.CrossedRegionHandler(OpenMetaverse.Packets.Packet,OpenMetaverse.Simulator)">
            <summary>
            Allows agent to cross over (walk, fly, vehicle) in to neighboring
            simulators
            </summary>
        </member>
        <member name="M:OpenMetaverse.AgentManager.ChatterBoxSessionEventHandler(System.String,OpenMetaverse.StructuredData.OSD,OpenMetaverse.Simulator)">
            <summary>
            Group Chat event handler
            </summary>
            <param name="capsKey">The capability Key</param>
            <param name="osd"></param>
            <param name="simulator"></param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.ChatterBoxSessionStartReplyHandler(System.String,OpenMetaverse.StructuredData.OSD,OpenMetaverse.Simulator)">
            <summary>
            Response from request to join a group chat
            </summary>
            <param name="capsKey"></param>
            <param name="osd"></param>
            <param name="simulator"></param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.ChatterBoxSessionAgentListReplyHandler(System.String,OpenMetaverse.StructuredData.OSD,OpenMetaverse.Simulator)">
            <summary>
            Someone joined or left group chat
            </summary>
            <param name="capsKey"></param>
            <param name="osd"></param>
            <param name="simulator"></param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.ChatterBoxInvitationHandler(System.String,OpenMetaverse.StructuredData.OSD,OpenMetaverse.Simulator)">
            <summary>
            Group Chat Request
            </summary>
            <param name="capsKey">Caps Key</param>
            <param name="osd">SD Map containing invitation</param>
            <param name="simulator">Originating Simulator</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.ModerateChatSessions(OpenMetaverse.UUID,OpenMetaverse.UUID,System.Boolean)">
            <summary>
            Moderate a chat session
            </summary>
            <param name="sessionID">the <see cref="T:OpenMetaverse.UUID"/> of the session to moderate, for group chats this will be the groups UUID</param>
            <param name="memberID">the <see cref="T:OpenMetaverse.UUID"/> of the avatar to moderate</param>
            <param name="moderateText">true to moderate (silence user), false to allow avatar to speak</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.AlertMessageHandler(OpenMetaverse.Packets.Packet,OpenMetaverse.Simulator)">
            <summary>
            Alert Message packet handler
            </summary>
            <param name="packet">AlertMessagePacket</param>
            <param name="simulator">not used</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.CameraConstraintHandler(OpenMetaverse.Packets.Packet,OpenMetaverse.Simulator)">
            <summary>
            detects camera constraint collisions
            </summary>
            <param name="packet"></param>
            <param name="simulator"></param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.ScriptSensorReplyHandler(OpenMetaverse.Packets.Packet,OpenMetaverse.Simulator)">
            <summary>
            Packet handler for ScriptSensorReply packet
            </summary>
            <param name="packet"></param>
            <param name="simulator"></param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.AvatarSitResponseHandler(OpenMetaverse.Packets.Packet,OpenMetaverse.Simulator)">
            <summary>
            Packet handler for AvatarSitResponse packet
            </summary>
            <param name="packet"></param>
            <param name="simulator"></param>
        </member>
        <member name="E:OpenMetaverse.AgentManager.OnChat">
            <summary>Fired when a <see cref="T:OpenMetaverse.Packets.ChatFromSimulatorPacket"/> is received from the simulator, Contains
            Any Whisper, Shout, or Say within range of avatar</summary>
        </member>
        <member name="E:OpenMetaverse.AgentManager.OnScriptDialog">
            <summary>Fired when a <see cref="T:OpenMetaverse.Packets.ScriptDialogPacket"/> is received, use <seealso cref="M:OpenMetaverse.AgentManager.ReplyToScriptDialog(System.Int32,System.Int32,System.String,OpenMetaverse.UUID)"/> 
            to respond to dialog</summary>
        </member>
        <member name="E:OpenMetaverse.AgentManager.OnScriptQuestion">
            <summary>Fired when a <seealso cref="T:OpenMetaverse.Packets.ScriptQuestionPacket"/> is received in response to a 
            scripted object requesting permissions, Use <seealso cref="M:OpenMetaverse.AgentManager.ScriptQuestionReply(OpenMetaverse.Simulator,OpenMetaverse.UUID,OpenMetaverse.UUID,OpenMetaverse.ScriptPermission)"/> to reply</summary>
        </member>
        <member name="E:OpenMetaverse.AgentManager.OnLoadURL">
            <summary>Fired when a <seealso cref="T:OpenMetaverse.Packets.LoadURLPacket"/> is received, contains a URL pasted in Chat</summary>
        </member>
        <member name="E:OpenMetaverse.AgentManager.OnInstantMessage">
            <summary>Fired when a <seealso cref="T:OpenMetaverse.Packets.ImprovedInstantMessagePacket"/> or a ChatterBoxInvitation is received</summary>
        </member>
        <member name="E:OpenMetaverse.AgentManager.OnTeleport">
            <summary>Fired when a <seealso cref="T:OpenMetaverse.Packets.TeleportLocalPacket"/> is received, occurs when a
            <seealso cref="M:OpenMetaverse.AgentManager.RequestTeleport(System.UInt64,OpenMetaverse.Vector3)"/> or <seealso cref="M:OpenMetaverse.AgentManager.Teleport(OpenMetaverse.UUID)"/> is called</summary>
        </member>
        <member name="E:OpenMetaverse.AgentManager.OnBalanceUpdated">
            <summary>Fired when a <seealso cref="T:OpenMetaverse.Packets.MoneyBalanceReplyPacket"/> indicating the agents
            balance has changed by spending, sending, or receiving L$, Contains the Avatars new balance</summary>
        </member>
        <member name="E:OpenMetaverse.AgentManager.OnMoneyBalanceReplyReceived">
            <summary>Fired when a <seealso cref="T:OpenMetaverse.Packets.MoneyBalanceReplyPacket"/> is received, contains L$ balance and additional
            details of the transaction</summary>
        </member>
        <member name="E:OpenMetaverse.AgentManager.OnAgentDataUpdated">
            <summary>Fired when a <seealso cref="T:OpenMetaverse.Packets.AgentDataUpdatePacket"/> is received, caused by changing the
            Agents active group with <seealso cref="!:ActivateGroup"/></summary>
        </member>
        <member name="E:OpenMetaverse.AgentManager.OnAnimationsChanged">
            <summary>Fired when a <seealso cref="T:OpenMetaverse.Packets.AvatarAnimationPacket"/> is received, will contain a Dictionary
            of animations currently being played</summary>
        </member>
        <member name="E:OpenMetaverse.AgentManager.OnMeanCollision">
            <summary>Callback for an object or avatar forcefully colliding
            with the agent</summary>
        </member>
        <member name="E:OpenMetaverse.AgentManager.OnRegionCrossed">
            <summary>Callback for the agent moving in to a neighboring sim</summary>
        </member>
        <member name="E:OpenMetaverse.AgentManager.OnGroupChatJoin">
            <summary>Callback for when agent is confirmed joined group chat session.</summary>
        </member>
        <member name="E:OpenMetaverse.AgentManager.OnGroupChatLeft">
            <summary>Callback for when agent is confirmed to have left group chat session.</summary>
        </member>
        <member name="E:OpenMetaverse.AgentManager.OnAlertMessage">
            <summary>Alert messages sent to client from simulator</summary>
        </member>
        <member name="E:OpenMetaverse.AgentManager.OnScriptControlChange">
            <summary>Fired when a script wants to take or release control of your avatar.</summary>
        </member>
        <member name="E:OpenMetaverse.AgentManager.OnCameraConstraint">
            <summary>Fired when our avatar camera reaches the maximum possible point</summary>
        </member>
        <member name="E:OpenMetaverse.AgentManager.OnScriptSensorReply">
            <summary>Fired when a script sensor reply is received</summary>
        </member>
        <member name="E:OpenMetaverse.AgentManager.OnAvatarSitResponse">
            <summary>Fired in response to a sit request</summary>
        </member>
        <member name="E:OpenMetaverse.AgentManager.OnChatSessionMemberAdded">
            <summary>Fired when a new member joins an active ChatterBoxSession session</summary>
        </member>
        <member name="E:OpenMetaverse.AgentManager.OnChatSessionMemberLeft">
            <summary>Fired when a member of an active ChatterBoxSession leaves the session</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentID">
            <summary>Your (client) avatars <seealso cref="T:OpenMetaverse.UUID"/></summary>
            <remarks>"client", "agent", and "avatar" all represent the same thing</remarks>
        </member>
        <member name="P:OpenMetaverse.AgentManager.SessionID">
            <summary>Temporary <seealso cref="T:OpenMetaverse.UUID"/> assigned to this session, used for 
            verifying our identity in packets</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.SecureSessionID">
            <summary>Shared secret <seealso cref="T:OpenMetaverse.UUID"/> that is never sent over the wire</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.LocalID">
            <summary>Your (client) avatar ID, local to the current region/sim</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.StartLocation">
            <summary>Where the avatar started at login. Can be "last", "home" 
            or a login <seealso cref="T:OpenMetaverse.URI"/></summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentAccess">
            <summary>The access level of this agent, usually M or PG</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.CollisionPlane">
            <summary>The CollisionPlane of Agent</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.Velocity">
            <summary>An <seealso cref="T:OpenMetaverse.Vector3"/> representing the velocity of our agent</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.Acceleration">
            <summary>An <seealso cref="T:OpenMetaverse.Vector3"/> representing the acceleration of our agent</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AngularVelocity">
            <summary>A <seealso cref="T:OpenMetaverse.Vector3"/> which specifies the angular speed, and axis about which an Avatar is rotating.</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.HomePosition">
            <summary>Position avatar client will goto when login to 'home' or during
            teleport request to 'home' region.</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.HomeLookAt">
            <summary>LookAt point saved/restored with HomePosition</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.FirstName">
            <summary>Avatar First Name (i.e. Philip)</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.LastName">
            <summary>Avatar Last Name (i.e. Linden)</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.Name">
            <summary>Avatar Full Name (i.e. Philip Linden)</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.Health">
            <summary>Gets the health of the agent</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.Balance">
            <summary>Gets the current balance of the agent</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.SittingOn">
            <summary>Gets the local ID of the prim the agent is sitting on,
            zero if the avatar is not currently sitting</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.ActiveGroup">
            <summary>Gets the <seealso cref="T:OpenMetaverse.UUID"/> of the agents active group.</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.ActiveGroupPowers">
            <summary>Gets the Agents powers in the currently active group</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.TeleportMessage">
            <summary>Current status message for teleporting</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.RelativePosition">
            <summary>Current position of the agent as a relative offset from
            the simulator, or the parent object if we are sitting on something</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.RelativeRotation">
            <summary>Current rotation of the agent as a relative rotation from
            the simulator, or the parent object if we are sitting on something</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.SimPosition">
            <summary>Current position of the agent in the simulator</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.SimRotation">
            <summary>
            A <seealso cref="T:OpenMetaverse.Quaternion"/> representing the agents current rotation
            </summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.GlobalPosition">
            <summary>Returns the global grid position of the avatar</summary>
        </member>
        <member name="T:OpenMetaverse.AgentManager.ChatCallback">
            <summary>
            Triggered on incoming chat messages
            </summary>
            <param name="message">Text of chat message</param>
            <param name="audible">Audible level of this chat message</param>
            <param name="type">Type of chat (whisper, shout, status, etc.)</param>
            <param name="sourceType">Source of the chat message</param>
            <param name="fromName">Name of the sending object</param>
            <param name="id">Key of source</param>
            <param name="ownerid">Key of the sender</param>
            <param name="position">Senders position</param>
        </member>
        <member name="T:OpenMetaverse.AgentManager.ScriptDialogCallback">
            <summary>
            Triggered when a script pops up a dialog box
            </summary>
            <param name="message">The dialog box message</param>
            <param name="objectName">Name of the object that sent the dialog</param>
            <param name="imageID">Image to be displayed in the dialog</param>
            <param name="objectID">ID of the object that sent the dialog</param>
            <param name="firstName">First name of the object owner</param>
            <param name="lastName">Last name of the object owner</param>
            <param name="chatChannel">Chat channel that the object is communicating on</param>
            <param name="buttons">List of button labels</param>
        </member>
        <member name="T:OpenMetaverse.AgentManager.ScriptQuestionCallback">
            <summary>
            Triggered when a script asks for permissions
            </summary>
            <param name="simulator">Simulator object this request comes from</param>
            <param name="taskID">Task ID of the script requesting permissions</param>
            <param name="itemID">ID of the object containing the script</param>
            <param name="objectName">Name of the object containing the script</param>
            <param name="objectOwner">Name of the object's owner</param>
            <param name="questions">Bitwise value representing the requested permissions</param>
        </member>
        <member name="T:OpenMetaverse.AgentManager.LoadURLCallback">
            <summary>
            Triggered when a script displays a URL via llLoadURL
            </summary>
            <param name="objectName">Name of the scripted object</param>
            <param name="objectID">ID of the scripted object</param>
            <param name="ownerID">ID of the object's owner</param>
            <param name="ownerIsGroup">Whether or not ownerID is a group</param>
            <param name="message">Message displayed along with URL</param>
            <param name="URL">Offered URL</param>
        </member>
        <member name="T:OpenMetaverse.AgentManager.BalanceCallback">
            <summary>
            Triggered when the L$ account balance for this avatar changes
            </summary>
            <param name="balance">The new account balance</param>
        </member>
        <member name="T:OpenMetaverse.AgentManager.MoneyBalanceReplyCallback">
            <summary>
            Triggered on Money Balance Reply
            </summary>
            <param name="transactionID">ID provided in Request Money Balance, or auto-generated by system events</param>
            <param name="transactionSuccess">Was the transaction successful</param>
            <param name="balance">Current balance</param>
            <param name="metersCredit">Land use credits you have</param>
            <param name="metersCommitted">Tier committed to group(s)</param>
            <param name="description">Description of the transaction</param>
        </member>
        <member name="T:OpenMetaverse.AgentManager.InstantMessageCallback">
            <summary>
            Triggered on incoming instant messages
            </summary>
            <param name="im">Instant message data structure</param>
            <param name="simulator">Simulator where this IM was received from</param>
        </member>
        <member name="T:OpenMetaverse.AgentManager.TeleportCallback">
            <summary>
            Triggered for any status updates of a teleport (progress, failed, succeeded)
            </summary>
            <param name="message">A message about the current teleport status</param>
            <param name="status">The current status of the teleport</param>
            <param name="flags">Various flags describing the teleport</param>
        </member>
        <member name="T:OpenMetaverse.AgentManager.JoinGroupCallback">
            <summary>
            Reply to a request to join a group, informs whether it was successful or not
            </summary>
            <param name="groupID">The group we attempted to join</param>
            <param name="success">Whether we joined the group or not</param>
        </member>
        <member name="T:OpenMetaverse.AgentManager.LeaveGroupCallback">
            <summary>
            Reply to a request to leave a group, informs whether it was successful or not
            </summary>
            <param name="groupID">The group we attempted to leave</param>
            <param name="success">Whether we left the group or not</param>
        </member>
        <member name="T:OpenMetaverse.AgentManager.GroupDroppedCallback">
            <summary>
            Informs the avatar that it is no longer a member of a group
            </summary>
            <param name="groupID">The group Key we are no longer a member of</param>
        </member>
        <member name="T:OpenMetaverse.AgentManager.AgentDataCallback">
            <summary>
            Reply to an AgentData request
            </summary>
            <param name="firstName">First name of Avatar</param>
            <param name="lastName">Last name of Avatar</param>
            <param name="activeGroupID">Key of Group Avatar has active</param>
            <param name="groupTitle">Avatars Active Title</param>
            <param name="groupPowers">Powers Avatar has in group</param>
            <param name="groupName">Name of the Group</param>
        </member>
        <member name="T:OpenMetaverse.AgentManager.AnimationsChangedCallback">
            <summary>
            Triggered when the current agent animations change
            </summary>
            <param name="agentAnimations">A convenience reference to the
            SignaledAnimations collection</param>
        </member>
        <member name="T:OpenMetaverse.AgentManager.MeanCollisionCallback">
            <summary>
            Triggered when an object or avatar forcefully collides with our
            agent
            </summary>
            <param name="type">Collision type</param>
            <param name="perp">Colliding object or avatar ID</param>
            <param name="victim">Victim ID, should be our own AgentID</param>
            <param name="magnitude">Velocity or total force of the collision</param>
            <param name="time">Time the collision occurred</param>
        </member>
        <member name="T:OpenMetaverse.AgentManager.RegionCrossedCallback">
            <summary>
            Triggered when the agent physically moves in to a neighboring region
            </summary>
            <param name="oldSim">Simulator agent was previously occupying</param>
            <param name="newSim">Simulator agent is now currently occupying</param>
        </member>
        <member name="T:OpenMetaverse.AgentManager.GroupChatJoinedCallback">
            <summary>
            Fired when group chat session confirmed joined</summary>
            <param name="groupChatSessionID">Key of Session (groups UUID)</param>
            <param name="tmpSessionID">Temporary session Key</param>
            <param name="sessionName">A string representation of the session name</param>
            <param name="success"><see langword="true"/> if session start successful, 
            <see langword="false"/> otherwise</param>
        </member>
        <member name="T:OpenMetaverse.AgentManager.GroupChatLeftCallback">
            <summary>Fired when agent group chat session terminated</summary>
            <param name="groupchatSessionID">Key of Session (groups UUID)</param>
        </member>
        <member name="T:OpenMetaverse.AgentManager.AlertMessageCallback">
            <summary>
            Fired when alert message received from simulator
            </summary>
            <param name="message">the message sent from the grid to our avatar.</param>
        </member>
        <member name="T:OpenMetaverse.AgentManager.ScriptControlCallback">
            <summary>
            Fired when a script wants to give or release controls.
            </summary>
            <param name="controls">Control to give or take</param>
            <param name="pass">true of passing control to agent</param>
            <param name="take">true of taking control from agent</param>
        </member>
        <member name="T:OpenMetaverse.AgentManager.CameraConstraintCallback">
            <summary>
            Fired when camera tries to view beyond its view limits
            </summary>
            <param name="collidePlane"><seealso cref="T:OpenMetaverse.Vector4"/> representing plane where constraints were hit</param>
        </member>
        <member name="T:OpenMetaverse.AgentManager.ScriptSensorReplyCallback">
            <summary>
            Fired when script sensor reply is received
            </summary>
            <param name="requestorID">requestors UUID</param>
            <param name="groupID">Sources Group UUID</param>
            <param name="name">Sources Name</param>
            <param name="objectID">Objects UUID</param>
            <param name="ownerID">Object owners UUID</param>
            <param name="position">Position of Object</param>
            <param name="range">Range of Object</param>
            <param name="rotation">Rotation of object</param>
            <param name="type">Objects Type</param>
            <param name="velocity"><seealso cref="T:OpenMetaverse.Vector3"/> representing the velocity of object</param>
            TODO: this should probably be a struct, and there should be an enum added for type
        </member>
        <member name="T:OpenMetaverse.AgentManager.AvatarSitResponseCallback">
            <summary>
            Fired in response to a RequestSit()
            </summary>
            <param name="objectID">ID of primitive avatar will be sitting on</param>
            <param name="autoPilot">true of avatar autopiloted there</param>
            <param name="cameraAtOffset">Camera offset when avatar is seated</param>
            <param name="cameraEyeOffset">Camera eye offset when avatar is seated</param>
            <param name="forceMouselook">true of sitting on this object will force mouselook</param>
            <param name="sitPosition">position avatar will be in when seated</param>
            <param name="sitRotation">rotation avatar will be in when seated</param>
        </member>
        <member name="T:OpenMetaverse.AgentManager.ChatSessionMemberAddedCallback">
            <summary>
            Fired when a new member joins a Group chat session
            </summary>
            <param name="sessionID">the ID of the session</param>
            <param name="agent_key">the ID of the avatar that joined</param>
        </member>
        <member name="T:OpenMetaverse.AgentManager.ChatSessionMemberLeftCallback">
            <summary>
            Fired when a member of a Group chat leaves the session
            </summary>
            <param name="sessionID">the ID of the session</param>
            <param name="agent_key">the ID of the avatar that joined</param>
        </member>
        <member name="T:OpenMetaverse.AgentManager.AgentMovement">
            <summary> 
            Agent movement and camera control
            
            Agent movement is controlled by setting specific <seealso cref="T:AgentManager.ControlFlags"/>
            After the control flags are set, An AgentUpdate is required to update the simulator of the specified flags
            This is most easily accomplished by setting one or more of the AgentMovement properties
            
            Movement of an avatar is always based on a compass direction, for example AtPos will move the 
            agent from West to East or forward on the X Axis, AtNeg will of course move agent from 
            East to West or backward on the X Axis, LeftPos will be South to North or forward on the Y Axis
            The Z axis is Up, finer grained control of movements can be done using the Nudge properties
            </summary> 
        </member>
        <member name="F:OpenMetaverse.AgentManager.AgentMovement.Camera">
            <summary>Agent camera controls</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.AgentMovement.Flags">
            <summary>Currently only used for hiding your group title</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.AgentMovement.State">
            <summary>Action state of the avatar, which can currently be
            typing and editing</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.AgentMovement.BodyRotation">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.AgentMovement.HeadRotation">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.AgentMovement.LastBodyRotation">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.AgentMovement.LastHeadRotation">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.AgentMovement.LastCameraCenter">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.AgentMovement.LastCameraXAxis">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.AgentMovement.LastCameraYAxis">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.AgentMovement.LastCameraZAxis">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.AgentMovement.LastFar">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.AgentMovement.updateTimer">
            <summary>Timer for sending AgentUpdate packets</summary>
        </member>
        <member name="M:OpenMetaverse.AgentManager.AgentMovement.#ctor(OpenMetaverse.GridClient)">
            <summary>Default constructor</summary>
        </member>
        <member name="M:OpenMetaverse.AgentManager.AgentMovement.UpdateFromHeading(System.Double,System.Boolean)">
            <summary>
            Send an AgentUpdate with the camera set at the current agent
            position and pointing towards the heading specified
            </summary>
            <param name="heading">Camera rotation in radians</param>
            <param name="reliable">Whether to send the AgentUpdate reliable
            or not</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.AgentMovement.TurnToward(OpenMetaverse.Vector3)">
            <summary>
            Rotates the avatar body and camera toward a target position.
            This will also anchor the camera position on the avatar
            </summary>
            <param name="target">Region coordinates to turn toward</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.AgentMovement.SendUpdate">
            <summary>
            Send new AgentUpdate packet to update our current camera 
            position and rotation
            </summary>
        </member>
        <member name="M:OpenMetaverse.AgentManager.AgentMovement.SendUpdate(System.Boolean)">
            <summary>
            Send new AgentUpdate packet to update our current camera 
            position and rotation
            </summary>
            <param name="reliable">Whether to require server acknowledgement
            of this packet</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.AgentMovement.SendUpdate(System.Boolean,OpenMetaverse.Simulator)">
            <summary>
            Send new AgentUpdate packet to update our current camera 
            position and rotation
            </summary>
            <param name="reliable">Whether to require server acknowledgement
            of this packet</param>
            <param name="simulator">Simulator to send the update to</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.AgentMovement.SendManualUpdate(OpenMetaverse.AgentManager.ControlFlags,OpenMetaverse.Vector3,OpenMetaverse.Vector3,OpenMetaverse.Vector3,OpenMetaverse.Vector3,OpenMetaverse.Quaternion,OpenMetaverse.Quaternion,System.Single,OpenMetaverse.AgentFlags,OpenMetaverse.AgentState,System.Boolean)">
            <summary>
            Builds an AgentUpdate packet entirely from parameters. This
            will not touch the state of Self.Movement or
            Self.Movement.Camera in any way
            </summary>
            <param name="controlFlags"></param>
            <param name="position"></param>
            <param name="forwardAxis"></param>
            <param name="leftAxis"></param>
            <param name="upAxis"></param>
            <param name="bodyRotation"></param>
            <param name="headRotation"></param>
            <param name="farClip"></param>
            <param name="reliable"></param>
            <param name="flags"></param>
            <param name="state"></param>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.AtPos">
            <summary>Move agent positive along the X axis</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.AtNeg">
            <summary>Move agent negative along the X axis</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.LeftPos">
            <summary>Move agent positive along the Y axis</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.LeftNeg">
            <summary>Move agent negative along the Y axis</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.UpPos">
            <summary>Move agent positive along the Z axis</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.UpNeg">
            <summary>Move agent negative along the Z axis</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.PitchPos">
            <summary></summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.PitchNeg">
            <summary></summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.YawPos">
            <summary></summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.YawNeg">
            <summary></summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.FastAt">
            <summary></summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.FastLeft">
            <summary></summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.FastUp">
            <summary></summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.Fly">
            <summary>Causes simulator to make agent fly</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.Stop">
            <summary>Stop movement</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.FinishAnim">
            <summary>Finish animation</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.StandUp">
            <summary>Stand up from a sit</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.SitOnGround">
            <summary>Tells simulator to sit agent on ground</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.Mouselook">
            <summary>Place agent into mouselook mode</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.NudgeAtPos">
            <summary>Nudge agent positive along the X axis</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.NudgeAtNeg">
            <summary>Nudge agent negative along the X axis</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.NudgeLeftPos">
            <summary>Nudge agent positive along the Y axis</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.NudgeLeftNeg">
            <summary>Nudge agent negative along the Y axis</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.NudgeUpPos">
            <summary>Nudge agent positive along the Z axis</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.NudgeUpNeg">
            <summary>Nudge agent negative along the Z axis</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.TurnLeft">
            <summary></summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.TurnRight">
            <summary></summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.Away">
            <summary>Tell simulator to mark agent as away</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.LButtonDown">
            <summary></summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.LButtonUp">
            <summary></summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.MLButtonDown">
            <summary></summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.MLButtonUp">
            <summary></summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.AlwaysRun">
            <summary>
            Returns "always run" value, or changes it by sending a SetAlwaysRunPacket
            </summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.AgentControls">
            <summary>The current value of the agent control flags</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.UpdateInterval">
            <summary>Gets or sets the interval in milliseconds at which
            AgentUpdate packets are sent to the current simulator. Setting
            this to a non-zero value will also enable the packet sending if
            it was previously off, and setting it to zero will disable</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.UpdateEnabled">
            <summary>Gets or sets whether AgentUpdate packets are sent to
            the current simulator</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.AutoResetControls">
            <summary>Reset movement controls every time we send an update</summary>
        </member>
        <member name="T:OpenMetaverse.AgentManager.AgentMovement.AgentCamera">
            <summary>
            Camera controls for the agent, mostly a thin wrapper around
            CoordinateFrame. This class is only responsible for state
            tracking and math, it does not send any packets
            </summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.AgentMovement.AgentCamera.Far">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.AgentMovement.AgentCamera.Frame">
            <summary>The camera is a local frame of reference inside of
            the larger grid space. This is where the math happens</summary>
        </member>
        <member name="M:OpenMetaverse.AgentManager.AgentMovement.AgentCamera.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.AgentCamera.Position">
            <summary></summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.AgentCamera.AtAxis">
            <summary></summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.AgentCamera.LeftAxis">
            <summary></summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.AgentCamera.UpAxis">
            <summary></summary>
        </member>
        <member name="T:OpenMetaverse.AgentManager.ControlFlags">
            <summary>
            Used to specify movement actions for your agent
            </summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.ControlFlags.NONE">
            <summary>Empty flag</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.ControlFlags.AGENT_CONTROL_AT_POS">
            <summary>Move Forward (SL Keybinding: W/Up Arrow)</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.ControlFlags.AGENT_CONTROL_AT_NEG">
            <summary>Move Backward (SL Keybinding: S/Down Arrow)</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.ControlFlags.AGENT_CONTROL_LEFT_POS">
            <summary>Move Left (SL Keybinding: Shift-(A/Left Arrow))</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.ControlFlags.AGENT_CONTROL_LEFT_NEG">
            <summary>Move Right (SL Keybinding: Shift-(D/Right Arrow))</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.ControlFlags.AGENT_CONTROL_UP_POS">
            <summary>Not Flying: Jump/Flying: Move Up (SL Keybinding: E)</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.ControlFlags.AGENT_CONTROL_UP_NEG">
            <summary>Not Flying: Croutch/Flying: Move Down (SL Keybinding: C)</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.ControlFlags.AGENT_CONTROL_PITCH_POS">
            <summary>Unused</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.ControlFlags.AGENT_CONTROL_PITCH_NEG">
            <summary>Unused</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.ControlFlags.AGENT_CONTROL_YAW_POS">
            <summary>Unused</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.ControlFlags.AGENT_CONTROL_YAW_NEG">
            <summary>Unused</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.ControlFlags.AGENT_CONTROL_FAST_AT">
            <summary>ORed with AGENT_CONTROL_AT_* if the keyboard is being used</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.ControlFlags.AGENT_CONTROL_FAST_LEFT">
            <summary>ORed with AGENT_CONTROL_LEFT_* if the keyboard is being used</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.ControlFlags.AGENT_CONTROL_FAST_UP">
            <summary>ORed with AGENT_CONTROL_UP_* if the keyboard is being used</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.ControlFlags.AGENT_CONTROL_FLY">
            <summary>Fly</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.ControlFlags.AGENT_CONTROL_STOP">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.ControlFlags.AGENT_CONTROL_FINISH_ANIM">
            <summary>Finish our current animation</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.ControlFlags.AGENT_CONTROL_STAND_UP">
            <summary>Stand up from the ground or a prim seat</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.ControlFlags.AGENT_CONTROL_SIT_ON_GROUND">
            <summary>Sit on the ground at our current location</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.ControlFlags.AGENT_CONTROL_MOUSELOOK">
            <summary>Whether mouselook is currently enabled</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.ControlFlags.AGENT_CONTROL_NUDGE_AT_POS">
            <summary>Legacy, used if a key was pressed for less than a certain amount of time</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.ControlFlags.AGENT_CONTROL_NUDGE_AT_NEG">
            <summary>Legacy, used if a key was pressed for less than a certain amount of time</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.ControlFlags.AGENT_CONTROL_NUDGE_LEFT_POS">
            <summary>Legacy, used if a key was pressed for less than a certain amount of time</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.ControlFlags.AGENT_CONTROL_NUDGE_LEFT_NEG">
            <summary>Legacy, used if a key was pressed for less than a certain amount of time</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.ControlFlags.AGENT_CONTROL_NUDGE_UP_POS">
            <summary>Legacy, used if a key was pressed for less than a certain amount of time</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.ControlFlags.AGENT_CONTROL_NUDGE_UP_NEG">
            <summary>Legacy, used if a key was pressed for less than a certain amount of time</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.ControlFlags.AGENT_CONTROL_TURN_LEFT">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.ControlFlags.AGENT_CONTROL_TURN_RIGHT">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.ControlFlags.AGENT_CONTROL_AWAY">
            <summary>Set when the avatar is idled or set to away. Note that the away animation is 
            activated separately from setting this flag</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.ControlFlags.AGENT_CONTROL_LBUTTON_DOWN">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.ControlFlags.AGENT_CONTROL_LBUTTON_UP">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.ControlFlags.AGENT_CONTROL_ML_LBUTTON_DOWN">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.ControlFlags.AGENT_CONTROL_ML_LBUTTON_UP">
            <summary></summary>
        </member>
        <member name="T:OpenMetaverse.AgentThrottle">
            <summary>
            Throttles the network traffic for various different traffic types.
            Access this class through GridClient.Throttle
            </summary>
        </member>
        <member name="M:OpenMetaverse.AgentThrottle.#ctor(OpenMetaverse.GridClient)">
            <summary>
            Default constructor, uses a default high total of 1500 KBps (1536000)
            </summary>
        </member>
        <member name="M:OpenMetaverse.AgentThrottle.#ctor(System.Byte[],System.Int32)">
            <summary>
            Constructor that decodes an existing AgentThrottle packet in to
            individual values
            </summary>
            <param name="data">Reference to the throttle data in an AgentThrottle
            packet</param>
            <param name="pos">Offset position to start reading at in the 
            throttle data</param>
            <remarks>This is generally not needed in clients as the server will
            never send a throttle packet to the client</remarks>
        </member>
        <member name="M:OpenMetaverse.AgentThrottle.Set">
            <summary>
            Send an AgentThrottle packet to the current server using the 
            current values
            </summary>
        </member>
        <member name="M:OpenMetaverse.AgentThrottle.Set(OpenMetaverse.Simulator)">
            <summary>
            Send an AgentThrottle packet to the specified server using the 
            current values
            </summary>
        </member>
        <member name="M:OpenMetaverse.AgentThrottle.ToBytes">
            <summary>
            Convert the current throttle values to a byte array that can be put
            in an AgentThrottle packet
            </summary>
            <returns>Byte array containing all the throttle values</returns>
        </member>
        <member name="P:OpenMetaverse.AgentThrottle.Resend">
            <summary>Maximum bits per second for resending unacknowledged packets</summary>
        </member>
        <member name="P:OpenMetaverse.AgentThrottle.Land">
            <summary>Maximum bits per second for LayerData terrain</summary>
        </member>
        <member name="P:OpenMetaverse.AgentThrottle.Wind">
            <summary>Maximum bits per second for LayerData wind data</summary>
        </member>
        <member name="P:OpenMetaverse.AgentThrottle.Cloud">
            <summary>Maximum bits per second for LayerData clouds</summary>
        </member>
        <member name="P:OpenMetaverse.AgentThrottle.Task">
            <summary>Unknown, includes object data</summary>
        </member>
        <member name="P:OpenMetaverse.AgentThrottle.Texture">
            <summary>Maximum bits per second for textures</summary>
        </member>
        <member name="P:OpenMetaverse.AgentThrottle.Asset">
            <summary>Maximum bits per second for downloaded assets</summary>
        </member>
        <member name="P:OpenMetaverse.AgentThrottle.Total">
            <summary>Maximum bits per second the entire connection, divided up
            between invidiual streams using default multipliers</summary>
        </member>
        <member name="T:OpenMetaverse.Animations">
            <summary>
            Static pre-defined animations available to all agents
            </summary>
        </member>
        <member name="F:OpenMetaverse.Animations.AFRAID">
            <summary>Agent with afraid expression on face</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.AIM_BAZOOKA_R">
            <summary>Agent aiming a bazooka (right handed)</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.AIM_BOW_L">
            <summary>Agent aiming a bow (left handed)</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.AIM_HANDGUN_R">
            <summary>Agent aiming a hand gun (right handed)</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.AIM_RIFLE_R">
            <summary>Agent aiming a rifle (right handed)</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.ANGRY">
            <summary>Agent with angry expression on face</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.AWAY">
            <summary>Agent hunched over (away)</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.BACKFLIP">
            <summary>Agent doing a backflip</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.BELLY_LAUGH">
            <summary>Agent laughing while holding belly</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.BLOW_KISS">
            <summary>Agent blowing a kiss</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.BORED">
            <summary>Agent with bored expression on face</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.BOW">
            <summary>Agent bowing to audience</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.BRUSH">
            <summary>Agent brushing himself/herself off</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.BUSY">
            <summary>Agent in busy mode</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.CLAP">
            <summary>Agent clapping hands</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.COURTBOW">
            <summary>Agent doing a curtsey bow</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.CROUCH">
            <summary>Agent crouching</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.CROUCHWALK">
            <summary>Agent crouching while walking</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.CRY">
            <summary>Agent crying</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.CUSTOMIZE">
            <summary>Agent unanimated with arms out (e.g. setting appearance)</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.CUSTOMIZE_DONE">
            <summary>Agent re-animated after set appearance finished</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.DANCE1">
            <summary>Agent dancing</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.DANCE2">
            <summary>Agent dancing</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.DANCE3">
            <summary>Agent dancing</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.DANCE4">
            <summary>Agent dancing</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.DANCE5">
            <summary>Agent dancing</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.DANCE6">
            <summary>Agent dancing</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.DANCE7">
            <summary>Agent dancing</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.DANCE8">
            <summary>Agent dancing</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.DEAD">
            <summary>Agent on ground unanimated</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.DRINK">
            <summary>Agent boozing it up</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.EMBARRASSED">
            <summary>Agent with embarassed expression on face</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.EXPRESS_AFRAID">
            <summary>Agent with afraid expression on face</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.EXPRESS_ANGER">
            <summary>Agent with angry expression on face</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.EXPRESS_BORED">
            <summary>Agent with bored expression on face</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.EXPRESS_CRY">
            <summary>Agent crying</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.EXPRESS_DISDAIN">
            <summary>Agent showing disdain (dislike) for something</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.EXPRESS_EMBARRASSED">
            <summary>Agent with embarassed expression on face</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.EXPRESS_FROWN">
            <summary>Agent with frowning expression on face</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.EXPRESS_KISS">
            <summary>Agent with kissy face</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.EXPRESS_LAUGH">
            <summary>Agent expressing laughgter</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.EXPRESS_OPEN_MOUTH">
            <summary>Agent with open mouth</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.EXPRESS_REPULSED">
            <summary>Agent with repulsed expression on face</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.EXPRESS_SAD">
            <summary>Agent expressing sadness</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.EXPRESS_SHRUG">
            <summary>Agent shrugging shoulders</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.EXPRESS_SMILE">
            <summary>Agent with a smile</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.EXPRESS_SURPRISE">
            <summary>Agent expressing surprise</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.EXPRESS_TONGUE_OUT">
            <summary>Agent sticking tongue out</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.EXPRESS_TOOTHSMILE">
            <summary>Agent with big toothy smile</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.EXPRESS_WINK">
            <summary>Agent winking</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.EXPRESS_WORRY">
            <summary>Agent expressing worry</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.FALLDOWN">
            <summary>Agent falling down</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.FEMALE_WALK">
            <summary>Agent walking (feminine version)</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.FINGER_WAG">
            <summary>Agent wagging finger (disapproval)</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.FIST_PUMP">
            <summary>I'm not sure I want to know</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.FLY">
            <summary>Agent in superman position</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.FLYSLOW">
            <summary>Agent in superman position</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.HELLO">
            <summary>Agent greeting another</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.HOLD_BAZOOKA_R">
            <summary>Agent holding bazooka (right handed)</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.HOLD_BOW_L">
            <summary>Agent holding a bow (left handed)</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.HOLD_HANDGUN_R">
            <summary>Agent holding a handgun (right handed)</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.HOLD_RIFLE_R">
            <summary>Agent holding a rifle (right handed)</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.HOLD_THROW_R">
            <summary>Agent throwing an object (right handed)</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.HOVER">
            <summary>Agent in static hover</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.HOVER_DOWN">
            <summary>Agent hovering downward</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.HOVER_UP">
            <summary>Agent hovering upward</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.IMPATIENT">
            <summary>Agent being impatient</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.JUMP">
            <summary>Agent jumping</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.JUMP_FOR_JOY">
            <summary>Agent jumping with fervor</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.KISS_MY_BUTT">
            <summary>Agent point to lips then rear end</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.LAND">
            <summary>Agent landing from jump, finished flight, etc</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.LAUGH_SHORT">
            <summary>Agent laughing</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.MEDIUM_LAND">
            <summary>Agent landing from jump, finished flight, etc</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.MOTORCYCLE_SIT">
            <summary>Agent sitting on a motorcycle</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.MUSCLE_BEACH">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Animations.NO">
            <summary>Agent moving head side to side</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.NO_UNHAPPY">
            <summary>Agent moving head side to side with unhappy expression</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.NYAH_NYAH">
            <summary>Agent taunting another</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.ONETWO_PUNCH">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Animations.PEACE">
            <summary>Agent giving peace sign</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.POINT_ME">
            <summary>Agent pointing at self</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.POINT_YOU">
            <summary>Agent pointing at another</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.PRE_JUMP">
            <summary>Agent preparing for jump (bending knees)</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.PUNCH_LEFT">
            <summary>Agent punching with left hand</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.PUNCH_RIGHT">
            <summary>Agent punching with right hand</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.REPULSED">
            <summary>Agent acting repulsed</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.ROUNDHOUSE_KICK">
            <summary>Agent trying to be Chuck Norris</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.RPS_COUNTDOWN">
            <summary>Rocks, Paper, Scissors 1, 2, 3</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.RPS_PAPER">
            <summary>Agent with hand flat over other hand</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.RPS_ROCK">
            <summary>Agent with fist over other hand</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.RPS_SCISSORS">
            <summary>Agent with two fingers spread over other hand</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.RUN">
            <summary>Agent running</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.SAD">
            <summary>Agent appearing sad</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.SALUTE">
            <summary>Agent saluting</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.SHOOT_BOW_L">
            <summary>Agent shooting bow (left handed)</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.SHOUT">
            <summary>Agent cupping mouth as if shouting</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.SHRUG">
            <summary>Agent shrugging shoulders</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.SIT">
            <summary>Agent in sit position</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.SIT_FEMALE">
            <summary>Agent in sit position (feminine)</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.SIT_GENERIC">
            <summary>Agent in sit position (generic)</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.SIT_GROUND">
            <summary>Agent sitting on ground</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.SIT_GROUND_staticRAINED">
            <summary>Agent sitting on ground</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.SIT_TO_STAND">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Animations.SLEEP">
            <summary>Agent sleeping on side</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.SMOKE_IDLE">
            <summary>Agent smoking</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.SMOKE_INHALE">
            <summary>Agent inhaling smoke</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.SMOKE_THROW_DOWN">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Animations.SNAPSHOT">
            <summary>Agent taking a picture</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.STAND">
            <summary>Agent standing</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.STANDUP">
            <summary>Agent standing up</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.STAND_1">
            <summary>Agent standing</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.STAND_2">
            <summary>Agent standing</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.STAND_3">
            <summary>Agent standing</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.STAND_4">
            <summary>Agent standing</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.STRETCH">
            <summary>Agent stretching</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.STRIDE">
            <summary>Agent in stride (fast walk)</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.SURF">
            <summary>Agent surfing</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.SURPRISE">
            <summary>Agent acting surprised</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.SWORD_STRIKE">
            <summary>Agent striking with a sword</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.TALK">
            <summary>Agent talking (lips moving)</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.TANTRUM">
            <summary>Agent throwing a tantrum</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.THROW_R">
            <summary>Agent throwing an object (right handed)</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.TRYON_SHIRT">
            <summary>Agent trying on a shirt</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.TURNLEFT">
            <summary>Agent turning to the left</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.TURNRIGHT">
            <summary>Agent turning to the right</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.TYPE">
            <summary>Agent typing</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.WALK">
            <summary>Agent walking</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.WHISPER">
            <summary>Agent whispering</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.WHISTLE">
            <summary>Agent whispering with fingers in mouth</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.WINK">
            <summary>Agent winking</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.WINK_HOLLYWOOD">
            <summary>Agent winking</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.WORRY">
            <summary>Agent worried</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.YES">
            <summary>Agent nodding yes</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.YES_HAPPY">
            <summary>Agent nodding yes with happy face</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.YOGA_FLOAT">
            <summary>Agent floating with legs and arms crossed</summary>
        </member>
        <member name="T:OpenMetaverse.AppearanceManager">
            <summary>
            Manager class to for agents appearance, both body parts and clothing
            </summary>
        </member>
        <member name="F:OpenMetaverse.AppearanceManager.WEARABLE_COUNT">
            <summary>Total number of wearables for each avatar</summary>
        </member>
        <member name="F:OpenMetaverse.AppearanceManager.BAKED_TEXTURE_COUNT">
            <summary>Total number of baked textures on each avatar</summary>
        </member>
        <member name="F:OpenMetaverse.AppearanceManager.WEARABLES_PER_LAYER">
            <summary>Total number of wearables per bake layer</summary>
        </member>
        <member name="F:OpenMetaverse.AppearanceManager.AVATAR_TEXTURE_COUNT">
            <summary>Total number of textures on an avatar, baked or not</summary>
        </member>
        <member name="F:OpenMetaverse.AppearanceManager.WEARABLE_BAKE_MAP">
            <summary>Map of what wearables are included in each bake</summary>
        </member>
        <member name="F:OpenMetaverse.AppearanceManager.BAKED_TEXTURE_HASH">
            <summary>Secret values to finalize the cache check hashes for each
            bake</summary>
        </member>
        <member name="F:OpenMetaverse.AppearanceManager.DEFAULT_AVATAR_TEXTURE">
            <summary>Default avatar texture, used to detect when a custom
            texture is not set for a face</summary>
        </member>
        <member name="F:OpenMetaverse.AppearanceManager.Wearables">
            <summary>
            An <seealso cref="T:InternalDictionary"/> which keeps track of wearables data
            </summary>
        </member>
        <member name="M:OpenMetaverse.AppearanceManager.#ctor(OpenMetaverse.GridClient,OpenMetaverse.AssetManager)">
            <summary>
            Default constructor
            </summary>
            <param name="client">This agents <seealso cref="T:OpenMetaverse.GridClient"/> Object</param>
            <param name="assets">Reference to an AssetManager object</param>
        </member>
        <member name="M:OpenMetaverse.AppearanceManager.GetWearableAsset(OpenMetaverse.WearableType)">
            <summary>
            Returns the assetID for a given WearableType 
            </summary>
            <param name="type">the <seealso cref="T:OpenMetaverse.WearableType"/> of the asset</param>
            <returns>The <seealso cref="T:OpenMetaverse.UUID"/> of the WearableType</returns>
        </member>
        <member name="M:OpenMetaverse.AppearanceManager.SetPreviousAppearance">
            <summary>
            Ask the server what we are wearing and set appearance based on that
            </summary>
        </member>
        <member name="M:OpenMetaverse.AppearanceManager.WearOutfit(System.Collections.Generic.List{OpenMetaverse.InventoryBase})">
            <summary>
            Replace the current outfit with a list of wearables and set appearance
            </summary>
            <param name="ibs">List of wearables that define the new outfit</param>
        </member>
        <member name="M:OpenMetaverse.AppearanceManager.WearOutfit(System.Collections.Generic.List{OpenMetaverse.InventoryBase},System.Boolean)">
            <summary>
            Replace the current outfit with a list of wearables and set appearance
            </summary>
            <param name="ibs">List of wearables that define the new outfit</param>
            <param name="bake">Whether to bake textures for the avatar or not</param>
        </member>
        <member name="M:OpenMetaverse.AppearanceManager.AddToOutfit(System.Collections.Generic.List{OpenMetaverse.InventoryBase},System.Boolean)">
            <summary>
            Add to the current outfit with the list supplied
            </summary>
            <param name="ibs_new">List of wearables that will be added to the outfit</param>
            <param name="bake">Whether to bake textures for the avatar or not</param>
        </member>
        <member name="M:OpenMetaverse.AppearanceManager.WearOutfit(OpenMetaverse.UUID)">
            <summary>
            Replace the current outfit with a folder and set appearance
            </summary>
            <param name="folder">UUID of the inventory folder to wear</param>
        </member>
        <member name="M:OpenMetaverse.AppearanceManager.WearOutfit(System.String[])">
            <summary>
            Replace the current outfit with a folder and set appearance
            </summary>
            <param name="path">Inventory path of the folder to wear</param>
        </member>
        <member name="M:OpenMetaverse.AppearanceManager.WearOutfit(OpenMetaverse.UUID,System.Boolean)">
            <summary>
            Replace the current outfit with a folder and set appearance
            </summary>
            <param name="folder">Folder containing the new outfit</param>
            <param name="bake">Whether to bake the avatar textures or not</param>
        </member>
        <member name="M:OpenMetaverse.AppearanceManager.WearOutfit(System.String[],System.Boolean)">
            <summary>
            Replace the current outfit with a folder and set appearance
            </summary>
            <param name="path">Path of folder containing the new outfit</param>
            <param name="bake">Whether to bake the avatar textures or not</param>
        </member>
        <member name="M:OpenMetaverse.AppearanceManager.AddAttachments(System.Collections.Generic.List{OpenMetaverse.InventoryBase},System.Boolean)">
            <summary>
            Adds a list of attachments to avatar
            </summary>
            <param name="attachments">A List containing the attachments to add</param>
            <param name="removeExistingFirst">If true, tells simulator to remove existing attachment
            first</param>
        </member>
        <member name="M:OpenMetaverse.AppearanceManager.Attach(OpenMetaverse.InventoryItem,OpenMetaverse.AttachmentPoint)">
            <summary>
            Attach an item to an avatar at a specific attach point
            </summary>
            <param name="item">A <seealso cref="T:OpenMetaverse.InventoryItem"/> to attach</param>
            <param name="attachPoint">the <seealso cref="T:OpenMetaverse.AttachmentPoint"/> on the avatar 
            to attach the item to</param>
        </member>
        <member name="M:OpenMetaverse.AppearanceManager.Attach(OpenMetaverse.UUID,OpenMetaverse.UUID,System.String,System.String,OpenMetaverse.Permissions,System.UInt32,OpenMetaverse.AttachmentPoint)">
            <summary>
            Attach an item to an avatar specifying attachment details
            </summary>
            <param name="itemID">The <seealso cref="T:OpenMetaverse.UUID"/> of the item to attach</param>
            <param name="ownerID">The <seealso cref="T:OpenMetaverse.UUID"/> attachments owner</param>
            <param name="name">The name of the attachment</param>
            <param name="description">The description of the attahment</param>
            <param name="perms">The <seealso cref="T:OpenMetaverse.Permissions"/> to apply when attached</param>
            <param name="itemFlags">The <seealso cref="T:OpenMetaverse.InventoryItemFlags"/> of the attachment</param>
            <param name="attachPoint">the <seealso cref="T:OpenMetaverse.AttachmentPoint"/> on the avatar 
            to attach the item to</param>
        </member>
        <member name="M:OpenMetaverse.AppearanceManager.Detach(OpenMetaverse.InventoryItem)">
            <summary>
            Detach an item from avatar using an <seealso cref="T:OpenMetaverse.InventoryItem"/> object
            </summary>
            <param name="item">An <seealso cref="T:OpenMetaverse.InventoryItem"/> object</param>
        </member>
        <member name="M:OpenMetaverse.AppearanceManager.Detach(OpenMetaverse.UUID)">
            <summary>
            Detach an Item from avatar by items <seealso cref="T:OpenMetaverse.UUID"/>
            </summary>
            <param name="itemID">The items ID to detach</param>
        </member>
        <member name="M:OpenMetaverse.AppearanceManager.RequestCachedBakes">
            <summary>
            Build hashes out of the texture assetIDs for each baking layer to
            ask the simulator whether it has cached copies of each baked texture
            </summary>
        </member>
        <member name="M:OpenMetaverse.AppearanceManager.ForceRebakeAvatarTextures">
            <summary>
            Force a rebake of the currently worn textures
            </summary>
        </member>
        <member name="M:OpenMetaverse.AppearanceManager.SendAgentWearablesRequest">
            <summary>
            Ask the server what textures our avatar is currently wearing
            </summary>
        </member>
        <member name="M:OpenMetaverse.AppearanceManager.Network_OnDisconnected(OpenMetaverse.NetworkManager.DisconnectType,System.String)">
            <summary>
            Terminate any wait handles when the network layer disconnects
            </summary>
        </member>
        <member name="E:OpenMetaverse.AppearanceManager.OnAgentWearables">
            <summary></summary>
        </member>
        <member name="E:OpenMetaverse.AppearanceManager.OnAppearanceUpdated">
            <summary></summary>
        </member>
        <member name="T:OpenMetaverse.AppearanceManager.TextureIndex">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenMetaverse.AppearanceManager.BakeType">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenMetaverse.AppearanceManager.AgentWearablesCallback">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenMetaverse.AppearanceManager.AppearanceUpdatedCallback">
            <summary>
            
            </summary>
            <param name="te"></param>
        </member>
        <member name="T:OpenMetaverse.AssetType">
            <summary>
            The different types of grid assets
            </summary>
        </member>
        <member name="F:OpenMetaverse.AssetType.Unknown">
            <summary>Unknown asset type</summary>
        </member>
        <member name="F:OpenMetaverse.AssetType.Texture">
            <summary>Texture asset, stores in JPEG2000 J2C stream format</summary>
        </member>
        <member name="F:OpenMetaverse.AssetType.Sound">
            <summary>Sound asset</summary>
        </member>
        <member name="F:OpenMetaverse.AssetType.CallingCard">
            <summary>Calling card for another avatar</summary>
        </member>
        <member name="F:OpenMetaverse.AssetType.Landmark">
            <summary>Link to a location in world</summary>
        </member>
        <member name="F:OpenMetaverse.AssetType.Clothing">
            <summary>Collection of textures and parameters that can be 
            worn by an avatar</summary>
        </member>
        <member name="F:OpenMetaverse.AssetType.Object">
            <summary>Primitive that can contain textures, sounds, 
            scripts and more</summary>
        </member>
        <member name="F:OpenMetaverse.AssetType.Notecard">
            <summary>Notecard asset</summary>
        </member>
        <member name="F:OpenMetaverse.AssetType.Folder">
            <summary>Holds a collection of inventory items</summary>
        </member>
        <member name="F:OpenMetaverse.AssetType.RootFolder">
            <summary>Root inventory folder</summary>
        </member>
        <member name="F:OpenMetaverse.AssetType.LSLText">
            <summary>Linden scripting language script</summary>
        </member>
        <member name="F:OpenMetaverse.AssetType.LSLBytecode">
            <summary>LSO bytecode for a script</summary>
        </member>
        <member name="F:OpenMetaverse.AssetType.TextureTGA">
            <summary>Uncompressed TGA texture</summary>
        </member>
        <member name="F:OpenMetaverse.AssetType.Bodypart">
            <summary>Collection of textures and shape parameters that can
            be worn</summary>
        </member>
        <member name="F:OpenMetaverse.AssetType.TrashFolder">
            <summary>Trash folder</summary>
        </member>
        <member name="F:OpenMetaverse.AssetType.SnapshotFolder">
            <summary>Snapshot folder</summary>
        </member>
        <member name="F:OpenMetaverse.AssetType.LostAndFoundFolder">
            <summary>Lost and found folder</summary>
        </member>
        <member name="F:OpenMetaverse.AssetType.SoundWAV">
            <summary>Uncompressed sound</summary>
        </member>
        <member name="F:OpenMetaverse.AssetType.ImageTGA">
            <summary>Uncompressed TGA non-square image, not to be used as a
            texture</summary>
        </member>
        <member name="F:OpenMetaverse.AssetType.ImageJPEG">
            <summary>Compressed JPEG non-square image, not to be used as a
            texture</summary>
        </member>
        <member name="F:OpenMetaverse.AssetType.Animation">
            <summary>Animation</summary>
        </member>
        <member name="F:OpenMetaverse.AssetType.Gesture">
            <summary>Sequence of animations, sounds, chat, and pauses</summary>
        </member>
        <member name="F:OpenMetaverse.AssetType.Simstate">
            <summary>Simstate file</summary>
        </member>
        <member name="T:OpenMetaverse.StatusCode">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenMetaverse.StatusCode.OK">
            <summary>OK</summary>
        </member>
        <member name="F:OpenMetaverse.StatusCode.Done">
            <summary>Transfer completed</summary>
        </member>
        <member name="F:OpenMetaverse.StatusCode.Skip">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.StatusCode.Abort">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.StatusCode.Error">
            <summary>Unknown error occurred</summary>
        </member>
        <member name="F:OpenMetaverse.StatusCode.UnknownSource">
            <summary>Equivalent to a 404 error</summary>
        </member>
        <member name="F:OpenMetaverse.StatusCode.InsufficientPermissiosn">
            <summary>Client does not have permission for that resource</summary>
        </member>
        <member name="F:OpenMetaverse.StatusCode.Unknown">
            <summary>Unknown status</summary>
        </member>
        <member name="T:OpenMetaverse.ChannelType">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenMetaverse.ChannelType.Unknown">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.ChannelType.Misc">
            <summary>Unknown</summary>
        </member>
        <member name="F:OpenMetaverse.ChannelType.Asset">
            <summary>Virtually all asset transfers use this channel</summary>
        </member>
        <member name="T:OpenMetaverse.SourceType">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenMetaverse.SourceType.Unknown">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.SourceType.Asset">
            <summary>Asset from the asset server</summary>
        </member>
        <member name="F:OpenMetaverse.SourceType.SimInventoryItem">
            <summary>Inventory item</summary>
        </member>
        <member name="F:OpenMetaverse.SourceType.SimEstate">
            <summary>Estate asset, such as an estate covenant</summary>
        </member>
        <member name="T:OpenMetaverse.TargetType">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenMetaverse.TargetType.Unknown">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.TargetType.File">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.TargetType.VFile">
            <summary></summary>
        </member>
        <member name="T:OpenMetaverse.ImageType">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenMetaverse.ImageType.Normal">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.ImageType.Baked">
            <summary></summary>
        </member>
        <member name="T:OpenMetaverse.ImageCodec">
            <summary>
            Image file format
            </summary>
        </member>
        <member name="T:OpenMetaverse.Transfer">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenMetaverse.Transfer.TimeSinceLastPacket">
            <summary>Number of milliseconds passed since the last transfer
            packet was received</summary>
        </member>
        <member name="T:OpenMetaverse.AssetDownload">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenMetaverse.XferDownload">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenMetaverse.ImageDownload">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenMetaverse.AssetUpload">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenMetaverse.AssetManager">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenMetaverse.AssetManager.Cache">
            <summary>Texture download cache</summary>
        </member>
        <member name="M:OpenMetaverse.AssetManager.#ctor(OpenMetaverse.GridClient)">
            <summary>
            Default constructor
            </summary>
            <param name="client">A reference to the GridClient object</param>
        </member>
        <member name="M:OpenMetaverse.AssetManager.RequestAsset(OpenMetaverse.UUID,OpenMetaverse.AssetType,System.Boolean)">
            <summary>
            Request an asset download
            </summary>
            <param name="assetID">Asset UUID</param>
            <param name="type">Asset type, must be correct for the transfer to succeed</param>
            <param name="priority">Whether to give this transfer an elevated priority</param>
            <returns>The transaction ID generated for this transfer</returns>
        </member>
        <member name="M:OpenMetaverse.AssetManager.RequestAssetXfer(System.String,System.Boolean,System.Boolean,OpenMetaverse.UUID,OpenMetaverse.AssetType,System.Boolean)">
            <summary>
            Request an asset download through the almost deprecated Xfer system
            </summary>
            <param name="filename">Filename of the asset to request</param>
            <param name="deleteOnCompletion">Whether or not to delete the asset
            off the server after it is retrieved</param>
            <param name="useBigPackets">Use large transfer packets or not</param>
            <param name="vFileID">UUID of the file to request, if filename is
            left empty</param>
            <param name="vFileType">Asset type of <code>vFileID</code>, or
            <code>AssetType.Unknown</code> if filename is not empty</param>
            <param name="fromCache">Sets the FilePath in the request to Cache
            (4) if true, otherwise Unknown (0) is used</param>
            <returns></returns>
        </member>
        <member name="M:OpenMetaverse.AssetManager.RequestInventoryAsset(OpenMetaverse.UUID,OpenMetaverse.UUID,OpenMetaverse.UUID,OpenMetaverse.UUID,OpenMetaverse.AssetType,System.Boolean)">
            <summary>
            
            </summary>
            <param name="assetID">Use UUID.Zero if you do not have the 
            asset ID but have all the necessary permissions</param>
            <param name="itemID">The item ID of this asset in the inventory</param>
            <param name="taskID">Use UUID.Zero if you are not requesting an 
            asset from an object inventory</param>
            <param name="ownerID">The owner of this asset</param>
            <param name="type">Asset type</param>
            <param name="priority">Whether to prioritize this asset download or not</param>
        </member>
        <member name="M:OpenMetaverse.AssetManager.RequestImage(OpenMetaverse.UUID,OpenMetaverse.ImageType)">
            <summary>
            Initiate an image download. This is an asynchronous function
            </summary>
            <param name="imageID">The image to download</param>
            <param name="type">Type of the image to download, either a baked
            avatar texture or a normal texture</param>
        </member>
        <member name="M:OpenMetaverse.AssetManager.RequestImage(OpenMetaverse.UUID,OpenMetaverse.ImageType,System.Single,System.Int32,System.UInt32)">
            <summary>
            Initiate an image download. This is an asynchronous function
            </summary>
            <param name="imageID">The image to download</param>
            <param name="type">Type of the image to download, either a baked
            avatar texture or a normal texture</param>
            <param name="priority">Priority level of the download. Default is
            <c>1,013,000.0f</c></param>
            <param name="discardLevel">Number of quality layers to discard.
            This controls the end marker of the data sent</param>
            <param name="packetNum">Packet number to start the download at.
            This controls the start marker of the data sent</param>
            <remarks>Sending a priority of 0 and a discardlevel of -1 aborts
            download</remarks>
        </member>
        <member name="M:OpenMetaverse.AssetManager.RequestImages(System.Collections.Generic.List{OpenMetaverse.ImageRequest})">
            <summary>
            Requests multiple Images
            </summary>
            <param name="Images">List of requested images</param>
        </member>
        <member name="M:OpenMetaverse.AssetManager.SetPendingAssetUploadData(OpenMetaverse.AssetUpload)">
            <summary>
            Used to force asset data into the PendingUpload property, ie: for raw terrain uploads
            </summary>
            <param name="assetData">An AssetUpload object containing the data to upload to the simulator</param>
        </member>
        <member name="M:OpenMetaverse.AssetManager.RequestUpload(OpenMetaverse.Asset,System.Boolean)">
            <summary>
            Request an asset be uploaded to the simulator
            </summary>
            <param name="asset">The <seealso cref="T:OpenMetaverse.Asset"/> Object containing the asset data</param>
            <param name="storeLocal">If True, the asset once uploaded will be stored on the simulator
            in which the client was connected in addition to being stored on the asset server</param>
            <returns>The <seealso cref="T:OpenMetaverse.UUID"/> of the transfer, can be used to correlate the upload with
            events being fired</returns>
        </member>
        <member name="M:OpenMetaverse.AssetManager.RequestUpload(OpenMetaverse.AssetType,System.Byte[],System.Boolean)">
            <summary>
            Request an asset be uploaded to the simulator
            </summary>
            <param name="type">The <seealso cref="T:OpenMetaverse.AssetType"/> of the asset being uploaded</param>
            <param name="data">A byte array containing the encoded asset data</param>
            <param name="storeLocal">If True, the asset once uploaded will be stored on the simulator
            in which the client was connected in addition to being stored on the asset server</param>
            <returns>The <seealso cref="T:OpenMetaverse.UUID"/> of the transfer, can be used to correlate the upload with
            events being fired</returns>
        </member>
        <member name="M:OpenMetaverse.AssetManager.RequestUpload(OpenMetaverse.UUID@,OpenMetaverse.AssetType,System.Byte[],System.Boolean)">
            <summary>
            Request an asset be uploaded to the simulator
            </summary>
            <param name="assetID"></param>
            <param name="type">Asset type to upload this data as</param>
            <param name="data">A byte array containing the encoded asset data</param>
            <param name="storeLocal">If True, the asset once uploaded will be stored on the simulator
            in which the client was connected in addition to being stored on the asset server</param>
            <returns>The <seealso cref="T:OpenMetaverse.UUID"/> of the transfer, can be used to correlate the upload with
            events being fired</returns>
        </member>
        <member name="M:OpenMetaverse.AssetManager.RequestUpload(OpenMetaverse.UUID@,OpenMetaverse.AssetType,System.Byte[],System.Boolean,OpenMetaverse.UUID)">
            <summary>
            Initiate an asset upload
            </summary>
            <param name="assetID">The ID this asset will have if the
            upload succeeds</param>
            <param name="type">Asset type to upload this data as</param>
            <param name="data">Raw asset data to upload</param>
            <param name="storeLocal">Whether to store this asset on the local
            simulator or the grid-wide asset server</param>
            <param name="transactionID">The tranaction id for the upload <see cref="!:RequestCreateItem"/></param>
            <returns>The transaction ID of this transfer</returns>
        </member>
        <member name="M:OpenMetaverse.AssetManager.InitiateDownloadPacketHandler(OpenMetaverse.Packets.Packet,OpenMetaverse.Simulator)">
            <summary>
            Packet Handler for InitiateDownloadPacket, sent in response to EstateOwnerMessage 
            requesting download of simulators RAW terrain file.
            </summary>
            <param name="packet">The InitiateDownloadPacket packet</param>
            <param name="simulator">The simulator originating the packet</param>
            <remarks>Only the Estate Owner will receive this when he/she makes the request</remarks>
        </member>
        <member name="M:OpenMetaverse.AssetManager.ImageDataHandler(OpenMetaverse.Packets.Packet,OpenMetaverse.Simulator)">
            <summary>
            Handles the Image Data packet which includes the ID and Size of the image,
            along with the first block of data for the image. If the image is small enough
            there will be no additional packets
            </summary>
        </member>
        <member name="M:OpenMetaverse.AssetManager.ImagePacketHandler(OpenMetaverse.Packets.Packet,OpenMetaverse.Simulator)">
            <summary>
            Handles the remaining Image data that did not fit in the initial ImageData packet
            </summary>
        </member>
        <member name="M:OpenMetaverse.AssetManager.ImageNotInDatabaseHandler(OpenMetaverse.Packets.Packet,OpenMetaverse.Simulator)">
            <summary>
            The requested image does not exist on the asset server
            </summary>
        </member>
        <member name="E:OpenMetaverse.AssetManager.OnAssetReceived">
            <summary></summary>
        </member>
        <member name="E:OpenMetaverse.AssetManager.OnXferReceived">
            <summary></summary>
        </member>
        <member name="E:OpenMetaverse.AssetManager.OnImageReceived">
            <summary></summary>
        </member>
        <member name="E:OpenMetaverse.AssetManager.OnImageReceiveProgress">
            <summary></summary>
        </member>
        <member name="E:OpenMetaverse.AssetManager.OnAssetUploaded">
            <summary></summary>
        </member>
        <member name="E:OpenMetaverse.AssetManager.OnUploadProgress">
            <summary></summary>
        </member>
        <member name="E:OpenMetaverse.AssetManager.OnInitiateDownload">
            <summary>Fired when the simulator sends an InitiateDownloadPacket, used to download terrain .raw files</summary>
        </member>
        <member name="T:OpenMetaverse.AssetManager.AssetReceivedCallback">
            <summary>
            
            </summary>
            <param name="transfer"></param>
            <param name="asset"></param>
        </member>
        <member name="T:OpenMetaverse.AssetManager.XferReceivedCallback">
            <summary>
            
            </summary>
            <param name="xfer"></param>
        </member>
        <member name="T:OpenMetaverse.AssetManager.ImageReceivedCallback">
            <summary>
            
            </summary>
            <param name="image"></param>
            <param name="asset"></param>
        </member>
        <member name="T:OpenMetaverse.AssetManager.ImageReceiveProgressCallback">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenMetaverse.AssetManager.AssetUploadedCallback">
            <summary>
            
            </summary>
            <param name="upload"></param>
        </member>
        <member name="T:OpenMetaverse.AssetManager.UploadProgressCallback">
            <summary>
            
            </summary>
            <param name="upload"></param>
        </member>
        <member name="T:OpenMetaverse.AssetManager.InitiateDownloadCallback">
            <summary>
            Callback fired when an InitiateDownload packet is received
            </summary>
            <param name="simFilename">The filename on the simulator</param>
            <param name="viewerFilename">The name of the file the viewer requested</param>
        </member>
        <member name="T:OpenMetaverse.WearableType">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenMetaverse.WearableType.Shape">
            <summary>A shape</summary>
        </member>
        <member name="F:OpenMetaverse.WearableType.Skin">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.WearableType.Hair">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.WearableType.Eyes">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.WearableType.Shirt">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.WearableType.Pants">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.WearableType.Shoes">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.WearableType.Socks">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.WearableType.Jacket">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.WearableType.Gloves">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.WearableType.Undershirt">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.WearableType.Underpants">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.WearableType.Skirt">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.WearableType.Invalid">
            <summary></summary>
        </member>
        <member name="T:OpenMetaverse.Asset">
            <summary>
            Base class for all Asset types
            </summary>
        </member>
        <member name="F:OpenMetaverse.Asset.AssetData">
            <summary>A byte array containing the raw asset data</summary>
        </member>
        <member name="F:OpenMetaverse.Asset.Temporary">
            <summary>True if the asset it only stored on the server temporarily</summary>
        </member>
        <member name="F:OpenMetaverse.Asset._AssetID">
            <summary>A unique ID</summary>
        </member>
        <member name="M:OpenMetaverse.Asset.#ctor">
            <summary>
            Construct a new Asset object
            </summary>
        </member>
        <member name="M:OpenMetaverse.Asset.#ctor(OpenMetaverse.UUID,System.Byte[])">
            <summary>
            Construct a new Asset object
            </summary>
            <param name="assetID">A unique <see cref="T:OpenMetaverse.UUID"/> specific to this asset</param>
            <param name="assetData">A byte array containing the raw asset data</param>
        </member>
        <member name="M:OpenMetaverse.Asset.Encode">
            <summary>
            Regenerates the <code>AssetData</code> byte array from the properties 
            of the derived class.
            </summary>
        </member>
        <member name="M:OpenMetaverse.Asset.Decode">
            <summary>
            Decodes the AssetData, placing it in appropriate properties of the derived
            class.
            </summary>
            <returns>True if the asset decoding succeeded, otherwise false</returns>
        </member>
        <member name="P:OpenMetaverse.Asset.AssetID">
            <summary>The assets unique ID</summary>
        </member>
        <member name="P:OpenMetaverse.Asset.AssetType">
            <summary>
            The "type" of asset, Notecard, Animation, etc
            </summary>
        </member>
        <member name="T:OpenMetaverse.AssetAnimation">
            <summary>
            Represents an Animation
            </summary>
        </member>
        <member name="M:OpenMetaverse.AssetAnimation.#ctor">
            <summary>Default Constructor</summary>
        </member>
        <member name="M:OpenMetaverse.AssetAnimation.#ctor(OpenMetaverse.UUID,System.Byte[])">
            <summary>
            Construct an Asset object of type Animation
            </summary>
            <param name="assetID">A unique <see cref="T:OpenMetaverse.UUID"/> specific to this asset</param>
            <param name="assetData">A byte array containing the raw asset data</param>
        </member>
        <member name="P:OpenMetaverse.AssetAnimation.AssetType">
            <summary>Override the base classes AssetType</summary>
        </member>
        <member name="T:OpenMetaverse.AssetNotecard">
            <summary>
            Represents a string of characters encoded with specific formatting properties
            </summary>
        </member>
        <member name="F:OpenMetaverse.AssetNotecard.Text">
            <summary>A text string containing the raw contents of the notecard</summary>
        </member>
        <member name="M:OpenMetaverse.AssetNotecard.#ctor">
            <summary>Construct an Asset of type Notecard</summary>
        </member>
        <member name="M:OpenMetaverse.AssetNotecard.#ctor(OpenMetaverse.UUID,System.Byte[])">
            <summary>
            Construct an Asset object of type Notecard
            </summary>
            <param name="assetID">A unique <see cref="T:OpenMetaverse.UUID"/> specific to this asset</param>
            <param name="assetData">A byte array containing the raw asset data</param>
        </member>
        <member name="M:OpenMetaverse.AssetNotecard.#ctor(System.String)">
            <summary>
            Construct an Asset object of type Notecard
            </summary>
            <param name="text">A text string containing the raw contents of the notecard</param>
        </member>
        <member name="M:OpenMetaverse.AssetNotecard.Encode">
            <summary>
            Encode the raw contents of a string with the specific Linden Text properties
            </summary>
        </member>
        <member name="M:OpenMetaverse.AssetNotecard.Decode">
            <summary>
            Decode the raw asset data including the Linden Text properties
            </summary>
            <returns>true if the AssetData was successfully decoded to a string</returns>
        </member>
        <member name="P:OpenMetaverse.AssetNotecard.AssetType">
            <summary>Override the base classes AssetType</summary>
        </member>
        <member name="T:OpenMetaverse.AssetScriptText">
            <summary>
            Represents an LSL Text object containing a string of UTF encoded characters
            </summary>
        </member>
        <member name="F:OpenMetaverse.AssetScriptText.Source">
            <summary>A string of characters represting the script contents</summary>
        </member>
        <member name="M:OpenMetaverse.AssetScriptText.#ctor">
            <summary>Initializes a new AssetScriptText object</summary>
        </member>
        <member name="M:OpenMetaverse.AssetScriptText.#ctor(OpenMetaverse.UUID,System.Byte[])">
            <summary>
            Initializes a new AssetScriptText object with parameters
            </summary>
            <param name="assetID">A unique <see cref="T:OpenMetaverse.UUID"/> specific to this asset</param>
            <param name="assetData">A byte array containing the raw asset data</param>
        </member>
        <member name="M:OpenMetaverse.AssetScriptText.#ctor(System.String)">
            <summary>
            Initializes a new AssetScriptText object with parameters
            </summary>
            <param name="source">A string containing the scripts contents</param>
        </member>
        <member name="M:OpenMetaverse.AssetScriptText.Encode">
            <summary>
            Encode a string containing the scripts contents into byte encoded AssetData
            </summary>
        </member>
        <member name="M:OpenMetaverse.AssetScriptText.Decode">
            <summary>
            Decode a byte array containing the scripts contents into a string
            </summary>
            <returns>true if decoding is successful</returns>
        </member>
        <member name="P:OpenMetaverse.AssetScriptText.AssetType">
            <summary>Override the base classes AssetType</summary>
        </member>
        <member name="T:OpenMetaverse.AssetScriptBinary">
            <summary>
            Represents an AssetScriptBinary object containing the 
            LSO compiled bytecode of an LSL script
            </summary>
        </member>
        <member name="M:OpenMetaverse.AssetScriptBinary.#ctor">
            <summary>Initializes a new instance of an AssetScriptBinary object</summary>
        </member>
        <member name="M:OpenMetaverse.AssetScriptBinary.#ctor(OpenMetaverse.UUID,System.Byte[])">
            <summary>Initializes a new instance of an AssetScriptBinary object with parameters</summary>
            <param name="assetID">A unique <see cref="T:OpenMetaverse.UUID"/> specific to this asset</param>
            <param name="assetData">A byte array containing the raw asset data</param>
        </member>
        <member name="M:OpenMetaverse.AssetScriptBinary.Encode">
            <summary>
            TODO: Encodes a scripts contents into a LSO Bytecode file
            </summary>
        </member>
        <member name="M:OpenMetaverse.AssetScriptBinary.Decode">
            <summary>
            TODO: Decode LSO Bytecode into a string
            </summary>
            <returns>true</returns>
        </member>
        <member name="P:OpenMetaverse.AssetScriptBinary.AssetType">
            <summary>Override the base classes AssetType</summary>
        </member>
        <member name="T:OpenMetaverse.AssetSound">
            <summary>
            Represents a Sound Asset
            </summary>
        </member>
        <member name="M:OpenMetaverse.AssetSound.#ctor">
            <summary>Initializes a new instance of an AssetSound object</summary>
        </member>
        <member name="M:OpenMetaverse.AssetSound.#ctor(OpenMetaverse.UUID,System.Byte[])">
            <summary>Initializes a new instance of an AssetSound object with parameters</summary>
            <param name="assetID">A unique <see cref="T:OpenMetaverse.UUID"/> specific to this asset</param>
            <param name="assetData">A byte array containing the raw asset data</param>
        </member>
        <member name="M:OpenMetaverse.AssetSound.Encode">
            <summary>
            TODO: Encodes a sound file
            </summary>
        </member>
        <member name="M:OpenMetaverse.AssetSound.Decode">
            <summary>
            TODO: Decode a sound file
            </summary>
            <returns>true</returns>
        </member>
        <member name="P:OpenMetaverse.AssetSound.AssetType">
            <summary>Override the base classes AssetType</summary>
        </member>
        <member name="T:OpenMetaverse.AssetTexture">
            <summary>
            Represents a texture
            </summary>
        </member>
        <member name="F:OpenMetaverse.AssetTexture.Image">
            <summary>A <seealso cref="T:OpenMetaverse.Imaging.ManagedImage"/> object containing image data</summary>
        </member>
        <member name="F:OpenMetaverse.AssetTexture.LayerInfo">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.AssetTexture.Components">
            <summary></summary>
        </member>
        <member name="M:OpenMetaverse.AssetTexture.#ctor">
            <summary>Initializes a new instance of an AssetTexture object</summary>
        </member>
        <member name="M:OpenMetaverse.AssetTexture.#ctor(OpenMetaverse.UUID,System.Byte[])">
            <summary>
            Initializes a new instance of an AssetTexture object
            </summary>
            <param name="assetID">A unique <see cref="T:OpenMetaverse.UUID"/> specific to this asset</param>
            <param name="assetData">A byte array containing the raw asset data</param>
        </member>
        <member name="M:OpenMetaverse.AssetTexture.#ctor(OpenMetaverse.Imaging.ManagedImage)">
            <summary>
            Initializes a new instance of an AssetTexture object
            </summary>
            <param name="image">A <seealso cref="T:OpenMetaverse.Imaging.ManagedImage"/> object containing texture data</param>
        </member>
        <member name="M:OpenMetaverse.AssetTexture.Encode">
            <summary>
            Populates the <seealso cref="!:AssetData"/> byte array with a JPEG2000
            encoded image created from the data in <seealso cref="F:OpenMetaverse.AssetTexture.Image"/>
            </summary>
        </member>
        <member name="M:OpenMetaverse.AssetTexture.Decode">
            <summary>
            Decodes the JPEG2000 data in <code>AssetData</code> to the
            <seealso cref="T:OpenMetaverse.Imaging.ManagedImage"/> object <seealso cref="F:OpenMetaverse.AssetTexture.Image"/>
            </summary>
            <returns>True if the decoding was successful, otherwise false</returns>
        </member>
        <member name="M:OpenMetaverse.AssetTexture.DecodeLayerBoundaries">
            <summary>
            Decodes the begin and end byte positions for each quality layer in
            the image
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenMetaverse.AssetTexture.AssetType">
            <summary>Override the base classes AssetType</summary>
        </member>
        <member name="T:OpenMetaverse.AssetPrim">
            <summary>
            Represents a primitive asset
            </summary>
        </member>
        <member name="M:OpenMetaverse.AssetPrim.#ctor">
            <summary>Initializes a new instance of an AssetPrim object</summary>
        </member>
        <member name="M:OpenMetaverse.AssetPrim.Encode">
            <summary>
            TODO: 
            </summary>
        </member>
        <member name="M:OpenMetaverse.AssetPrim.Decode">
            <summary>
            TODO: 
            </summary>
            <returns>true</returns>
        </member>
        <member name="P:OpenMetaverse.AssetPrim.AssetType">
            <summary>Override the base classes AssetType</summary>
        </member>
        <member name="T:OpenMetaverse.AssetWearable">
            <summary>
            Represents a Wearable Asset, Clothing, Hair, Skin, Etc
            </summary>
        </member>
        <member name="F:OpenMetaverse.AssetWearable.Name">
            <summary>A string containing the name of the asset</summary>
        </member>
        <member name="F:OpenMetaverse.AssetWearable.Description">
            <summary>A string containing a short description of the asset</summary>
        </member>
        <member name="F:OpenMetaverse.AssetWearable.WearableType">
            <summary>The Assets WearableType</summary>
        </member>
        <member name="F:OpenMetaverse.AssetWearable.ForSale">
            <summary>The For-Sale status of the object</summary>
        </member>
        <member name="F:OpenMetaverse.AssetWearable.SalePrice">
            <summary>An Integer representing the purchase price of the asset</summary>
        </member>
        <member name="F:OpenMetaverse.AssetWearable.Creator">
            <summary>The <seealso cref="T:OpenMetaverse.UUID"/> of the assets creator</summary>
        </member>
        <member name="F:OpenMetaverse.AssetWearable.Owner">
            <summary>The <seealso cref="T:OpenMetaverse.UUID"/> of the assets current owner</summary>
        </member>
        <member name="F:OpenMetaverse.AssetWearable.LastOwner">
            <summary>The <seealso cref="T:OpenMetaverse.UUID"/> of the assets prior owner</summary>
        </member>
        <member name="F:OpenMetaverse.AssetWearable.Group">
            <summary>The <seealso cref="T:OpenMetaverse.UUID"/> of the Group this asset is set to</summary>
        </member>
        <member name="F:OpenMetaverse.AssetWearable.GroupOwned">
            <summary>True if the asset is owned by a <seealso cref="F:OpenMetaverse.AssetWearable.Group"/></summary>
        </member>
        <member name="F:OpenMetaverse.AssetWearable.Permissions">
            <summary>The Permissions mask of the asset</summary>
        </member>
        <member name="F:OpenMetaverse.AssetWearable.Params">
            <summary>A Dictionary containing Key/Value pairs of the objects parameters</summary>
        </member>
        <member name="F:OpenMetaverse.AssetWearable.Textures">
            <summary>A Dictionary containing Key/Value pairs where the Key is the textures Index and the Value is the Textures <seealso cref="T:OpenMetaverse.UUID"/></summary>
        </member>
        <member name="M:OpenMetaverse.AssetWearable.#ctor">
            <summary>Initializes a new instance of an AssetWearable object</summary>
        </member>
        <member name="M:OpenMetaverse.AssetWearable.#ctor(OpenMetaverse.UUID,System.Byte[])">
            <summary>Initializes a new instance of an AssetWearable object with parameters</summary>
            <param name="assetID">A unique <see cref="T:OpenMetaverse.UUID"/> specific to this asset</param>
            <param name="assetData">A byte array containing the raw asset data</param>
        </member>
        <member name="M:OpenMetaverse.AssetWearable.#ctor(System.String)">
            <summary>Initializes a new instance of an AssetWearable object with parameters</summary>
            <param name="source">A string containing the asset parameters</param>
        </member>
        <member name="M:OpenMetaverse.AssetWearable.Decode">
            <summary>
            Decode an assets byte encoded data to a string
            </summary>
            <returns>true if the asset data was decoded successfully</returns>
        </member>
        <member name="M:OpenMetaverse.AssetWearable.Encode">
            <summary>
            Encode the assets string represantion into a format consumable by the asset server
            </summary>
        </member>
        <member name="T:OpenMetaverse.AssetClothing">
            <summary>
            Represents an <seealso cref="T:OpenMetaverse.AssetWearable"/> that can be worn on an avatar
            such as a Shirt, Pants, etc.
            </summary>
        </member>
        <member name="M:OpenMetaverse.AssetClothing.#ctor">
            <summary>Initializes a new instance of an AssetScriptBinary object</summary>
        </member>
        <member name="M:OpenMetaverse.AssetClothing.#ctor(OpenMetaverse.UUID,System.Byte[])">
            <summary>Initializes a new instance of an AssetScriptBinary object with parameters</summary>
            <param name="assetID">A unique <see cref="T:OpenMetaverse.UUID"/> specific to this asset</param>
            <param name="assetData">A byte array containing the raw asset data</param>
        </member>
        <member name="M:OpenMetaverse.AssetClothing.#ctor(System.String)">
            <summary>Initializes a new instance of an AssetScriptBinary object with parameters</summary>
            <param name="source">A string containing the Clothings data</param>
        </member>
        <member name="P:OpenMetaverse.AssetClothing.AssetType">
            <summary>Override the base classes AssetType</summary>
        </member>
        <member name="T:OpenMetaverse.AssetBodypart">
            <summary>
            Represents an <seealso cref="T:OpenMetaverse.AssetWearable"/> that represents an avatars body ie: Hair, Etc.
            </summary>
        </member>
        <member name="M:OpenMetaverse.AssetBodypart.#ctor">
            <summary>Initializes a new instance of an AssetBodyPart object</summary>
        </member>
        <member name="M:OpenMetaverse.AssetBodypart.#ctor(OpenMetaverse.UUID,System.Byte[])">
            <summary>Initializes a new instance of an AssetBodyPart object with parameters</summary>
            <param name="assetID">A unique <see cref="T:OpenMetaverse.UUID"/> specific to this asset</param>
            <param name="assetData">A byte array containing the raw asset data</param>
        </member>
        <member name="M:OpenMetaverse.AssetBodypart.#ctor(System.String)">
            <summary>Initializes a new instance of an AssetBodyPart object with parameters</summary>
            <param name="source">A string representing the values of the Bodypart</param>
        </member>
        <member name="P:OpenMetaverse.AssetBodypart.AssetType">
            <summary>Override the base classes AssetType</summary>
        </member>
        <member name="T:OpenMetaverse.ProfileFlags">
            <summary>
            Avatar profile flags
            </summary>
        </member>
        <member name="T:OpenMetaverse.Avatar">
            <summary>
            Represents an avatar (other than your own)
            </summary>
        </member>
        <member name="T:OpenMetaverse.Primitive">
            <summary>
            Particle system specific enumerators, flags and methods.
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSys">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ID">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.GroupID">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.LocalID">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParentID">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.RegionHandle">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.Flags">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.TreeSpecies">
            <summary>Foliage type for this primitive. Only applicable if this
            primitive is foliage</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ScratchPad">
            <summary>Unknown</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.Position">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.Scale">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.Rotation">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.Velocity">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.AngularVelocity">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.Acceleration">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.CollisionPlane">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.Flexible">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.Light">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.Sculpt">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ClickAction">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.Sound">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.OwnerID">
            <summary>Identifies the owner if audio or a particle system is
            active</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.SoundFlags">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.SoundGain">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.SoundRadius">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.Text">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.TextColor">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.MediaURL">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.Joint">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.JointPivot">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.JointAxisOrAnchor">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.NameValues">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.PrimData">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.Properties">
            <summary></summary>
        </member>
        <member name="M:OpenMetaverse.Primitive.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenMetaverse.Primitive.PackPathTwist(System.Single)">
            <summary>
            Packs PathTwist, PathTwistBegin, PathRadiusOffset, and PathSkew
            parameters in to signed eight bit values
            </summary>
            <param name="pathTwist">Floating point parameter to pack</param>
            <returns>Signed eight bit value containing the packed parameter</returns>
        </member>
        <member name="M:OpenMetaverse.Primitive.UnpackPathTwist(System.SByte)">
            <summary>
            Unpacks PathTwist, PathTwistBegin, PathRadiusOffset, and PathSkew
            parameters from signed eight bit integers to floating point values
            </summary>
            <param name="pathTwist">Signed eight bit value to unpack</param>
            <returns>Unpacked floating point value</returns>
        </member>
        <member name="F:OpenMetaverse.Primitive.Textures">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.TextureAnim">
            <summary></summary>
        </member>
        <member name="P:OpenMetaverse.Primitive.Type">
            <summary>Uses basic heuristics to estimate the primitive shape</summary>
        </member>
        <member name="T:OpenMetaverse.Primitive.ParticleSystem">
            <summary>
            Complete structure for the particle system
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.PartFlags">
            <summary>Particle Flags</summary>
            <remarks>There appears to be more data packed in to this area
            for many particle systems. It doesn't appear to be flag values
            and serialization breaks unless there is a flag for every
            possible bit so it is left as an unsigned integer</remarks>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.Pattern">
            <summary><seealso cref="T:SourcePattern"/> pattern of particles</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.MaxAge">
            <summary>A <see langword="float"/> representing the maximimum age (in seconds) particle will be displayed</summary>
            <remarks>Maximum value is 30 seconds</remarks>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.StartAge">
            <summary>A <see langword="float"/> representing the number of seconds, 
            from when the particle source comes into view, 
            or the particle system's creation, that the object will emits particles; 
            after this time period no more particles are emitted</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.InnerAngle">
            <summary>A <see langword="float"/> in radians that specifies where particles will not be created</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.OuterAngle">
            <summary>A <see langword="float"/> in radians that specifies where particles will be created</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.BurstRate">
            <summary>A <see langword="float"/> representing the number of seconds between burts.</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.BurstRadius">
            <summary>A <see langword="float"/> representing the number of meters
            around the center of the source where particles will be created.</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.BurstSpeedMin">
            <summary>A <see langword="float"/> representing in seconds, the minimum speed between bursts of new particles 
            being emitted</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.BurstSpeedMax">
            <summary>A <see langword="float"/> representing in seconds the maximum speed of new particles being emitted.</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.BurstPartCount">
            <summary>A <see langword="byte"/> representing the maximum number of particles emitted per burst</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.AngularVelocity">
            <summary>A <see cref="T:Vector3"/> which represents the velocity (speed) from the source which particles are emitted</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.PartAcceleration">
            <summary>A <see cref="T:Vector3"/> which represents the Acceleration from the source which particles are emitted</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.Texture">
            <summary>The <see cref="T:UUID"/> Key of the texture displayed on the particle</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.Target">
            <summary>The <see cref="T:UUID"/> Key of the specified target object or avatar particles will follow</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.PartDataFlags">
            <summary>Flags of particle from <seealso cref="T:ParticleDataFlags"/></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.PartMaxAge">
            <summary>Max Age particle system will emit particles for</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.PartStartColor">
            <summary>The <see cref="T:Color4"/> the particle has at the beginning of its lifecycle</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.PartEndColor">
            <summary>The <see cref="T:Color4"/> the particle has at the ending of its lifecycle</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.PartStartScaleX">
            <summary>A <see langword="float"/> that represents the starting X size of the particle</summary>
            <remarks>Minimum value is 0, maximum value is 4</remarks>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.PartStartScaleY">
            <summary>A <see langword="float"/> that represents the starting Y size of the particle</summary>
            <remarks>Minimum value is 0, maximum value is 4</remarks>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.PartEndScaleX">
            <summary>A <see langword="float"/> that represents the ending X size of the particle</summary>
            <remarks>Minimum value is 0, maximum value is 4</remarks>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.PartEndScaleY">
            <summary>A <see langword="float"/> that represents the ending Y size of the particle</summary>
            <remarks>Minimum value is 0, maximum value is 4</remarks>
        </member>
        <member name="M:OpenMetaverse.Primitive.ParticleSystem.#ctor(System.Byte[],System.Int32)">
            <summary>
            Decodes a byte[] array into a ParticleSystem Object
            </summary>
            <param name="data">ParticleSystem object</param>
            <param name="pos">Start position for BitPacker</param>
        </member>
        <member name="M:OpenMetaverse.Primitive.ParticleSystem.GetBytes">
            <summary>
            Generate byte[] array from particle data
            </summary>
            <returns>Byte array</returns>
        </member>
        <member name="T:OpenMetaverse.Primitive.ParticleSystem.SourcePattern">
            <summary>
            Particle source pattern
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.SourcePattern.None">
            <summary>None</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.SourcePattern.Drop">
            <summary>Drop particles from source position with no force</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.SourcePattern.Explode">
            <summary>"Explode" particles in all directions</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.SourcePattern.Angle">
            <summary>Particles shoot across a 2D area</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.SourcePattern.AngleCone">
            <summary>Particles shoot across a 3D Cone</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.SourcePattern.AngleConeEmpty">
            <summary>Inverse of AngleCone (shoot particles everywhere except the 3D cone defined</summary>
        </member>
        <member name="T:OpenMetaverse.Primitive.ParticleSystem.ParticleDataFlags">
            <summary>
            Particle Data Flags
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.ParticleDataFlags.None">
            <summary>None</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.ParticleDataFlags.InterpColor">
            <summary>Interpolate color and alpha from start to end</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.ParticleDataFlags.InterpScale">
            <summary>Interpolate scale from start to end</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.ParticleDataFlags.Bounce">
            <summary>Bounce particles off particle sources Z height</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.ParticleDataFlags.Wind">
            <summary>velocity of particles is dampened toward the simulators wind</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.ParticleDataFlags.FollowSrc">
            <summary>Particles follow the source</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.ParticleDataFlags.FollowVelocity">
            <summary>Particles point towards the direction of source's velocity</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.ParticleDataFlags.TargetPos">
            <summary>Target of the particles</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.ParticleDataFlags.TargetLinear">
            <summary>Particles are sent in a straight line</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.ParticleDataFlags.Emissive">
            <summary>Particles emit a glow</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.ParticleDataFlags.Beam">
            <summary>used for point/grab/touch</summary>
        </member>
        <member name="T:OpenMetaverse.Primitive.ParticleSystem.ParticleFlags">
            <summary>
            Particle Flags Enum
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.ParticleFlags.None">
            <summary>None</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.ParticleFlags.ObjectRelative">
            <summary>Acceleration and velocity for particles are
            relative to the object rotation</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.ParticleFlags.UseNewAngle">
            <summary>Particles use new 'correct' angle parameters</summary>
        </member>
        <member name="T:OpenMetaverse.Primitive.ConstructionData">
            <summary>
            Parameters used to construct a visual representation of a primitive
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ConstructionData.profileCurve">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ConstructionData.PathCurve">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ConstructionData.PathEnd">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ConstructionData.PathRadiusOffset">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ConstructionData.PathSkew">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ConstructionData.PathScaleX">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ConstructionData.PathScaleY">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ConstructionData.PathShearX">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ConstructionData.PathShearY">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ConstructionData.PathTaperX">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ConstructionData.PathTaperY">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ConstructionData.PathBegin">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ConstructionData.PathTwist">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ConstructionData.PathTwistBegin">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ConstructionData.PathRevolutions">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ConstructionData.ProfileBegin">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ConstructionData.ProfileEnd">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ConstructionData.ProfileHollow">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ConstructionData.Material">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ConstructionData.State">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ConstructionData.PCode">
            <summary></summary>
        </member>
        <member name="P:OpenMetaverse.Primitive.ConstructionData.AttachmentPoint">
            <summary>Attachment point to an avatar</summary>
        </member>
        <member name="P:OpenMetaverse.Primitive.ConstructionData.ProfileCurve">
            <summary></summary>
        </member>
        <member name="P:OpenMetaverse.Primitive.ConstructionData.ProfileHole">
            <summary></summary>
        </member>
        <member name="P:OpenMetaverse.Primitive.ConstructionData.PathBeginScale">
            <summary></summary>
        </member>
        <member name="P:OpenMetaverse.Primitive.ConstructionData.PathEndScale">
            <summary></summary>
        </member>
        <member name="T:OpenMetaverse.Primitive.FlexibleData">
            <summary>
            Information on the flexible properties of a primitive
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.FlexibleData.Softness">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.FlexibleData.Gravity">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.FlexibleData.Drag">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.FlexibleData.Wind">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.FlexibleData.Tension">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.FlexibleData.Force">
            <summary></summary>
        </member>
        <member name="M:OpenMetaverse.Primitive.FlexibleData.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenMetaverse.Primitive.FlexibleData.#ctor(System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <param name="pos"></param>
        </member>
        <member name="M:OpenMetaverse.Primitive.FlexibleData.GetBytes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenMetaverse.Primitive.FlexibleData.GetOSD">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenMetaverse.Primitive.LightData">
            <summary>
            Information on the light properties of a primitive
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.LightData.Color">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.LightData.Intensity">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.LightData.Radius">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.LightData.Cutoff">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.LightData.Falloff">
            <summary></summary>
        </member>
        <member name="M:OpenMetaverse.Primitive.LightData.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenMetaverse.Primitive.LightData.#ctor(System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <param name="pos"></param>
        </member>
        <member name="M:OpenMetaverse.Primitive.LightData.GetBytes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenMetaverse.Primitive.LightData.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenMetaverse.Primitive.SculptData">
            <summary>
            Information on the sculpt properties of a sculpted primitive
            </summary>
        </member>
        <member name="M:OpenMetaverse.Primitive.SculptData.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenMetaverse.Primitive.SculptData.#ctor(System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <param name="pos"></param>
        </member>
        <member name="T:OpenMetaverse.Primitive.ObjectProperties">
            <summary>
            Extended properties to describe an object
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ObjectProperties.ObjectID">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ObjectProperties.CreatorID">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ObjectProperties.OwnerID">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ObjectProperties.GroupID">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ObjectProperties.CreationDate">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ObjectProperties.Permissions">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ObjectProperties.OwnershipCost">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ObjectProperties.SaleType">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ObjectProperties.SalePrice">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ObjectProperties.AggregatePerms">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ObjectProperties.AggregatePermTextures">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ObjectProperties.AggregatePermTexturesOwner">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ObjectProperties.Category">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ObjectProperties.InventorySerial">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ObjectProperties.ItemID">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ObjectProperties.FolderID">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ObjectProperties.FromTaskID">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ObjectProperties.LastOwnerID">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ObjectProperties.Name">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ObjectProperties.Description">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ObjectProperties.TouchName">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ObjectProperties.SitName">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ObjectProperties.TextureIDs">
            <summary></summary>
        </member>
        <member name="M:OpenMetaverse.Primitive.ObjectProperties.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenMetaverse.Primitive.ObjectProperties.SetFamilyProperties(OpenMetaverse.Primitive.ObjectProperties)">
            <summary>
            Set the properties that are set in an ObjectPropertiesFamily packet
            </summary>
            <param name="props"><seealso cref="T:OpenMetaverse.Primitive.ObjectProperties"/> that has
            been partially filled by an ObjectPropertiesFamily packet</param>
        </member>
        <member name="T:OpenMetaverse.Primitive.TextureAnimMode">
            <summary>
            Texture animation mode
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.TextureAnimMode.ANIM_OFF">
            <summary>Disable texture animation</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.TextureAnimMode.ANIM_ON">
            <summary>Enable texture animation</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.TextureAnimMode.LOOP">
            <summary>Loop when animating textures</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.TextureAnimMode.REVERSE">
            <summary>Animate in reverse direction</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.TextureAnimMode.PING_PONG">
            <summary>Animate forward then reverse</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.TextureAnimMode.SMOOTH">
            <summary>Slide texture smoothly instead of frame-stepping</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.TextureAnimMode.ROTATE">
            <summary>Rotate texture instead of using frames</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.TextureAnimMode.SCALE">
            <summary>Scale texture instead of using frames</summary>
        </member>
        <member name="T:OpenMetaverse.Primitive.TextureEntryFace">
            <summary>
            A single textured face. Don't instantiate this class yourself, use the
            methods in TextureEntry
            </summary>
        </member>
        <member name="M:OpenMetaverse.Primitive.TextureEntryFace.#ctor(OpenMetaverse.Primitive.TextureEntryFace)">
            <summary>
            Contains the definition for individual faces
            </summary>
            <param name="defaultTexture"></param>
        </member>
        <member name="M:OpenMetaverse.Primitive.TextureEntryFace.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenMetaverse.Primitive.TextureEntryFace.material">
            <summary></summary>
        </member>
        <member name="P:OpenMetaverse.Primitive.TextureEntryFace.media">
            <summary></summary>
        </member>
        <member name="P:OpenMetaverse.Primitive.TextureEntryFace.RGBA">
            <summary></summary>
        </member>
        <member name="P:OpenMetaverse.Primitive.TextureEntryFace.RepeatU">
            <summary></summary>
        </member>
        <member name="P:OpenMetaverse.Primitive.TextureEntryFace.RepeatV">
            <summary></summary>
        </member>
        <member name="P:OpenMetaverse.Primitive.TextureEntryFace.OffsetU">
            <summary></summary>
        </member>
        <member name="P:OpenMetaverse.Primitive.TextureEntryFace.OffsetV">
            <summary></summary>
        </member>
        <member name="P:OpenMetaverse.Primitive.TextureEntryFace.Rotation">
            <summary></summary>
        </member>
        <member name="P:OpenMetaverse.Primitive.TextureEntryFace.Glow">
            <summary></summary>
        </member>
        <member name="P:OpenMetaverse.Primitive.TextureEntryFace.Bump">
            <summary></summary>
        </member>
        <member name="P:OpenMetaverse.Primitive.TextureEntryFace.MediaFlags">
            <summary>In the future this will specify whether a webpage is
            attached to this face</summary>
        </member>
        <member name="P:OpenMetaverse.Primitive.TextureEntryFace.TextureID">
            <summary></summary>
        </member>
        <member name="T:OpenMetaverse.Primitive.TextureEntry">
            <summary>
            Represents all of the texturable faces for an object
            </summary>
            <remarks>Grid objects have infinite faces, with each face
            using the properties of the default face unless set otherwise. So if
            you have a TextureEntry with a default texture uuid of X, and face 18
            has a texture UUID of Y, every face would be textured with X except for
            face 18 that uses Y. In practice however, primitives utilize a maximum
            of nine faces</remarks>
        </member>
        <member name="F:OpenMetaverse.Primitive.TextureEntry.DefaultTexture">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.TextureEntry.FaceTextures">
            <summary></summary>
        </member>
        <member name="M:OpenMetaverse.Primitive.TextureEntry.#ctor(OpenMetaverse.UUID)">
            <summary>
            Constructor that takes a default texture UUID
            </summary>
            <param name="defaultTextureID">Texture UUID to use as the default texture</param>
        </member>
        <member name="M:OpenMetaverse.Primitive.TextureEntry.#ctor(OpenMetaverse.Primitive.TextureEntryFace)">
            <summary>
            Constructor that takes a <code>TextureEntryFace</code> for the
            default face
            </summary>
            <param name="defaultFace">Face to use as the default face</param>
        </member>
        <member name="M:OpenMetaverse.Primitive.TextureEntry.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Constructor that creates the TextureEntry class from a byte array
            </summary>
            <param name="data">Byte array containing the TextureEntry field</param>
            <param name="pos">Starting position of the TextureEntry field in 
            the byte array</param>
            <param name="length">Length of the TextureEntry field, in bytes</param>
        </member>
        <member name="M:OpenMetaverse.Primitive.TextureEntry.CreateFace(System.UInt32)">
            <summary>
            This will either create a new face if a custom face for the given
            index is not defined, or return the custom face for that index if
            it already exists
            </summary>
            <param name="index">The index number of the face to create or 
            retrieve</param>
            <returns>A TextureEntryFace containing all the properties for that
            face</returns>
        </member>
        <member name="M:OpenMetaverse.Primitive.TextureEntry.GetFace(System.UInt32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:OpenMetaverse.Primitive.TextureEntry.GetOSD">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenMetaverse.Primitive.TextureEntry.GetBytes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenMetaverse.Primitive.TextureEntry.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenMetaverse.Primitive.TextureAnimation">
            <summary>
            Controls the texture animation of a particular prim
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.TextureAnimation.Flags">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.TextureAnimation.Face">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.TextureAnimation.SizeX">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.TextureAnimation.SizeY">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.TextureAnimation.Start">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.TextureAnimation.Length">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.TextureAnimation.Rate">
            <summary></summary>
        </member>
        <member name="M:OpenMetaverse.Primitive.TextureAnimation.#ctor(System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <param name="pos"></param>
        </member>
        <member name="M:OpenMetaverse.Primitive.TextureAnimation.GetBytes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:OpenMetaverse.Avatar.Groups">
            <summary>Groups that this avatar is a member of</summary>
        </member>
        <member name="F:OpenMetaverse.Avatar.ProfileStatistics">
            <summary>Positive and negative ratings</summary>
        </member>
        <member name="F:OpenMetaverse.Avatar.ProfileProperties">
            <summary>Avatar properties including about text, profile URL, image IDs and 
            publishing settings</summary>
        </member>
        <member name="F:OpenMetaverse.Avatar.ProfileInterests">
            <summary>Avatar interests including spoken languages, skills, and "want to"
            choices</summary>
        </member>
        <member name="F:OpenMetaverse.Avatar.ControlFlags">
            <summary>Movement control flags for avatars. Typically not set or used by
            clients. To move your avatar, use Client.Self.Movement instead</summary>
        </member>
        <member name="M:OpenMetaverse.Avatar.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:OpenMetaverse.Avatar.FirstName">
            <summary>First name</summary>
        </member>
        <member name="P:OpenMetaverse.Avatar.LastName">
            <summary>Last name</summary>
        </member>
        <member name="P:OpenMetaverse.Avatar.Name">
            <summary>Full name</summary>
        </member>
        <member name="P:OpenMetaverse.Avatar.GroupName">
            <summary>Active group</summary>
        </member>
        <member name="T:OpenMetaverse.Avatar.Statistics">
            <summary>
            Positive and negative ratings
            </summary>
        </member>
        <member name="F:OpenMetaverse.Avatar.Statistics.BehaviorPositive">
            <summary>Positive ratings for Behavior</summary>
        </member>
        <member name="F:OpenMetaverse.Avatar.Statistics.BehaviorNegative">
            <summary>Negative ratings for Behavior</summary>
        </member>
        <member name="F:OpenMetaverse.Avatar.Statistics.AppearancePositive">
            <summary>Positive ratings for Appearance</summary>
        </member>
        <member name="F:OpenMetaverse.Avatar.Statistics.AppearanceNegative">
            <summary>Negative ratings for Appearance</summary>
        </member>
        <member name="F:OpenMetaverse.Avatar.Statistics.BuildingPositive">
            <summary>Positive ratings for Building</summary>
        </member>
        <member name="F:OpenMetaverse.Avatar.Statistics.BuildingNegative">
            <summary>Negative ratings for Building</summary>
        </member>
        <member name="F:OpenMetaverse.Avatar.Statistics.GivenPositive">
            <summary>Positive ratings given by this avatar</summary>
        </member>
        <member name="F:OpenMetaverse.Avatar.Statistics.GivenNegative">
            <summary>Negative ratings given by this avatar</summary>
        </member>
        <member name="T:OpenMetaverse.Avatar.AvatarProperties">
            <summary>
            Avatar properties including about text, profile URL, image IDs and 
            publishing settings
            </summary>
        </member>
        <member name="F:OpenMetaverse.Avatar.AvatarProperties.FirstLifeText">
            <summary>First Life about text</summary>
        </member>
        <member name="F:OpenMetaverse.Avatar.AvatarProperties.FirstLifeImage">
            <summary>First Life image ID</summary>
        </member>
        <member name="F:OpenMetaverse.Avatar.AvatarProperties.Partner">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Avatar.AvatarProperties.AboutText">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Avatar.AvatarProperties.BornOn">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Avatar.AvatarProperties.CharterMember">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Avatar.AvatarProperties.ProfileImage">
            <summary>Profile image ID</summary>
        </member>
        <member name="F:OpenMetaverse.Avatar.AvatarProperties.Flags">
            <summary>Flags of the profile</summary>
        </member>
        <member name="F:OpenMetaverse.Avatar.AvatarProperties.ProfileURL">
            <summary>Web URL for this profile</summary>
        </member>
        <member name="P:OpenMetaverse.Avatar.AvatarProperties.AllowPublish">
            <summary>Should this profile be published on the web</summary>
        </member>
        <member name="P:OpenMetaverse.Avatar.AvatarProperties.Online">
            <summary>Avatar Online Status</summary>
        </member>
        <member name="P:OpenMetaverse.Avatar.AvatarProperties.MaturePublish">
            <summary>Is this a mature profile</summary>
        </member>
        <member name="P:OpenMetaverse.Avatar.AvatarProperties.Identified">
            <summary></summary>
        </member>
        <member name="P:OpenMetaverse.Avatar.AvatarProperties.Transacted">
            <summary></summary>
        </member>
        <member name="T:OpenMetaverse.Avatar.Interests">
            <summary>
            Avatar interests including spoken languages, skills, and "want to"
            choices
            </summary>
        </member>
        <member name="F:OpenMetaverse.Avatar.Interests.LanguagesText">
            <summary>Languages profile field</summary>
        </member>
        <member name="F:OpenMetaverse.Avatar.Interests.SkillsMask">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Avatar.Interests.SkillsText">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Avatar.Interests.WantToMask">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Avatar.Interests.WantToText">
            <summary></summary>
        </member>
        <member name="T:OpenMetaverse.AvatarGroup">
            <summary>
            Holds group information for Avatars such as those you might find in a profile
            </summary>
        </member>
        <member name="F:OpenMetaverse.AvatarGroup.AcceptNotices">
            <summary>true of Avatar accepts group notices</summary>
        </member>
        <member name="F:OpenMetaverse.AvatarGroup.GroupID">
            <summary>Groups Key</summary>
        </member>
        <member name="F:OpenMetaverse.AvatarGroup.GroupInsigniaID">
            <summary>Texture Key for groups insignia</summary>
        </member>
        <member name="F:OpenMetaverse.AvatarGroup.GroupName">
            <summary>Name of the group</summary>
        </member>
        <member name="F:OpenMetaverse.AvatarGroup.GroupPowers">
            <summary>Powers avatar has in the group</summary>
        </member>
        <member name="F:OpenMetaverse.AvatarGroup.GroupTitle">
            <summary>Avatars Currently selected title</summary>
        </member>
        <member name="F:OpenMetaverse.AvatarGroup.ListInProfile">
            <summary>true of Avatar has chosen to list this in their profile</summary>
        </member>
        <member name="T:OpenMetaverse.ProfilePick">
            <summary>
            Holds group information on an individual profile pick
            </summary>
        </member>
        <member name="T:OpenMetaverse.AvatarManager">
            <summary>
            Retrieve friend status notifications, and retrieve avatar names and
            profiles
            </summary>
        </member>
        <member name="M:OpenMetaverse.AvatarManager.#ctor(OpenMetaverse.GridClient)">
            <summary>
            Represents other avatars
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:OpenMetaverse.AvatarManager.TrackAvatar(OpenMetaverse.UUID)">
            <summary>Tracks the specified avatar on your map</summary>
            <param name="preyID">Avatar ID to track</param>
        </member>
        <member name="M:OpenMetaverse.AvatarManager.RequestAvatarName(OpenMetaverse.UUID)">
            <summary>
            Request a single avatar name
            </summary>
            <param name="id">The avatar key to retrieve a name for</param>
        </member>
        <member name="M:OpenMetaverse.AvatarManager.RequestAvatarNames(System.Collections.Generic.List{OpenMetaverse.UUID})">
            <summary>
            Request a list of avatar names
            </summary>
            <param name="ids">The avatar keys to retrieve names for</param>
        </member>
        <member name="M:OpenMetaverse.AvatarManager.RequestAvatarProperties(OpenMetaverse.UUID)">
            <summary>
            Start a request for Avatar Properties
            </summary>
            <param name="avatarid"></param>
        </member>
        <member name="M:OpenMetaverse.AvatarManager.RequestAvatarNameSearch(System.String,OpenMetaverse.UUID)">
            <summary>
            Search for an avatar (first name, last name, and uuid)
            </summary>
            <param name="name">The name to search for</param>
            <param name="queryID">An ID to associate with this query</param>
        </member>
        <member name="M:OpenMetaverse.AvatarManager.RequestAvatarPicks(OpenMetaverse.UUID)">
            <summary>
            Start a request for Avatar Picks
            </summary>
            <param name="avatarid">UUID of the avatar</param>
        </member>
        <member name="M:OpenMetaverse.AvatarManager.RequestPickInfo(OpenMetaverse.UUID,OpenMetaverse.UUID)">
            <summary>
            Start a request for details of a specific profile pick
            </summary>
            <param name="avatarid">UUID of the avatar</param>
            <param name="pickid">UUID of the profile pick</param>
        </member>
        <member name="M:OpenMetaverse.AvatarManager.AvatarNameHandler(OpenMetaverse.Packets.Packet,OpenMetaverse.Simulator)">
            <summary>
            Process an incoming UUIDNameReply Packet and insert Full Names into the Avatars Dictionary
            </summary>
            <param name="packet">Incoming Packet to process</param>
            <param name="simulator">Unused</param>
        </member>
        <member name="M:OpenMetaverse.AvatarManager.AvatarAnimationHandler(OpenMetaverse.Packets.Packet,OpenMetaverse.Simulator)">
            <summary>
            Process incoming avatar animations
            </summary>
            <param name="packet"></param>
            <param name="sim"></param>
        </member>
        <member name="M:OpenMetaverse.AvatarManager.AvatarAppearanceHandler(OpenMetaverse.Packets.Packet,OpenMetaverse.Simulator)">
            <summary>
            Process incoming avatar appearance
            </summary>
            <param name="packet"></param>
            <param name="sim"></param>
        </member>
        <member name="M:OpenMetaverse.AvatarManager.AvatarPropertiesHandler(OpenMetaverse.Packets.Packet,OpenMetaverse.Simulator)">
            <summary>
            Process incoming avatar properties (profile data)
            </summary>
            <param name="packet"></param>
            <param name="sim"></param>
        </member>
        <member name="M:OpenMetaverse.AvatarManager.AvatarInterestsHandler(OpenMetaverse.Packets.Packet,OpenMetaverse.Simulator)">
            <summary>
            Process incoming Avatar Interests information
            </summary>
        </member>
        <member name="M:OpenMetaverse.AvatarManager.ViewerEffectHandler(OpenMetaverse.Packets.Packet,OpenMetaverse.Simulator)">
            <summary>
            Process an incoming effect
            </summary>
        </member>
        <member name="M:OpenMetaverse.AvatarManager.AvatarPicksHandler(OpenMetaverse.Packets.Packet,OpenMetaverse.Simulator)">
            <summary>
            Process an incoming list of profile picks
            </summary>
        </member>
        <member name="M:OpenMetaverse.AvatarManager.PickInfoHandler(OpenMetaverse.Packets.Packet,OpenMetaverse.Simulator)">
            <summary>
            Process an incoming details of a profile pick
            </summary>
        </member>
        <member name="E:OpenMetaverse.AvatarManager.OnAvatarAnimation">
            <summary></summary>
        </member>
        <member name="E:OpenMetaverse.AvatarManager.OnAvatarAppearance">
            <summary></summary>
        </member>
        <member name="E:OpenMetaverse.AvatarManager.OnAvatarNames">
            <summary></summary>
        </member>
        <member name="E:OpenMetaverse.AvatarManager.OnAvatarInterests">
            <summary></summary>
        </member>
        <member name="E:OpenMetaverse.AvatarManager.OnAvatarProperties">
            <summary></summary>
        </member>
        <member name="E:OpenMetaverse.AvatarManager.OnAvatarGroups">
            <summary></summary>
        </member>
        <member name="E:OpenMetaverse.AvatarManager.OnAvatarNameSearch">
            <summary></summary>
        </member>
        <member name="E:OpenMetaverse.AvatarManager.OnPointAt">
            <summary></summary>
        </member>
        <member name="E:OpenMetaverse.AvatarManager.OnLookAt">
            <summary></summary>
        </member>
        <member name="E:OpenMetaverse.AvatarManager.OnEffect">
            <summary></summary>
        </member>
        <member name="E:OpenMetaverse.AvatarManager.OnAvatarPicks">
            <summary></summary>
        </member>
        <member name="E:OpenMetaverse.AvatarManager.OnPickInfo">
            <summary></summary>
        </member>
        <member name="T:OpenMetaverse.AvatarManager.AvatarAnimationCallback">
            <summary>
            Triggered when an avatar animation signal is received
            </summary>
            <param name="avatarID">UUID of the avatar sending the animation</param>
            <param name="anims">UUID of the animation, and animation sequence number</param>
        </member>
        <member name="T:OpenMetaverse.AvatarManager.AvatarAppearanceCallback">
            <summary>
            Triggered when AvatarAppearance is received
            </summary>
            <param name="defaultTexture"></param>
            <param name="faceTextures"></param>
            <param name="avatarID"></param>
            <param name="isTrial"></param>
            <param name="visualParams"></param>
        </member>
        <member name="T:OpenMetaverse.AvatarManager.AvatarNamesCallback">
            <summary>
            Triggered when a UUIDNameReply is received
            </summary>
            <param name="names"></param>
        </member>
        <member name="T:OpenMetaverse.AvatarManager.AvatarInterestsCallback">
            <summary>
            Triggered when a response for avatar interests is returned
            </summary>
            <param name="avatarID"></param>
            <param name="interests"></param>
        </member>
        <member name="T:OpenMetaverse.AvatarManager.AvatarPropertiesCallback">
            <summary>
            Triggered when avatar properties are received (AvatarPropertiesReply)
            </summary>
            <param name="avatarID"></param>
            <param name="properties"></param>
        </member>
        <member name="T:OpenMetaverse.AvatarManager.AvatarGroupsCallback">
            <summary>
            Triggered when an avatar group list is received (AvatarGroupsReply)
            </summary>
            <param name="avatarID"></param>
            <param name="avatarGroups"></param>
        </member>
        <member name="T:OpenMetaverse.AvatarManager.AvatarNameSearchCallback">
            <summary>
            Triggered when a name search reply is received (AvatarPickerReply)
            </summary>
            <param name="queryID"></param>
            <param name="avatars"></param>
        </member>
        <member name="T:OpenMetaverse.AvatarManager.PointAtCallback">
            <summary>
            
            </summary>
            <param name="sourceID"></param>
            <param name="targetID"></param>
            <param name="targetPos"></param>
            <param name="pointType"></param>
            <param name="duration"></param>
            <param name="id"></param>
        </member>
        <member name="T:OpenMetaverse.AvatarManager.LookAtCallback">
            <summary>
            
            </summary>
            <param name="sourceID"></param>
            <param name="targetID"></param>
            <param name="targetPos"></param>
            <param name="lookType"></param>
            <param name="duration"></param>
            <param name="id"></param>
        </member>
        <member name="T:OpenMetaverse.AvatarManager.EffectCallback">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="sourceID"></param>
            <param name="targetID"></param>
            <param name="targetPos"></param>
            <param name="duration"></param>
            <param name="id"></param>
        </member>
        <member name="T:OpenMetaverse.AvatarManager.AvatarPicksCallback">
            <summary>
            Callback returning a dictionary of avatar's picks
            </summary>
            <param name="avatarid"></param>
            <param name="picks"></param>
        </member>
        <member name="T:OpenMetaverse.AvatarManager.PickInfoCallback">
            <summary>
            Callback returning a details of a specifick pick
            </summary>
            <param name="pickid"></param>
            <param name="pick"></param>
        </member>
        <member name="T:OpenMetaverse.BitPack">
            <summary>
            Wrapper around a byte array that allows bit to be packed and unpacked
            one at a time or by a variable amount. Useful for very tightly packed
            data like LayerData packets
            </summary>
        </member>
        <member name="F:OpenMetaverse.BitPack.Data">
            <summary></summary>
        </member>
        <member name="M:OpenMetaverse.BitPack.#ctor(System.Byte[],System.Int32)">
            <summary>
            Default constructor, initialize the bit packer / bit unpacker
            with a byte array and starting position
            </summary>
            <param name="data">Byte array to pack bits in to or unpack from</param>
            <param name="pos">Starting position in the byte array</param>
        </member>
        <member name="M:OpenMetaverse.BitPack.PackFloat(System.Single)">
            <summary>
            Pack a floating point value in to the data
            </summary>
            <param name="data">Floating point value to pack</param>
        </member>
        <member name="M:OpenMetaverse.BitPack.PackBits(System.Int32,System.Int32)">
            <summary>
            Pack part or all of an integer in to the data
            </summary>
            <param name="data">Integer containing the data to pack</param>
            <param name="totalCount">Number of bits of the integer to pack</param>
        </member>
        <member name="M:OpenMetaverse.BitPack.PackBits(System.UInt32,System.Int32)">
            <summary>
            Pack part or all of an unsigned integer in to the data
            </summary>
            <param name="data">Unsigned integer containing the data to pack</param>
            <param name="totalCount">Number of bits of the integer to pack</param>
        </member>
        <member name="M:OpenMetaverse.BitPack.PackFixed(System.Single,System.Boolean,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <param name="isSigned"></param>
            <param name="intBits"></param>
            <param name="fracBits"></param>
        </member>
        <member name="M:OpenMetaverse.BitPack.PackUUID(OpenMetaverse.UUID)">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:OpenMetaverse.BitPack.PackColor(OpenMetaverse.Color4)">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:OpenMetaverse.BitPack.UnpackFloat">
            <summary>
            Unpacking a floating point value from the data
            </summary>
            <returns>Unpacked floating point value</returns>
        </member>
        <member name="M:OpenMetaverse.BitPack.UnpackBits(System.Int32)">
            <summary>
            Unpack a variable number of bits from the data in to integer format
            </summary>
            <param name="totalCount">Number of bits to unpack</param>
            <returns>An integer containing the unpacked bits</returns>
            <remarks>This function is only useful up to 32 bits</remarks>
        </member>
        <member name="M:OpenMetaverse.BitPack.UnpackUBits(System.Int32)">
            <summary>
            Unpack a variable number of bits from the data in to unsigned 
            integer format
            </summary>
            <param name="totalCount">Number of bits to unpack</param>
            <returns>An unsigned integer containing the unpacked bits</returns>
            <remarks>This function is only useful up to 32 bits</remarks>
        </member>
        <member name="M:OpenMetaverse.BitPack.UnpackShort">
            <summary>
            Unpack a 16-bit signed integer
            </summary>
            <returns>16-bit signed integer</returns>
        </member>
        <member name="M:OpenMetaverse.BitPack.UnpackUShort">
            <summary>
            Unpack a 16-bit unsigned integer
            </summary>
            <returns>16-bit unsigned integer</returns>
        </member>
        <member name="M:OpenMetaverse.BitPack.UnpackInt">
            <summary>
            Unpack a 32-bit signed integer
            </summary>
            <returns>32-bit signed integer</returns>
        </member>
        <member name="M:OpenMetaverse.BitPack.UnpackUInt">
            <summary>
            Unpack a 32-bit unsigned integer
            </summary>
            <returns>32-bit unsigned integer</returns>
        </member>
        <member name="P:OpenMetaverse.BitPack.BytePos">
            <summary></summary>
        </member>
        <member name="P:OpenMetaverse.BitPack.BitPos">
            <summary></summary>
        </member>
        <member name="T:OpenMetaverse.BinBVHAnimationReader">
            <summary>
            Reads in a byte array of an Animation Asset created by the SecondLife(tm) client.
            </summary>
        </member>
        <member name="F:OpenMetaverse.BinBVHAnimationReader.rotationkeys">
            <summary>
            Rotation Keyframe count (used internally)
            </summary>
        </member>
        <member name="F:OpenMetaverse.BinBVHAnimationReader.positionkeys">
            <summary>
            Position Keyframe count (used internally)
            </summary>
        </member>
        <member name="F:OpenMetaverse.BinBVHAnimationReader.Priority">
            <summary>
            Animation Priority
            </summary>
        </member>
        <member name="F:OpenMetaverse.BinBVHAnimationReader.Length">
            <summary>
            The animation length in seconds.
            </summary>
        </member>
        <member name="F:OpenMetaverse.BinBVHAnimationReader.ExpressionName">
            <summary>
            Expression set in the client.  Null if [None] is selected
            </summary>
        </member>
        <member name="F:OpenMetaverse.BinBVHAnimationReader.InPoint">
            <summary>
            The time in seconds to start the animation
            </summary>
        </member>
        <member name="F:OpenMetaverse.BinBVHAnimationReader.OutPoint">
            <summary>
            The time in seconds to end the animation
            </summary>
        </member>
        <member name="F:OpenMetaverse.BinBVHAnimationReader.Loop">
            <summary>
            Loop the animation
            </summary>
        </member>
        <member name="F:OpenMetaverse.BinBVHAnimationReader.EaseInTime">
            <summary>
            Meta data. Ease in Seconds.
            </summary>
        </member>
        <member name="F:OpenMetaverse.BinBVHAnimationReader.EaseOutTime">
            <summary>
            Meta data. Ease out seconds.
            </summary>
        </member>
        <member name="F:OpenMetaverse.BinBVHAnimationReader.HandPose">
            <summary>
            Meta Data for the Hand Pose
            </summary>
        </member>
        <member name="F:OpenMetaverse.BinBVHAnimationReader.JointCount">
            <summary>
            Number of joints defined in the animation
            </summary>
        </member>
        <member name="F:OpenMetaverse.BinBVHAnimationReader.joints">
            <summary>
            Contains an array of joints
            </summary>
        </member>
        <member name="M:OpenMetaverse.BinBVHAnimationReader.#ctor(System.Byte[])">
            <summary>
            Searialize an animation asset into it's joints/keyframes/meta data
            </summary>
            <param name="animationdata"></param>
        </member>
        <member name="M:OpenMetaverse.BinBVHAnimationReader.ReadBytesUntilNull(System.Byte[],System.Int32@)">
            <summary>
            Variable length strings seem to be null terminated in the animation asset..    but..   
            use with caution, home grown.
            advances the index.
            </summary>
            <param name="data">The animation asset byte array</param>
            <param name="i">The offset to start reading</param>
            <returns>a string</returns>
        </member>
        <member name="M:OpenMetaverse.BinBVHAnimationReader.readJoint(System.Byte[],System.Int32@)">
            <summary>
            Read in a Joint from an animation asset byte array
            Variable length Joint fields, yay!
            Advances the index
            </summary>
            <param name="data">animation asset byte array</param>
            <param name="i">Byte Offset of the start of the joint</param>
            <returns>The Joint data serialized into the binBVHJoint structure</returns>
        </member>
        <member name="M:OpenMetaverse.BinBVHAnimationReader.readKeys(System.Byte[],System.Int32@,System.Int32,System.Single,System.Single)">
            <summary>
            Read Keyframes of a certain type
            advance i
            </summary>
            <param name="data">Animation Byte array</param>
            <param name="i">Offset in the Byte Array.  Will be advanced</param>
            <param name="keycount">Number of Keyframes</param>
            <param name="min">Scaling Min to pass to the Uint16ToFloat method</param>
            <param name="max">Scaling Max to pass to the Uint16ToFloat method</param>
            <returns></returns>
        </member>
        <member name="T:OpenMetaverse.binBVHJoint">
            <summary>
            A Joint and it's associated meta data and keyframes
            </summary>
        </member>
        <member name="F:OpenMetaverse.binBVHJoint.Name">
            <summary>
            Name of the Joint.  Matches the avatar_skeleton.xml in client distros
            </summary>
        </member>
        <member name="F:OpenMetaverse.binBVHJoint.Priority">
            <summary>
            Joint Animation Override?   Was the same as the Priority in testing.. 
            </summary>
        </member>
        <member name="F:OpenMetaverse.binBVHJoint.rotationkeys">
            <summary>
            Array of Rotation Keyframes in order from earliest to latest
            </summary>
        </member>
        <member name="F:OpenMetaverse.binBVHJoint.positionkeys">
            <summary>
            Array of Position Keyframes in order from earliest to latest
            This seems to only be for the Pelvis?
            </summary>
        </member>
        <member name="T:OpenMetaverse.binBVHJointKey">
            <summary>
            A Joint Keyframe.  This is either a position or a rotation.
            </summary>
        </member>
        <member name="F:OpenMetaverse.binBVHJointKey.key_element">
            <summary>
            Either a Vector3 position or a Vector3 Euler rotation
            </summary>
        </member>
        <member name="T:OpenMetaverse.HandPose">
            <summary>
            Poses set in the animation metadata for the hands.
            </summary>
        </member>
        <member name="T:OpenMetaverse.Caps">
            <summary>
            Capabilities is the name of the bi-directional HTTP REST protocol
            used to communicate non real-time transactions such as teleporting or
            group messaging
            </summary>
        </member>
        <member name="F:OpenMetaverse.Caps.Simulator">
            <summary>Reference to the simulator this system is connected to</summary>
        </member>
        <member name="M:OpenMetaverse.Caps.#ctor(OpenMetaverse.Simulator,System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="simulator"></param>
            <param name="seedcaps"></param>
        </member>
        <member name="M:OpenMetaverse.Caps.CapabilityURI(System.String)">
            <summary>
            Request the URI of a named capability
            </summary>
            <param name="capability">Name of the capability to request</param>
            <returns>The URI of the requested capability, or String.Empty if
            the capability does not exist</returns>
        </member>
        <member name="P:OpenMetaverse.Caps.SeedCapsURI">
            <summary>Capabilities URI this system was initialized with</summary>
        </member>
        <member name="P:OpenMetaverse.Caps.IsEventQueueRunning">
            <summary>Whether the capabilities event queue is connected and
            listening for incoming events</summary>
        </member>
        <member name="T:OpenMetaverse.Caps.EventQueueCallback">
            <summary>
            Triggered when an event is received via the EventQueueGet 
            capability
            </summary>
            <param name="message">Event name</param>
            <param name="body">Decoded event data</param>
            <param name="simulator">The simulator that generated the event</param>
        </member>
        <member name="M:OpenMetaverse.Packets.Packet.BuildPacket(System.String,OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Attempts to convert an LLSD structure to a known Packet type
            </summary>
            <param name="capsEventName">Event name, this must match an actual
            packet name for a Packet to be successfully built</param>
            <param name="body">LLSD to convert to a Packet</param>
            <returns>A Packet on success, otherwise null</returns>
        </member>
        <member name="M:OpenMetaverse.CoordinateFrame.LookDirection(OpenMetaverse.Vector3,OpenMetaverse.Vector3)">
            <summary>
            
            </summary>
            <param name="at">Looking direction, must be a normalized vector</param>
            <param name="upDirection">Up direction, must be a normalized vector</param>
        </member>
        <member name="M:OpenMetaverse.CoordinateFrame.LookDirection(System.Double)">
            <summary>
            Align the coordinate frame X and Y axis with a given rotation
            around the Z axis in radians
            </summary>
            <param name="heading">Absolute rotation around the Z axis in
            radians</param>
        </member>
        <member name="P:OpenMetaverse.CoordinateFrame.Origin">
            <summary>Origin position of this coordinate frame</summary>
        </member>
        <member name="P:OpenMetaverse.CoordinateFrame.XAxis">
            <summary>X axis of this coordinate frame, or Forward/At in grid terms</summary>
        </member>
        <member name="P:OpenMetaverse.CoordinateFrame.YAxis">
            <summary>Y axis of this coordinate frame, or Left in grid terms</summary>
        </member>
        <member name="P:OpenMetaverse.CoordinateFrame.ZAxis">
            <summary>Z axis of this coordinate frame, or Up in grid terms</summary>
        </member>
        <member name="T:OpenMetaverse.DirectoryManager">
            <summary>
            Access to the Linden dataserver which allows searching for land, events, people, etc
            </summary>
        </member>
        <member name="M:OpenMetaverse.DirectoryManager.StartLandSearch(OpenMetaverse.DirectoryManager.SearchTypeFlags)">
            <summary>
            Starts a search for land sales using the directory
            </summary>
            <param name="typeFlags">What type of land to search for. Auction, 
            estate, mainland, "first land", etc</param>
            <returns>A unique identifier that can identify packets associated
            with this query from other queries</returns>
            <remarks>The OnDirLandReply event handler must be registered before
            calling this function. There is no way to determine how many 
            results will be returned, or how many times the callback will be 
            fired other than you won't get more than 100 total parcels from 
            each query.</remarks>
        </member>
        <member name="M:OpenMetaverse.DirectoryManager.StartLandSearch(OpenMetaverse.DirectoryManager.SearchTypeFlags,System.Int32,System.Int32,System.Int32)">
            <summary>
            Starts a search for land sales using the directory
            </summary>
            <param name="typeFlags">What type of land to search for. Auction, 
            estate, mainland, "first land", etc</param>
            <param name="priceLimit">Maximum price to search for</param>
            <param name="areaLimit">Maximum area to search for</param>
            <param name="queryStart">Each request is limited to 100 parcels
            being returned. To get the first 100 parcels of a request use 0,
            from 100-199 use 1, 200-299 use 2, etc.</param>
            <returns>A unique identifier that can identify packets associated
            with this query from other queries</returns>
            <remarks>The OnDirLandReply event handler must be registered before
            calling this function. There is no way to determine how many 
            results will be returned, or how many times the callback will be 
            fired other than you won't get more than 100 total parcels from 
            each query.</remarks>
        </member>
        <member name="M:OpenMetaverse.DirectoryManager.StartLandSearch(OpenMetaverse.DirectoryManager.DirFindFlags,OpenMetaverse.DirectoryManager.SearchTypeFlags,System.Int32,System.Int32,System.Int32)">
            <summary>
            Starts a search for land sales using the directory
            </summary>
            <param name="findFlags">A flags parameter that can modify the way
            search results are returned, for example changing the ordering of
            results or limiting based on price or area</param>
            <param name="typeFlags">What type of land to search for. Auction, 
            estate, mainland, "first land", etc</param>
            <param name="priceLimit">Maximum price to search for, the 
            DirFindFlags.LimitByPrice flag must be set</param>
            <param name="areaLimit">Maximum area to search for, the
            DirFindFlags.LimitByArea flag must be set</param>
            <param name="queryStart">Each request is limited to 100 parcels
            being returned. To get the first 100 parcels of a request use 0,
            from 100-199 use 100, 200-299 use 200, etc.</param>
            <returns>A unique identifier that can identify packets associated
            with this query from other queries</returns>
            <remarks>The OnDirLandReply event handler must be registered before
            calling this function. There is no way to determine how many 
            results will be returned, or how many times the callback will be 
            fired other than you won't get more than 100 total parcels from 
            each query.</remarks>
        </member>
        <member name="M:OpenMetaverse.DirectoryManager.StartGroupSearch(OpenMetaverse.DirectoryManager.DirFindFlags,System.String,System.Int32)">
            <summary>
            Starts a search for a Group in the directory manager
            </summary>
            <param name="findFlags"></param>
            <param name="searchText">The text to search for</param>
            <param name="queryStart">Each request is limited to 100 parcels
            being returned. To get the first 100 parcels of a request use 0,
            from 100-199 use 100, 200-299 use 200, etc.</param>
            <returns>A unique identifier that can identify packets associated
            with this query from other queries</returns>
            <remarks>The OnDirLandReply event handler must be registered before
            calling this function. There is no way to determine how many 
            results will be returned, or how many times the callback will be 
            fired other than you won't get more than 100 total parcels from 
            each query.</remarks>
        </member>
        <member name="M:OpenMetaverse.DirectoryManager.StartPlacesSearch">
            <summary>
            Search "places" for Land you personally own
            </summary>
        </member>
        <member name="M:OpenMetaverse.DirectoryManager.StartPlacesSearch(OpenMetaverse.DirectoryManager.DirFindFlags,OpenMetaverse.UUID)">
            <summary>
            Searches Places for Land owned by a specific user or group
            </summary>
            <param name="findFlags">One of the Values from the DirFindFlags struct, ie: AgentOwned, GroupOwned, etc.</param>
            <param name="groupID">LLUID of group you want to recieve land list for (You must be in group), or
            LLUID.Zero for Your own land</param>
            <returns>Transaction (Query) ID which can be associated with results from your request.</returns>
        </member>
        <member name="M:OpenMetaverse.DirectoryManager.StartPlacesSearch(OpenMetaverse.DirectoryManager.DirFindFlags,OpenMetaverse.Parcel.ParcelCategory,OpenMetaverse.UUID,OpenMetaverse.UUID)">
            <summary>
             Search Places 
            </summary>
            <param name="findFlags">One of the Values from the DirFindFlags struct, ie: AgentOwned, GroupOwned, etc.</param>
            <param name="searchCategory">One of the values from the SearchCategory Struct, ie: Any, Linden, Newcomer</param>
            <param name="groupID">LLUID of group you want to recieve results for</param>
            <param name="transactionID">Transaction (Query) ID which can be associated with results from your request.</param>
            <returns>Transaction (Query) ID which can be associated with results from your request.</returns>
        </member>
        <member name="M:OpenMetaverse.DirectoryManager.StartPlacesSearch(OpenMetaverse.DirectoryManager.DirFindFlags,OpenMetaverse.Parcel.ParcelCategory,System.String,System.String,OpenMetaverse.UUID,OpenMetaverse.UUID)">
            <summary>
            Search Places - All Options
            </summary>
            <param name="findFlags">One of the Values from the DirFindFlags struct, ie: AgentOwned, GroupOwned, etc.</param>
            <param name="searchCategory">One of the values from the SearchCategory Struct, ie: Any, Linden, Newcomer</param>
            <param name="searchText">String Text to search for</param>
            <param name="simulatorName">String Simulator Name to search in</param>
            <param name="groupID">LLUID of group you want to recieve results for</param>
            <param name="transactionID">Transaction (Query) ID which can be associated with results from your request.</param>
            <returns>Transaction (Query) ID which can be associated with results from your request.</returns>
        </member>
        <member name="M:OpenMetaverse.DirectoryManager.StartEventsSearch(System.String)">
            <summary>
            Search All Events with specifid searchText in all categories, includes Mature
            </summary>
            <param name="searchText">Text to search for</param>
            <returns>UUID of query to correlate results in callback.</returns>
        </member>
        <member name="M:OpenMetaverse.DirectoryManager.StartEventsSearch(System.String,System.Boolean,OpenMetaverse.DirectoryManager.EventCategories)">
            <summary>
            Search Events with Options to specify category and Mature events.
            </summary>
            <param name="searchText">Text to search for</param>
            <param name="showMature">true to include Mature events</param>
            <param name="category">category to search</param>
            <returns>UUID of query to correlate results in callback.</returns>
        </member>
        <member name="M:OpenMetaverse.DirectoryManager.StartEventsSearch(System.String,System.Boolean,System.String,System.UInt32,OpenMetaverse.DirectoryManager.EventCategories,OpenMetaverse.UUID)">
            <summary>
            Search Events - ALL options
            </summary>
            <param name="searchText">string text to search for e.g.: live music</param>
            <param name="showMature">Include mature events in results</param>
            <param name="eventDay">"u" for now and upcoming events, -or- number of days since/until event is scheduled
            For example "0" = Today, "1" = tomorrow, "2" = following day, "-1" = yesterday, etc.</param>
            <param name="queryStart">Page # to show, 0 for First Page</param>
            <param name="category">EventCategory event is listed under.</param>
            <param name="queryID">a UUID that can be used to track queries with results.</param>
            <returns>UUID of query to correlate results in callback.</returns>
        </member>
        <member name="M:OpenMetaverse.DirectoryManager.EventInfoRequest(System.UInt32)">
            <summary>Requests Event Details</summary>
            <param name="eventID">ID of Event returned from Places Search</param>
        </member>
        <member name="E:OpenMetaverse.DirectoryManager.OnClassifiedReply">
            <summary>
            
            </summary>
        </member>
        <member name="E:OpenMetaverse.DirectoryManager.OnDirLandReply">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenMetaverse.DirectoryManager.ClassifiedCategories">
            <summary>
            The different categories a classified ad can be placed in
            </summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.ClassifiedCategories.Any">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.ClassifiedCategories.Shopping">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.ClassifiedCategories.LandRental">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.ClassifiedCategories.PropertyRental">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.ClassifiedCategories.SpecialAttraction">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.ClassifiedCategories.NewProducts">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.ClassifiedCategories.Employment">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.ClassifiedCategories.Wanted">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.ClassifiedCategories.Service">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.ClassifiedCategories.Personal">
            <summary></summary>
        </member>
        <member name="T:OpenMetaverse.DirectoryManager.DirFindFlags">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.DirFindFlags.People">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.DirFindFlags.Online">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.DirFindFlags.Events">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.DirFindFlags.Groups">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.DirFindFlags.DateEvents">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.DirFindFlags.AgentOwned">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.DirFindFlags.ForSale">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.DirFindFlags.GroupOwned">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.DirFindFlags.DwellSort">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.DirFindFlags.PgSimsOnly">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.DirFindFlags.PicturesOnly">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.DirFindFlags.PgEventsOnly">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.DirFindFlags.MatureSimsOnly">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.DirFindFlags.SortAsc">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.DirFindFlags.PricesSort">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.DirFindFlags.PerMeterSort">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.DirFindFlags.AreaSort">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.DirFindFlags.NameSort">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.DirFindFlags.LimitByPrice">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.DirFindFlags.LimitByArea">
            <summary></summary>
        </member>
        <member name="T:OpenMetaverse.DirectoryManager.SearchTypeFlags">
            <summary>
            Land types to search dataserver for
            </summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.SearchTypeFlags.None">
            <summary>Do not search</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.SearchTypeFlags.Auction">
            <summary>Land which is currently up for auction</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.SearchTypeFlags.Mainland">
            <summary>Parcels which are on the mainland (Linden owned) continents</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.SearchTypeFlags.Estate">
            <summary>Parcels which are on privately owned simulators</summary>
        </member>
        <member name="T:OpenMetaverse.DirectoryManager.Classified">
            <summary>
            A classified ad on the grid
            </summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.Classified.ID">
            <summary>UUID for this ad, useful for looking up detailed
            information about it</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.Classified.Name">
            <summary>The title of this classified ad</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.Classified.Flags">
            <summary>Unknown</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.Classified.CreationDate">
            <summary>Creation date of the ad</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.Classified.ExpirationDate">
            <summary>Expiration date of the ad</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.Classified.Price">
            <summary>Price that was paid for this ad</summary>
        </member>
        <member name="T:OpenMetaverse.DirectoryManager.DirectoryParcel">
            <summary>
            A parcel retrieved from the dataserver such as results from the 
            "For-Sale" listings
            </summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.DirectoryParcel.ID">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.DirectoryParcel.Name">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.DirectoryParcel.ActualArea">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.DirectoryParcel.SalePrice">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.DirectoryParcel.Auction">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.DirectoryParcel.ForSale">
            <summary></summary>
        </member>
        <member name="T:OpenMetaverse.DirectoryManager.AgentSearchData">
            <summary>
            An Avatar returned from the dataserver
            </summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.AgentSearchData.Online">
            <summary>Online status of agent</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.AgentSearchData.FirstName">
            <summary>Agents first name</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.AgentSearchData.LastName">
            <summary>Agents last name</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.AgentSearchData.AgentID">
            <summary>Agents <seealso cref="T:OpenMetaverse.UUID"/></summary>
        </member>
        <member name="T:OpenMetaverse.DirectoryManager.GroupSearchData">
            <summary>
             Response to a "Groups" Search
            </summary>
        </member>
        <member name="T:OpenMetaverse.DirectoryManager.PlacesSearchData">
            <summary>
            Response to a "Places" Search
            Note: This is not DirPlacesReply
            </summary>
        </member>
        <member name="T:OpenMetaverse.DirectoryManager.EventsSearchData">
            <summary>
            Response to "Events" search
            </summary>
        </member>
        <member name="T:OpenMetaverse.DirectoryManager.EventInfo">
            <summary>
            an Event returned from the dataserver
            </summary>
        </member>
        <member name="T:OpenMetaverse.DirectoryManager.ClassifiedReplyCallback">
            <summary>
            
            </summary>
            <param name="classifieds"></param>
        </member>
        <member name="T:OpenMetaverse.DirectoryManager.DirLandReplyCallback">
            <summary>
            
            </summary>
            <param name="dirParcels"></param>
        </member>
        <member name="T:OpenMetaverse.DirectoryManager.DirPeopleReplyCallback">
            <summary>
            
            </summary>
            <param name="queryID"></param>
            <param name="matchedPeople"></param>
        </member>
        <member name="T:OpenMetaverse.DirectoryManager.DirGroupsReplyCallback">
            <summary>
            
            </summary>
            <param name="queryID"></param>
            <param name="matchedGroups"></param>
        </member>
        <member name="T:OpenMetaverse.DirectoryManager.PlacesReplyCallback">
            <summary>
            
            </summary>
            <param name="queryID"></param>
            <param name="matchedPlaces"></param>
        </member>
        <member name="T:OpenMetaverse.DirectoryManager.EventReplyCallback">
            <summary>
            
            </summary>
            <param name="queryID"></param>
            <param name="matchedEvents"></param>
        </member>
        <member name="T:OpenMetaverse.DirectoryManager.EventInfoCallback">
            <summary>
            
            </summary>
            <param name="matchedEvent"></param>
        </member>
        <member name="T:OpenMetaverse.EstateTools">
            <summary>
            Estate level administration and utilities
            </summary>
        </member>
        <member name="M:OpenMetaverse.EstateTools.#ctor(OpenMetaverse.GridClient)">
            <summary>
            Constructor for EstateTools class
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:OpenMetaverse.EstateTools.LandStatRequest(System.Int32,OpenMetaverse.EstateTools.LandStatReportType,System.UInt32,System.String)">
            <summary>
            Requests estate information such as top scripts and colliders
            </summary>
            <param name="parcelLocalID"></param>
            <param name="reportType"></param>
            <param name="requestFlags"></param>
            <param name="filter"></param>
        </member>
        <member name="M:OpenMetaverse.EstateTools.GetInfo">
            <summary>Requests estate settings, including estate manager and access/ban lists</summary>
        </member>
        <member name="M:OpenMetaverse.EstateTools.GetTopScripts">
            <summary>Requests the "Top Scripts" list for the current region</summary>
        </member>
        <member name="M:OpenMetaverse.EstateTools.GetTopColliders">
            <summary>Requests the "Top Colliders" list for the current region</summary>
        </member>
        <member name="M:OpenMetaverse.EstateTools.EstateOwnerMessageHandler(OpenMetaverse.Packets.Packet,OpenMetaverse.Simulator)">
            <summary></summary>
            <param name="packet"></param>
            <param name="simulator"></param>
        </member>
        <member name="M:OpenMetaverse.EstateTools.LandStatReplyHandler(OpenMetaverse.Packets.Packet,OpenMetaverse.Simulator)">
            <summary></summary>
            <param name="packet"></param>
            <param name="simulator"></param>
        </member>
        <member name="M:OpenMetaverse.EstateTools.EstateOwnerMessage(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Used for setting and retrieving various estate panel settings
            </summary>
            <param name="method">EstateOwnerMessage Method field</param>
            <param name="listParams">List of parameters to include</param>
        </member>
        <member name="M:OpenMetaverse.EstateTools.KickUser(OpenMetaverse.UUID)">
            <summary>
            Kick an avatar from an estate
            </summary>
            <param name="userID">Key of Agent to remove</param>
        </member>
        <member name="M:OpenMetaverse.EstateTools.BanUser(OpenMetaverse.UUID,System.Boolean)">
            <summary>
            Ban an avatar from an estate</summary>
            <param name="userID">Key of Agent to remove</param>
            <param name="allEstates">Ban user from this estate and all others owned by the estate owner</param>
        </member>
        <member name="M:OpenMetaverse.EstateTools.UnbanUser(OpenMetaverse.UUID,System.Boolean)">
            <summary>Unban an avatar from an estate</summary>
            <param name="userID">Key of Agent to remove</param>
             /// <param name="allEstates">Unban user from this estate and all others owned by the estate owner</param>
        </member>
        <member name="M:OpenMetaverse.EstateTools.EstateMessage(System.String)">
            <summary>
            Send a message dialog to everyone in an entire estate
            </summary>
            <param name="message">Message to send all users in the estate</param>
        </member>
        <member name="M:OpenMetaverse.EstateTools.SimulatorMessage(System.String)">
            <summary>
            Send a message dialog to everyone in a simulator
            </summary>
            <param name="message">Message to send all users in the simulator</param>
        </member>
        <member name="M:OpenMetaverse.EstateTools.TeleportHomeUser(OpenMetaverse.UUID)">
            <summary>
            Send an avatar back to their home location
            </summary>
            <param name="pest">Key of avatar to send home</param>
        </member>
        <member name="M:OpenMetaverse.EstateTools.RestartRegion">
            <summary>
            Begin the region restart process
            </summary>
        </member>
        <member name="M:OpenMetaverse.EstateTools.CancelRestart">
            <summary>
            Cancels a region restart
            </summary>
        </member>
        <member name="M:OpenMetaverse.EstateTools.SetRegionInfo(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Single,System.Single,System.Boolean)">
            <summary>Estate panel "Region" tab settings</summary>
        </member>
        <member name="M:OpenMetaverse.EstateTools.SetRegionDebug(System.Boolean,System.Boolean,System.Boolean)">
            <summary>Estate panel "Debug" tab settings</summary>
        </member>
        <member name="M:OpenMetaverse.EstateTools.UploadTerrain(System.Byte[],System.String)">
            <summary>
            Upload a terrain RAW file
            </summary>
            <param name="fileData">A byte array containing the encoded terrain data</param>
            <param name="fileName">The name of the file being uploaded</param>
            <returns>The Id of the transfer request</returns>
        </member>
        <member name="E:OpenMetaverse.EstateTools.OnGetTopColliders">
            <summary>Triggered upon a successful .GetTopColliders()</summary>
        </member>
        <member name="E:OpenMetaverse.EstateTools.OnGetTopScripts">
            <summary>Triggered upon a successful .GetTopScripts()</summary>
        </member>
        <member name="E:OpenMetaverse.EstateTools.OnGetEstateUpdateInfo">
            <summary>Returned, along with other info, upon a successful .GetInfo()</summary>
        </member>
        <member name="E:OpenMetaverse.EstateTools.OnGetEstateManagers">
            <summary>Returned, along with other info, upon a successful .GetInfo()</summary>
        </member>
        <member name="E:OpenMetaverse.EstateTools.OnGetEstateBans">
            <summary>Returned, along with other info, upon a successful .GetInfo()</summary>
        </member>
        <member name="E:OpenMetaverse.EstateTools.OnGetAllowedGroups">
            <summary>Returned, along with other info, upon a successful .GetInfo()</summary>
        </member>
        <member name="E:OpenMetaverse.EstateTools.OnGetAllowedUsers">
            <summary>Returned, along with other info, upon a successful .GetInfo()</summary>
        </member>
        <member name="E:OpenMetaverse.EstateTools.OnGetCovenant">
            <summary>Triggered upon a successful .RequestCovenant()</summary>
        </member>
        <member name="T:OpenMetaverse.EstateTools.GetTopCollidersReply">
            <summary>
            Triggered on LandStatReply when the report type is for "top colliders"
            </summary>
            <param name="objectCount"></param>
            <param name="Tasks"></param>
        </member>
        <member name="T:OpenMetaverse.EstateTools.GetTopScriptsReply">
            <summary>
            Triggered on LandStatReply when the report type is for "top scripts"
            </summary>
            <param name="objectCount"></param>
            <param name="Tasks"></param>
        </member>
        <member name="T:OpenMetaverse.EstateTools.EstateManagersReply">
            <summary>
            Triggered when the list of estate managers is received for the current estate
            </summary>
            <param name="managers"></param>
            <param name="count"></param>
            <param name="estateID"></param>
        </member>
        <member name="T:OpenMetaverse.EstateTools.EstateUpdateInfoReply">
            <summary>
            FIXME - Enumerate all params from EstateOwnerMessage packet
            </summary>
            <param name="denyNoPaymentInfo"></param>
            <param name="estateID"></param>
            <param name="estateName"></param>
            <param name="estateOwner"></param>
        </member>
        <member name="T:OpenMetaverse.EstateTools.EstateTask">
            <summary>Describes tasks returned in LandStatReply</summary>
        </member>
        <member name="T:OpenMetaverse.EstateTools.LandStatReportType">
            <summary>Used in the ReportType field of a LandStatRequest</summary>
        </member>
        <member name="T:OpenMetaverse.EstateTools.EstateAccessDelta">
            <summary>Used by EstateOwnerMessage packets</summary>
        </member>
        <member name="T:OpenMetaverse.EstateTools.GroundTextureRegion">
            <summary>Used by GroundTextureSettings</summary>
        </member>
        <member name="T:OpenMetaverse.EstateTools.GroundTextureSettings">
            <summary>Ground texture settings for each corner of the region</summary>
        </member>
        <member name="T:OpenMetaverse.PacketEventDictionary">
            <summary>
            Registers, unregisters, and fires events generated by incoming packets
            </summary>
        </member>
        <member name="F:OpenMetaverse.PacketEventDictionary.Client">
            <summary>Reference to the GridClient object</summary>
        </member>
        <member name="M:OpenMetaverse.PacketEventDictionary.#ctor(OpenMetaverse.GridClient)">
            <summary>
            Default constructor
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:OpenMetaverse.PacketEventDictionary.RegisterEvent(OpenMetaverse.Packets.PacketType,OpenMetaverse.NetworkManager.PacketCallback)">
            <summary>
            Register an event handler
            </summary>
            <remarks>Use PacketType.Default to fire this event on every 
            incoming packet</remarks>
            <param name="packetType">Packet type to register the handler for</param>
            <param name="eventHandler">Callback to be fired</param>
        </member>
        <member name="M:OpenMetaverse.PacketEventDictionary.UnregisterEvent(OpenMetaverse.Packets.PacketType,OpenMetaverse.NetworkManager.PacketCallback)">
            <summary>
            Unregister an event handler
            </summary>
            <param name="packetType">Packet type to unregister the handler for</param>
            <param name="eventHandler">Callback to be unregistered</param>
        </member>
        <member name="M:OpenMetaverse.PacketEventDictionary.RaiseEvent(OpenMetaverse.Packets.PacketType,OpenMetaverse.Packets.Packet,OpenMetaverse.Simulator)">
            <summary>
            Fire the events registered for this packet type synchronously
            </summary>
            <param name="packetType">Incoming packet type</param>
            <param name="packet">Incoming packet</param>
            <param name="simulator">Simulator this packet was received from</param>
        </member>
        <member name="M:OpenMetaverse.PacketEventDictionary.BeginRaiseEvent(OpenMetaverse.Packets.PacketType,OpenMetaverse.Packets.Packet,OpenMetaverse.Simulator)">
            <summary>
            Fire the events registered for this packet type asynchronously
            </summary>
            <param name="packetType">Incoming packet type</param>
            <param name="packet">Incoming packet</param>
            <param name="simulator">Simulator this packet was received from</param>
        </member>
        <member name="T:OpenMetaverse.PacketEventDictionary.PacketCallbackWrapper">
            <summary>
            Object that is passed to worker threads in the ThreadPool for
            firing packet callbacks
            </summary>
        </member>
        <member name="F:OpenMetaverse.PacketEventDictionary.PacketCallbackWrapper.Callback">
            <summary>Callback to fire for this packet</summary>
        </member>
        <member name="F:OpenMetaverse.PacketEventDictionary.PacketCallbackWrapper.Simulator">
            <summary>Reference to the simulator that this packet came from</summary>
        </member>
        <member name="F:OpenMetaverse.PacketEventDictionary.PacketCallbackWrapper.Packet">
            <summary>The packet that needs to be processed</summary>
        </member>
        <member name="T:OpenMetaverse.CapsEventDictionary">
            <summary>
            Registers, unregisters, and fires events generated by the Capabilities
            event queue
            </summary>
        </member>
        <member name="F:OpenMetaverse.CapsEventDictionary.Client">
            <summary>Reference to the GridClient object</summary>
        </member>
        <member name="M:OpenMetaverse.CapsEventDictionary.#ctor(OpenMetaverse.GridClient)">
            <summary>
            Default constructor
            </summary>
            <param name="client">Reference to the GridClient object</param>
        </member>
        <member name="M:OpenMetaverse.CapsEventDictionary.RegisterEvent(System.String,OpenMetaverse.Caps.EventQueueCallback)">
            <summary>
            Register an event handler
            </summary>
            <remarks>Use String.Empty to fire this event on every CAPS event</remarks>
            <param name="capsEvent">Capability event name to register the 
            handler for</param>
            <param name="eventHandler">Callback to fire</param>
        </member>
        <member name="M:OpenMetaverse.CapsEventDictionary.UnregisterEvent(System.String,OpenMetaverse.Caps.EventQueueCallback)">
            <summary>
            
            </summary>
            <param name="capsEvent">Capability event name unregister the 
            handler for</param>
            <param name="eventHandler">Callback to unregister</param>
        </member>
        <member name="M:OpenMetaverse.CapsEventDictionary.RaiseEvent(System.String,OpenMetaverse.StructuredData.OSD,OpenMetaverse.Simulator)">
            <summary>
            Fire the events registered for this event type synchronously
            </summary>
            <param name="capsEvent">Capability name</param>
            <param name="body">Decoded event body</param>
            <param name="simulator">Reference to the simulator that 
            generated this event</param>
        </member>
        <member name="M:OpenMetaverse.CapsEventDictionary.BeginRaiseEvent(System.String,OpenMetaverse.StructuredData.OSD,OpenMetaverse.Simulator)">
            <summary>
            Fire the events registered for this event type asynchronously
            </summary>
            <param name="capsEvent">Capability name</param>
            <param name="body">Decoded event body</param>
            <param name="simulator">Reference to the simulator that 
            generated this event</param>
        </member>
        <member name="T:OpenMetaverse.CapsEventDictionary.CapsCallbackWrapper">
            <summary>
            Object that is passed to worker threads in the ThreadPool for
            firing CAPS callbacks
            </summary>
        </member>
        <member name="F:OpenMetaverse.CapsEventDictionary.CapsCallbackWrapper.Callback">
            <summary>Callback to fire for this packet</summary>
        </member>
        <member name="F:OpenMetaverse.CapsEventDictionary.CapsCallbackWrapper.CapsEvent">
            <summary>Name of the CAPS event</summary>
        </member>
        <member name="F:OpenMetaverse.CapsEventDictionary.CapsCallbackWrapper.Body">
            <summary>Decoded body of the CAPS event</summary>
        </member>
        <member name="F:OpenMetaverse.CapsEventDictionary.CapsCallbackWrapper.Simulator">
            <summary>Reference to the simulator that generated this event</summary>
        </member>
        <member name="T:OpenMetaverse.FriendRights">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenMetaverse.FriendRights.None">
            <summary>The avatar has no rights</summary>
        </member>
        <member name="F:OpenMetaverse.FriendRights.CanSeeOnline">
            <summary>The avatar can see the online status of the target avatar</summary>
        </member>
        <member name="F:OpenMetaverse.FriendRights.CanSeeOnMap">
            <summary>The avatar can see the location of the target avatar on the map</summary>
        </member>
        <member name="F:OpenMetaverse.FriendRights.CanModifyObjects">
            <summary>The avatar can modify the ojects of the target avatar </summary>
        </member>
        <member name="T:OpenMetaverse.FriendInfo">
            <summary>
            This class holds information about an avatar in the friends list.  There are two ways 
            to interface to this class.  The first is through the set of boolean properties.  This is the typical
            way clients of this class will use it.  The second interface is through two bitflag properties,
            TheirFriendsRights and MyFriendsRights
            </summary>
        </member>
        <member name="M:OpenMetaverse.FriendInfo.#ctor(OpenMetaverse.UUID,OpenMetaverse.FriendRights,OpenMetaverse.FriendRights)">
            <summary>
            Used internally when building the initial list of friends at login time
            </summary>
            <param name="id">System ID of the avatar being prepesented</param>
            <param name="theirRights">Rights the friend has to see you online and to modify your objects</param>
            <param name="myRights">Rights you have to see your friend online and to modify their objects</param>
        </member>
        <member name="M:OpenMetaverse.FriendInfo.ToString">
            <summary>
            FriendInfo represented as a string
            </summary>
            <returns>A string reprentation of both my rights and my friends rights</returns>
        </member>
        <member name="P:OpenMetaverse.FriendInfo.UUID">
            <summary>
            System ID of the avatar
            </summary>
        </member>
        <member name="P:OpenMetaverse.FriendInfo.Name">
            <summary>
            full name of the avatar
            </summary>
        </member>
        <member name="P:OpenMetaverse.FriendInfo.IsOnline">
            <summary>
            True if the avatar is online
            </summary>
        </member>
        <member name="P:OpenMetaverse.FriendInfo.CanSeeMeOnline">
            <summary>
            True if the friend can see if I am online
            </summary>
        </member>
        <member name="P:OpenMetaverse.FriendInfo.CanSeeMeOnMap">
            <summary>
            True if the friend can see me on the map 
            </summary>
        </member>
        <member name="P:OpenMetaverse.FriendInfo.CanModifyMyObjects">
            <summary>
            True if the freind can modify my objects
            </summary>
        </member>
        <member name="P:OpenMetaverse.FriendInfo.CanSeeThemOnline">
            <summary>
            True if I can see if my friend is online
            </summary>
        </member>
        <member name="P:OpenMetaverse.FriendInfo.CanSeeThemOnMap">
            <summary>
            True if I can see if my friend is on the map
            </summary>
        </member>
        <member name="P:OpenMetaverse.FriendInfo.CanModifyTheirObjects">
            <summary>
            True if I can modify my friend's objects
            </summary>
        </member>
        <member name="P:OpenMetaverse.FriendInfo.TheirFriendRights">
            <summary>
            My friend's rights represented as bitmapped flags
            </summary>
        </member>
        <member name="P:OpenMetaverse.FriendInfo.MyFriendRights">
            <summary>
            My rights represented as bitmapped flags
            </summary>
        </member>
        <member name="T:OpenMetaverse.FriendsManager">
            <summary>
            This class is used to add and remove avatars from your friends list and to manage their permission.  
            </summary>
        </member>
        <member name="F:OpenMetaverse.FriendsManager.FriendList">
            <summary>
            A dictionary of key/value pairs containing known friends of this avatar. 
            
            The Key is the <seealso cref="T:OpenMetaverse.UUID"/> of the friend, the value is a <seealso cref="T:OpenMetaverse.FriendInfo"/>
            object that contains detailed information including permissions you have and have given to the friend
            </summary>
        </member>
        <member name="F:OpenMetaverse.FriendsManager.FriendRequests">
            <summary>
            A Dictionary of key/value pairs containing current pending frienship offers.
            
            The key is the <seealso cref="T:OpenMetaverse.UUID"/> of the avatar making the request, 
            the value is the <seealso cref="T:OpenMetaverse.UUID"/> of the request which is used to accept
            or decline the friendship offer
            </summary>
        </member>
        <member name="M:OpenMetaverse.FriendsManager.#ctor(OpenMetaverse.GridClient)">
            <summary>
            Internal constructor
            </summary>
            <param name="client">A reference to the GridClient Object</param>
        </member>
        <member name="M:OpenMetaverse.FriendsManager.AcceptFriendship(OpenMetaverse.UUID,OpenMetaverse.UUID)">
            <summary>
            Accept a friendship request
            </summary>
            <param name="fromAgentID">agentID of avatatar to form friendship with</param>
            <param name="imSessionID">imSessionID of the friendship request message</param>
        </member>
        <member name="M:OpenMetaverse.FriendsManager.DeclineFriendship(OpenMetaverse.UUID,OpenMetaverse.UUID)">
            <summary>
            Decline a friendship request
            </summary>
            <param name="fromAgentID"><seealso cref="T:OpenMetaverse.UUID"/> of friend</param>
            <param name="imSessionID">imSessionID of the friendship request message</param>
        </member>
        <member name="M:OpenMetaverse.FriendsManager.OfferFriendship(OpenMetaverse.UUID)">
            <summary>
            Offer friendship to an avatar.
            </summary>
            <param name="agentID">System ID of the avatar you are offering friendship to</param>
        </member>
        <member name="M:OpenMetaverse.FriendsManager.TerminateFriendship(OpenMetaverse.UUID)">
            <summary>
            Terminate a friendship with an avatar
            </summary>
            <param name="agentID">System ID of the avatar you are terminating the friendship with</param>
        </member>
        <member name="M:OpenMetaverse.FriendsManager.TerminateFriendshipHandler(OpenMetaverse.Packets.Packet,OpenMetaverse.Simulator)">
            <summary>
            Fired when another friend terminates friendship. We need to remove them from
            our cached list.
            </summary>
            <param name="packet"></param>
            <param name="simulator"></param>
        </member>
        <member name="M:OpenMetaverse.FriendsManager.GrantRights(OpenMetaverse.UUID,OpenMetaverse.FriendRights)">
            <summary>
            Change the rights of a friend avatar.
            </summary>
            <param name="friendID">the <seealso cref="T:OpenMetaverse.UUID"/> of the friend</param>
            <param name="rights">the new rights to give the friend</param>
            <remarks>This method will implicitly set the rights to those passed in the rights parameter.</remarks>
        </member>
        <member name="M:OpenMetaverse.FriendsManager.MapFriend(OpenMetaverse.UUID)">
            <summary>
            Use to map a friends location on the grid.
            </summary>
            <param name="friendID">Friends UUID to find</param>
            <remarks><seealso cref="E:OnFriendFound"/></remarks>
        </member>
        <member name="M:OpenMetaverse.FriendsManager.TrackFriend(OpenMetaverse.UUID)">
            <summary>
            Use to track a friends movement on the grid
            </summary>
            <param name="friendID">Friends Key</param>
        </member>
        <member name="M:OpenMetaverse.FriendsManager.Network_OnConnect(System.Object)">
            <summary>
            Called when a connection to the SL server is established.  The list of friend avatars 
            is populated from XML returned by the login server.  That list contains the avatar's id 
            and right, but no names.  Here is where those names are requested.
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:OpenMetaverse.FriendsManager.Avatars_OnAvatarNames(System.Collections.Generic.Dictionary{OpenMetaverse.UUID,System.String})">
            <summary>
            This handles the asynchronous response of a RequestAvatarNames call.
            </summary>
            <param name="names">names cooresponding to the the list of IDs sent the the RequestAvatarNames call.</param>
        </member>
        <member name="M:OpenMetaverse.FriendsManager.OnlineNotificationHandler(OpenMetaverse.Packets.Packet,OpenMetaverse.Simulator)">
            <summary>
            Handle notifications sent when a friends has come online.
            </summary>
            <param name="packet"></param>
            <param name="simulator"></param>
        </member>
        <member name="M:OpenMetaverse.FriendsManager.OfflineNotificationHandler(OpenMetaverse.Packets.Packet,OpenMetaverse.Simulator)">
            <summary>
            Handle notifications sent when a friends has gone offline.
            </summary>
            <param name="packet"></param>
            <param name="simulator"></param>
        </member>
        <member name="M:OpenMetaverse.FriendsManager.ChangeUserRightsHandler(OpenMetaverse.Packets.Packet,OpenMetaverse.Simulator)">
            <summary>
            Handle notifications sent when a friend rights change.  This notification is also received
            when my own rights change.
            </summary>
            <param name="packet"></param>
            <param name="simulator"></param>
        </member>
        <member name="M:OpenMetaverse.FriendsManager.OnFindAgentReplyHandler(OpenMetaverse.Packets.Packet,OpenMetaverse.Simulator)">
            <summary>
            Handle friend location updates
            </summary>
            <param name="packet">The Packet</param>
            <param name="simulator">The Simulator</param>
        </member>
        <member name="M:OpenMetaverse.FriendsManager.MainAvatar_InstantMessage(OpenMetaverse.InstantMessage,OpenMetaverse.Simulator)">
            <summary>
            Handles relevant messages from the server encapsulated in instant messages.
            </summary>
            <param name="im">InstantMessage object containing encapsalated instant message</param>
            <param name="simulator">Originating Simulator</param>
        </member>
        <member name="T:OpenMetaverse.FriendsManager.FriendOnlineEvent">
            <summary>
            Triggered when an avatar in your friends list comes online
            </summary>
            <param name="friend"> System ID of the avatar</param>
        </member>
        <member name="T:OpenMetaverse.FriendsManager.FriendOfflineEvent">
            <summary>
            Triggered when an avatar in your friends list goes offline
            </summary>
            <param name="friend"> System ID of the avatar</param>
        </member>
        <member name="T:OpenMetaverse.FriendsManager.FriendRightsEvent">
            <summary>
            Triggered in response to a call to the FriendRights() method, or when a friend changes your rights
            </summary>
            <param name="friend"> System ID of the avatar you changed the right of</param>
        </member>
        <member name="T:OpenMetaverse.FriendsManager.FriendNamesReceived">
            <summary>
            Triggered when names on the friend list are received after the initial request upon login
            </summary>
            <param name="names"></param>
        </member>
        <member name="T:OpenMetaverse.FriendsManager.FriendshipOfferedEvent">
            <summary>
            Triggered when someone offers you friendship
            </summary>
            <param name="agentID">System ID of the agent offering friendship</param>
            <param name="agentName">full name of the agent offereing friendship</param>
            <param name="imSessionID">session ID need when accepting/declining the offer</param>
            <returns>Return true to accept the friendship, false to deny it</returns>
        </member>
        <member name="T:OpenMetaverse.FriendsManager.FriendshipResponseEvent">
            <summary>
            Trigger when your friendship offer has been accepted or declined
            </summary>
            <param name="agentID">System ID of the avatar who accepted your friendship offer</param>
            <param name="agentName">Full name of the avatar who accepted your friendship offer</param>
            <param name="accepted">Whether the friendship request was accepted or declined</param>
        </member>
        <member name="T:OpenMetaverse.FriendsManager.FriendshipTerminatedEvent">
            <summary>
            Trigger when someone terminates your friendship.
            </summary>
            <param name="agentID">System ID of the avatar who terminated your friendship</param>
            <param name="agentName">Full name of the avatar who terminated your friendship</param>
        </member>
        <member name="T:OpenMetaverse.FriendsManager.FriendFoundEvent">
            <summary>
            Triggered in response to a FindFriend request
            </summary>
            <param name="agentID">Friends Key</param>
            <param name="regionHandle">region handle friend is in</param>
            <param name="location">X/Y location of friend</param>
        </member>
        <member name="T:OpenMetaverse.GridClient">
            <summary>
            Main class to expose grid functionality to clients. All of the
            classes needed for sending and receiving data are accessible through 
            this class.
            </summary>
            <example>
            <code>
            // Example minimum code required to instantiate class and 
            // connect to a simulator.
            using System;
            using System.Collections.Generic;
            using System.Text;
            using OpenMetaverse;
            
            namespace FirstBot
            {
                class Bot
                {
                    public static GridClient Client;
                    static void Main(string[] args)
                    {
                        Client = new GridClient(); // instantiates the GridClient class
                                                   // to the global Client object
                        // Login to Simulator
                        Client.Network.Login("FirstName", "LastName", "Password", "FirstBot", "1.0");
                        // Wait for a Keypress
                        Console.ReadLine();
                        // Logout of simulator
                        Client.Network.Logout();
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="F:OpenMetaverse.GridClient.Network">
            <summary>Networking subsystem</summary>
        </member>
        <member name="F:OpenMetaverse.GridClient.Settings">
            <summary>Settings class including constant values and changeable
            parameters for everything</summary>
        </member>
        <member name="F:OpenMetaverse.GridClient.Parcels">
            <summary>Parcel (subdivided simulator lots) subsystem</summary>
        </member>
        <member name="F:OpenMetaverse.GridClient.Self">
            <summary>Our own avatars subsystem</summary>
        </member>
        <member name="F:OpenMetaverse.GridClient.Avatars">
            <summary>Other avatars subsystem</summary>
        </member>
        <member name="F:OpenMetaverse.GridClient.Friends">
            <summary>Friends list subsystem</summary>
        </member>
        <member name="F:OpenMetaverse.GridClient.Grid">
            <summary>Grid (aka simulator group) subsystem</summary>
        </member>
        <member name="F:OpenMetaverse.GridClient.Objects">
            <summary>Object subsystem</summary>
        </member>
        <member name="F:OpenMetaverse.GridClient.Groups">
            <summary>Group subsystem</summary>
        </member>
        <member name="F:OpenMetaverse.GridClient.Assets">
            <summary>Asset subsystem</summary>
        </member>
        <member name="F:OpenMetaverse.GridClient.Appearance">
            <summary>Appearance subsystem</summary>
        </member>
        <member name="F:OpenMetaverse.GridClient.Inventory">
            <summary>Inventory subsystem</summary>
        </member>
        <member name="F:OpenMetaverse.GridClient.Directory">
            <summary>Directory searches including classifieds, people, land 
            sales, etc</summary>
        </member>
        <member name="F:OpenMetaverse.GridClient.Terrain">
            <summary>Handles land, wind, and cloud heightmaps</summary>
        </member>
        <member name="F:OpenMetaverse.GridClient.Sound">
            <summary>Handles sound-related networking</summary>
        </member>
        <member name="F:OpenMetaverse.GridClient.Throttle">
            <summary>Throttling total bandwidth usage, or allocating bandwidth
            for specific data stream types</summary>
        </member>
        <member name="M:OpenMetaverse.GridClient.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenMetaverse.GridClient.ToString">
            <summary>
            Return the full name of this instance
            </summary>
            <returns>Client avatars full name</returns>
        </member>
        <member name="T:OpenMetaverse.GridLayerType">
            <summary>
            Map layer request type
            </summary>
        </member>
        <member name="F:OpenMetaverse.GridLayerType.Objects">
            <summary>Objects and terrain are shown</summary>
        </member>
        <member name="F:OpenMetaverse.GridLayerType.Terrain">
            <summary>Only the terrain is shown, no objects</summary>
        </member>
        <member name="F:OpenMetaverse.GridLayerType.LandForSale">
            <summary>Overlay showing land for sale and for auction</summary>
        </member>
        <member name="T:OpenMetaverse.GridItemType">
            <summary>
            Type of grid item, such as telehub, event, populator location, etc.
            </summary>
        </member>
        <member name="F:OpenMetaverse.GridItemType.Telehub">
            <summary>Telehub</summary>
        </member>
        <member name="F:OpenMetaverse.GridItemType.PgEvent">
            <summary>PG rated event</summary>
        </member>
        <member name="F:OpenMetaverse.GridItemType.MatureEvent">
            <summary>Mature rated event</summary>
        </member>
        <member name="F:OpenMetaverse.GridItemType.Popular">
            <summary>Popular location</summary>
        </member>
        <member name="F:OpenMetaverse.GridItemType.AgentLocations">
            <summary>Locations of avatar groups in a region</summary>
        </member>
        <member name="F:OpenMetaverse.GridItemType.LandForSale">
            <summary>Land for sale</summary>
        </member>
        <member name="F:OpenMetaverse.GridItemType.Classified">
            <summary>Classified ad</summary>
        </member>
        <member name="T:OpenMetaverse.GridRegion">
            <summary>
            Information about a region on the grid map
            </summary>
        </member>
        <member name="F:OpenMetaverse.GridRegion.X">
            <summary>Sim X position on World Map</summary>
        </member>
        <member name="F:OpenMetaverse.GridRegion.Y">
            <summary>Sim Y position on World Map</summary>
        </member>
        <member name="F:OpenMetaverse.GridRegion.Name">
            <summary>Sim Name (NOTE: In lowercase!)</summary>
        </member>
        <member name="F:OpenMetaverse.GridRegion.Access">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.GridRegion.RegionFlags">
            <summary>Appears to always be zero (None)</summary>
        </member>
        <member name="F:OpenMetaverse.GridRegion.WaterHeight">
            <summary>Sim's defined Water Height</summary>
        </member>
        <member name="F:OpenMetaverse.GridRegion.Agents">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.GridRegion.MapImageID">
            <summary>UUID of the World Map image</summary>
        </member>
        <member name="F:OpenMetaverse.GridRegion.RegionHandle">
            <summary>Unique identifier for this region, a combination of the X 
            and Y position</summary>
        </member>
        <member name="M:OpenMetaverse.GridRegion.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenMetaverse.GridRegion.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenMetaverse.GridRegion.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:OpenMetaverse.GridLayer">
            <summary>
            Visual chunk of the grid map
            </summary>
        </member>
        <member name="T:OpenMetaverse.GridManager">
            <summary>
            Manages grid-wide tasks such as the world map
            </summary>
        </member>
        <member name="F:OpenMetaverse.GridManager.Regions">
            <summary>A dictionary of all the regions, indexed by region name</summary>
        </member>
        <member name="F:OpenMetaverse.GridManager.RegionsByHandle">
            <summary>A dictionary of all the regions, indexed by region handle</summary>
        </member>
        <member name="M:OpenMetaverse.GridManager.#ctor(OpenMetaverse.GridClient)">
            <summary>
            Constructor
            </summary>
            <param name="client">Instance of GridClient object to associate with this GridManager instance</param>
        </member>
        <member name="M:OpenMetaverse.GridManager.RequestMapLayer(OpenMetaverse.GridLayerType)">
            <summary>
            
            </summary>
            <param name="layer"></param>
        </member>
        <member name="M:OpenMetaverse.GridManager.RequestMapRegion(System.String,OpenMetaverse.GridLayerType)">
            <summary>
            
            </summary>
            <param name="regionName"></param>
            <param name="layer"></param>
        </member>
        <member name="M:OpenMetaverse.GridManager.RequestMapBlocks(OpenMetaverse.GridLayerType,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.Boolean)">
            <summary>
            
            </summary>
            <param name="layer"></param>
            <param name="minX"></param>
            <param name="minY"></param>
            <param name="maxX"></param>
            <param name="maxY"></param>
            <param name="returnNonExistent"></param>
        </member>
        <member name="M:OpenMetaverse.GridManager.MapItems(System.UInt64,OpenMetaverse.GridItemType,OpenMetaverse.GridLayerType,System.Int32)">
            <summary>
            
            </summary>
            <param name="regionHandle"></param>
            <param name="item"></param>
            <param name="layer"></param>
            <param name="timeoutMS"></param>
            <returns></returns>
        </member>
        <member name="M:OpenMetaverse.GridManager.RequestMapItems(System.UInt64,OpenMetaverse.GridItemType,OpenMetaverse.GridLayerType)">
            <summary>
            
            </summary>
            <param name="regionHandle"></param>
            <param name="item"></param>
            <param name="layer"></param>
        </member>
        <member name="M:OpenMetaverse.GridManager.RequestMainlandSims(OpenMetaverse.GridLayerType)">
            <summary>
            Request data for all mainland (Linden managed) simulators
            </summary>
        </member>
        <member name="M:OpenMetaverse.GridManager.RequestRegionHandle(OpenMetaverse.UUID)">
            <summary>
            Request the region handle for the specified region UUID
            </summary>
            <param name="regionID">UUID of the region to look up</param>
        </member>
        <member name="M:OpenMetaverse.GridManager.GetGridRegion(System.String,OpenMetaverse.GridLayerType,OpenMetaverse.GridRegion@)">
            <summary>
            Get grid region information using the region name, this function
            will block until it can find the region or gives up
            </summary>
            <param name="name">Name of sim you're looking for</param>
            <param name="layer">Layer that you are requesting</param>
            <param name="region">Will contain a GridRegion for the sim you're
            looking for if successful, otherwise an empty structure</param>
            <returns>True if the GridRegion was successfully fetched, otherwise
            false</returns>
        </member>
        <member name="M:OpenMetaverse.GridManager.MapBlockReplyHandler(OpenMetaverse.Packets.Packet,OpenMetaverse.Simulator)">
            <summary>
            Populate Grid info based on data from MapBlockReplyPacket
            </summary>
            <param name="packet">Incoming MapBlockReplyPacket packet</param>
            <param name="simulator">Unused</param>
        </member>
        <member name="M:OpenMetaverse.GridManager.TimeMessageHandler(OpenMetaverse.Packets.Packet,OpenMetaverse.Simulator)">
            <summary>
            Get sim time from the appropriate packet
            </summary>
            <param name="packet">Incoming SimulatorViewerTimeMessagePacket from SL</param>
            <param name="simulator">Unused</param>
        </member>
        <member name="E:OpenMetaverse.GridManager.OnCoarseLocationUpdate">
            <summary>Triggered when coarse locations (minimap dots) are updated by the simulator</summary>
        </member>
        <member name="E:OpenMetaverse.GridManager.OnGridRegion">
            <summary>Triggered when a new region is discovered through GridManager</summary>
        </member>
        <member name="E:OpenMetaverse.GridManager.OnGridLayer">
            <summary></summary>
        </member>
        <member name="E:OpenMetaverse.GridManager.OnGridItems">
            <summary></summary>
        </member>
        <member name="E:OpenMetaverse.GridManager.OnRegionHandleReply">
            <summary></summary>
        </member>
        <member name="P:OpenMetaverse.GridManager.SunPhase">
            <summary>Unknown</summary>
        </member>
        <member name="P:OpenMetaverse.GridManager.SunDirection">
            <summary>Current direction of the sun</summary>
        </member>
        <member name="P:OpenMetaverse.GridManager.SunAngVelocity">
            <summary>Current angular velocity of the sun</summary>
        </member>
        <member name="P:OpenMetaverse.GridManager.WorldTime">
            <summary>Current world time</summary>
        </member>
        <member name="T:OpenMetaverse.GridManager.CoarseLocationUpdateCallback">
            <summary>
            
            </summary>
            <param name="sim"></param>
            <param name="newEntries"></param>
            <param name="removedEntries"></param>
        </member>
        <member name="T:OpenMetaverse.GridManager.GridRegionCallback">
            <summary>
            
            </summary>
            <param name="region"></param>
        </member>
        <member name="T:OpenMetaverse.GridManager.GridLayerCallback">
            <summary>
            
            </summary>
            <param name="layer"></param>
        </member>
        <member name="T:OpenMetaverse.GridManager.GridItemsCallback">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="items"></param>
        </member>
        <member name="T:OpenMetaverse.GridManager.RegionHandleReplyCallback">
            <summary>
            
            </summary>
            <param name="regionID"></param>
            <param name="regionHandle"></param>
        </member>
        <member name="T:OpenMetaverse.GroupMember">
            <summary>
            Avatar group management
            </summary>
        </member>
        <member name="F:OpenMetaverse.GroupMember.ID">
            <summary>Key of Group Member</summary>
        </member>
        <member name="F:OpenMetaverse.GroupMember.Contribution">
            <summary>Total land contribution</summary>
        </member>
        <member name="F:OpenMetaverse.GroupMember.OnlineStatus">
            <summary>Online status information</summary>
        </member>
        <member name="F:OpenMetaverse.GroupMember.Powers">
            <summary>Abilities that the Group Member has</summary>
        </member>
        <member name="F:OpenMetaverse.GroupMember.Title">
            <summary>Current group title</summary>
        </member>
        <member name="F:OpenMetaverse.GroupMember.IsOwner">
            <summary>Is a group owner</summary>
        </member>
        <member name="T:OpenMetaverse.GroupRole">
            <summary>
            Role manager for a group
            </summary>
        </member>
        <member name="F:OpenMetaverse.GroupRole.GroupID">
            <summary>Key of the group</summary>
        </member>
        <member name="F:OpenMetaverse.GroupRole.ID">
            <summary>Key of Role</summary>
        </member>
        <member name="F:OpenMetaverse.GroupRole.Name">
            <summary>Name of Role</summary>
        </member>
        <member name="F:OpenMetaverse.GroupRole.Title">
            <summary>Group Title associated with Role</summary>
        </member>
        <member name="F:OpenMetaverse.GroupRole.Description">
            <summary>Description of Role</summary>
        </member>
        <member name="F:OpenMetaverse.GroupRole.Powers">
            <summary>Abilities Associated with Role</summary>
        </member>
        <member name="M:OpenMetaverse.GroupRole.ToString">
            <summary>Returns the role's title</summary>
            <returns>The role's title</returns>
        </member>
        <member name="T:OpenMetaverse.GroupTitle">
            <summary>
            Class to represent Group Title
            </summary>
        </member>
        <member name="F:OpenMetaverse.GroupTitle.GroupID">
            <summary>Key of the group</summary>
        </member>
        <member name="F:OpenMetaverse.GroupTitle.Title">
            <summary>Group Title</summary>
        </member>
        <member name="F:OpenMetaverse.GroupTitle.Selected">
            <summary>Whether title is Active</summary>
        </member>
        <member name="T:OpenMetaverse.Group">
            <summary>
            Represents a group on the grid
            </summary>
        </member>
        <member name="F:OpenMetaverse.Group.ID">
            <summary>Key of Group</summary>
        </member>
        <member name="F:OpenMetaverse.Group.InsigniaID">
            <summary>Key of Group Insignia</summary>
        </member>
        <member name="F:OpenMetaverse.Group.FounderID">
            <summary>Key of Group Founder</summary>
        </member>
        <member name="F:OpenMetaverse.Group.OwnerRole">
            <summary>Key of Group Role for Owners</summary>
        </member>
        <member name="F:OpenMetaverse.Group.Name">
            <summary>Name of Group</summary>
        </member>
        <member name="F:OpenMetaverse.Group.Charter">
            <summary>Text of Group Charter</summary>
        </member>
        <member name="F:OpenMetaverse.Group.MemberTitle">
            <summary>Title of "everyone" role</summary>
        </member>
        <member name="F:OpenMetaverse.Group.OpenEnrollment">
            <summary>Is the group open for enrolement to everyone</summary>
        </member>
        <member name="F:OpenMetaverse.Group.ShowInList">
            <summary>Will group show up in search</summary>
        </member>
        <member name="F:OpenMetaverse.Group.Powers">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Group.AcceptNotices">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Group.AllowPublish">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Group.MaturePublish">
            <summary>Is the group Mature</summary>
        </member>
        <member name="F:OpenMetaverse.Group.MembershipFee">
            <summary>Cost of group membership</summary>
        </member>
        <member name="F:OpenMetaverse.Group.Money">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Group.Contribution">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Group.GroupMembershipCount">
            <summary>The total number of current members this group has</summary>
        </member>
        <member name="F:OpenMetaverse.Group.GroupRolesCount">
            <summary>The number of roles this group has configured</summary>
        </member>
        <member name="M:OpenMetaverse.Group.ToString">
            <summary>Returns the name of the group</summary>
            <returns>A string containing the name of the group</returns>
        </member>
        <member name="T:OpenMetaverse.Vote">
            <summary>
            A group Vote
            </summary>
        </member>
        <member name="F:OpenMetaverse.Vote.Candidate">
            <summary>Key of Avatar who created Vote</summary>
        </member>
        <member name="F:OpenMetaverse.Vote.VoteString">
            <summary>Text of the Vote proposal</summary>
        </member>
        <member name="F:OpenMetaverse.Vote.NumVotes">
            <summary>Total number of votes</summary>
        </member>
        <member name="T:OpenMetaverse.GroupProposal">
            <summary>
            A group proposal
            </summary>
        </member>
        <member name="F:OpenMetaverse.GroupProposal.VoteText">
            <summary>The Text of the proposal</summary>
        </member>
        <member name="F:OpenMetaverse.GroupProposal.Quorum">
            <summary>The minimum number of members that must vote before proposal passes or failes</summary>
        </member>
        <member name="F:OpenMetaverse.GroupProposal.Majority">
            <summary>The required ration of yes/no votes required for vote to pass</summary>
            <remarks>The three options are Simple Majority, 2/3 Majority, and Unanimous</remarks>
            TODO: this should be an enum
        </member>
        <member name="F:OpenMetaverse.GroupProposal.Duration">
            <summary>The duration in days votes are accepted</summary>
        </member>
        <member name="T:OpenMetaverse.GroupAccountSummary">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenMetaverse.GroupAccountSummary.IntervalDays">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.GroupAccountSummary.CurrentInterval">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.GroupAccountSummary.StartDate">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.GroupAccountSummary.Balance">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.GroupAccountSummary.TotalCredits">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.GroupAccountSummary.TotalDebits">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.GroupAccountSummary.ObjectTaxCurrent">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.GroupAccountSummary.LightTaxCurrent">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.GroupAccountSummary.LandTaxCurrent">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.GroupAccountSummary.GroupTaxCurrent">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.GroupAccountSummary.ParcelDirFeeCurrent">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.GroupAccountSummary.ObjectTaxEstimate">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.GroupAccountSummary.LightTaxEstimate">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.GroupAccountSummary.LandTaxEstimate">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.GroupAccountSummary.GroupTaxEstimate">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.GroupAccountSummary.ParcelDirFeeEstimate">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.GroupAccountSummary.NonExemptMembers">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.GroupAccountSummary.LastTaxDate">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.GroupAccountSummary.TaxDate">
            <summary></summary>
        </member>
        <member name="T:OpenMetaverse.GroupNotice">
            <summary>
            Struct representing a group notice
            </summary>
        </member>
        <member name="F:OpenMetaverse.GroupNotice.Subject">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.GroupNotice.Message">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.GroupNotice.AttachmentID">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.GroupNotice.OwnerID">
            <summary></summary>
        </member>
        <member name="M:OpenMetaverse.GroupNotice.SerializeAttachment">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenMetaverse.GroupNoticeList">
            <summary>
            Struct representing a group notice list entry
            </summary>
        </member>
        <member name="F:OpenMetaverse.GroupNoticeList.NoticeID">
            <summary>Notice ID</summary>
        </member>
        <member name="F:OpenMetaverse.GroupNoticeList.Timestamp">
            <summary>Creation timestamp of notice</summary>
        </member>
        <member name="F:OpenMetaverse.GroupNoticeList.FromName">
            <summary>Agent name who created notice</summary>
        </member>
        <member name="F:OpenMetaverse.GroupNoticeList.Subject">
            <summary>Notice subject</summary>
        </member>
        <member name="F:OpenMetaverse.GroupNoticeList.HasAttachment">
            <summary>Is there an attachment?</summary>
        </member>
        <member name="F:OpenMetaverse.GroupNoticeList.AssetType">
            <summary>Attachment Type</summary>
        </member>
        <member name="T:OpenMetaverse.ChatSessionMember">
            <summary>
            Struct representing a member of a group chat session and their settings
            </summary>
        </member>
        <member name="F:OpenMetaverse.ChatSessionMember.AvatarKey">
            <summary>The <see cref="T:OpenMetaverse.UUID"/> of the Avatar</summary>
        </member>
        <member name="F:OpenMetaverse.ChatSessionMember.CanVoiceChat">
            <summary>True if user has voice chat enabled</summary>
        </member>
        <member name="F:OpenMetaverse.ChatSessionMember.IsModerator">
            <summary>True of Avatar has moderator abilities</summary>
        </member>
        <member name="F:OpenMetaverse.ChatSessionMember.MuteText">
            <summary>True if a moderator has muted this avatars chat</summary>
        </member>
        <member name="F:OpenMetaverse.ChatSessionMember.MuteVoice">
            <summary>True if a moderator has muted this avatars voice</summary>
        </member>
        <member name="T:OpenMetaverse.GroupRoleUpdate">
            <summary>
            Role update flags
            </summary>
        </member>
        <member name="F:OpenMetaverse.GroupRoleUpdate.NoUpdate">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.GroupRoleUpdate.UpdateData">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.GroupRoleUpdate.UpdatePowers">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.GroupRoleUpdate.UpdateAll">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.GroupRoleUpdate.Create">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.GroupRoleUpdate.Delete">
            <summary></summary>
        </member>
        <member name="T:OpenMetaverse.GroupPowers">
            <summary>
            Group role powers flags
            </summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.None">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.Invite">
            <summary>Can send invitations to groups default role</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.Eject">
            <summary>Can eject members from group</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.ChangeOptions">
            <summary>Can toggle 'Open Enrollment' and change 'Signup fee'</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.CreateRole">
            <summary>Can create new roles</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.DeleteRole">
            <summary>Can delete existing roles</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.RoleProperties">
            <summary>Can change Role names, titles and descriptions</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.AssignMemberLimited">
            <summary>Can assign other members to assigners role</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.AssignMember">
            <summary>Can assign other members to any role</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.RemoveMember">
            <summary>Can remove members from roles</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.ChangeActions">
            <summary>Can assign and remove abilities in roles</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.ChangeIdentity">
            <summary>Can change group Charter, Insignia, 'Publish on the web' and which
            members are publicly visible in group member listings</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.LandDeed">
            <summary>Can buy land or deed land to group</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.LandRelease">
            <summary>Can abandon group owned land to Governor Linden on mainland, or Estate owner for
            private estates</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.LandSetSale">
            <summary>Can set land for-sale information on group owned parcels</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.LandDivideJoin">
            <summary>Can subdivide and join parcels</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.JoinChat">
            <summary>Can join group chat sessions</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.FindPlaces">
            <summary>Can toggle "Show in Find Places" and set search category</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.LandChangeIdentity">
            <summary>Can change parcel name, description, and 'Publish on web' settings</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.SetLandingPoint">
            <summary>Can set the landing point and teleport routing on group land</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.ChangeMedia">
            <summary>Can change music and media settings</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.LandEdit">
            <summary>Can toggle 'Edit Terrain' option in Land settings</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.LandOptions">
            <summary>Can toggle various About Land > Options settings</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.AllowEditLand">
            <summary>Can always terraform land, even if parcel settings have it turned off</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.AllowFly">
            <summary>Can always fly while over group owned land</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.AllowRez">
            <summary>Can always rez objects on group owned land</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.AllowLandmark">
            <summary>Can always create landmarks for group owned parcels</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.AllowVoiceChat">
            <summary>Can use voice chat in Group Chat sessions</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.AllowSetHome">
            <summary>Can set home location on any group owned parcel</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.LandManageAllowed">
            <summary>Can modify public access settings for group owned parcels</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.LandManageBanned">
            <summary>Can manager parcel ban lists on group owned land</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.LandManagePasses">
            <summary>Can manage pass list sales information</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.LandEjectAndFreeze">
            <summary>Can eject and freeze other avatars on group owned land</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.ReturnGroupSet">
            <summary>Can return objects set to group</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.ReturnNonGroup">
            <summary>Can return non-group owned/set objects</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.LandGardening">
            <summary>Can landscape using Linden plants</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.DeedObject">
            <summary>Can deed objects to group</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.ModerateChat">
            <summary>Can moderate group chat sessions</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.ObjectManipulate">
            <summary>Can move group owned objects</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.ObjectSetForSale">
            <summary>Can set group owned objects for-sale</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.Accountable">
            <summary>Pay group liabilities and receive group dividends</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.SendNotices">
            <summary>Can send group notices</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.ReceiveNotices">
            <summary>Can receive group notices</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.StartProposal">
            <summary>Can create group proposals</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.VoteOnProposal">
            <summary>Can vote on group proposals</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.ReturnGroupOwned">
            <summary>Can return group owned objects</summary>
        </member>
        <member name="T:OpenMetaverse.GroupManager">
            <summary>
            Handles all network traffic related to reading and writing group
            information
            </summary>
        </member>
        <member name="F:OpenMetaverse.GroupManager.Client">
            <summary>A reference to the current <seealso cref="T:OpenMetaverse.GridClient"/> instance</summary>
        </member>
        <member name="F:OpenMetaverse.GroupManager.GroupMembersRequests">
            <summary>Currently-active group members requests</summary>
        </member>
        <member name="F:OpenMetaverse.GroupManager.GroupRolesRequests">
            <summary>Currently-active group roles requests</summary>
        </member>
        <member name="F:OpenMetaverse.GroupManager.GroupRolesMembersRequests">
            <summary>Currently-active group role-member requests</summary>
        </member>
        <member name="F:OpenMetaverse.GroupManager.GroupMembersCaches">
            <summary>A list of all the lists of group members, indexed by the group ID</summary>
        </member>
        <member name="F:OpenMetaverse.GroupManager.GroupRolesCaches">
            <summary>A list of all the lists of group roles, indexed by the group ID</summary>
        </member>
        <member name="F:OpenMetaverse.GroupManager.GroupRolesMembersCaches">
            <summary>A list of all the role to member mappings, indexed by the group ID</summary>
        </member>
        <member name="F:OpenMetaverse.GroupManager.GroupName2KeyCache">
            <summary>Caches group name lookups</summary>
        </member>
        <member name="M:OpenMetaverse.GroupManager.#ctor(OpenMetaverse.GridClient)">
            <summary>
            Group Management Routines, Methods and Packet Handlers
            </summary>
            <param name="client">A reference to the current <seealso cref="T:OpenMetaverse.GridClient"/> instance</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.RequestCurrentGroups">
            <summary>
            Request a current list of groups the avatar is a member of.
            </summary>
            <remarks>CAPS Event Queue must be running for this to work since the results
            come across CAPS.</remarks>
        </member>
        <member name="M:OpenMetaverse.GroupManager.RequestGroupName(OpenMetaverse.UUID)">
            <summary>
            Lookup name of group based on groupID
            </summary>
            <param name="groupID">groupID of group to lookup name for.</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.RequestGroupNames(System.Collections.Generic.List{OpenMetaverse.UUID})">
            <summary>
            Request lookup of multiple group names
            </summary>
            <param name="groupIDs">List of group IDs to request.</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.RequestGroupProfile(OpenMetaverse.UUID)">
            <summary>Lookup group profile data such as name, enrollment, founder, logo, etc</summary>
            <remarks>Subscribe to <code>OnGroupProfile</code> event to receive the results.</remarks>
            <param name="group">group ID (UUID)</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.RequestGroupMembers(OpenMetaverse.UUID)">
            <summary>Request a list of group members.</summary>
            <remarks>Subscribe to <code>OnGroupMembers</code> event to receive the results.</remarks>
            <param name="group">group ID (UUID)</param>
            <returns>UUID of the request, use to index into cache</returns>
        </member>
        <member name="M:OpenMetaverse.GroupManager.RequestGroupRoles(OpenMetaverse.UUID)">
            <summary>Request group roles</summary>
            <remarks>Subscribe to <code>OnGroupRoles</code> event to receive the results.</remarks>
            <param name="group">group ID (UUID)</param>
            <returns>UUID of the request, use to index into cache</returns>
        </member>
        <member name="M:OpenMetaverse.GroupManager.RequestGroupRoleMembers(OpenMetaverse.UUID)">
            <summary>Request members (members,role) role mapping for a group.</summary>
            <remarks>Subscribe to <code>OnGroupRolesMembers</code> event to receive the results.</remarks>
            <param name="group">group ID (UUID)</param>
            <returns>UUID of the request, use to index into cache</returns>
        </member>
        <member name="M:OpenMetaverse.GroupManager.RequestGroupTitles(OpenMetaverse.UUID)">
            <summary>Request a groups Titles</summary>
            <remarks>Subscribe to <code>OnGroupTitles</code> event to receive the results.</remarks>
            <param name="group">group ID (UUID)</param>
            <returns>UUID of the request, use to index into cache</returns>
        </member>
        <member name="M:OpenMetaverse.GroupManager.RequestGroupAccountSummary(OpenMetaverse.UUID,System.Int32,System.Int32)">
            <summary>Begin to get the group account summary</summary>
            <remarks>Subscribe to the <code>OnGroupAccountSummary</code> event to receive the results.</remarks>
            <param name="group">group ID (UUID)</param>
            <param name="intervalDays">How long of an interval</param>
            <param name="currentInterval">Which interval (0 for current, 1 for last)</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.Invite(OpenMetaverse.UUID,System.Collections.Generic.List{OpenMetaverse.UUID},OpenMetaverse.UUID)">
            <summary>Invites a user to a group</summary>
            <param name="group">The group to invite to</param>
            <param name="roles">A list of roles to invite a person to</param>
            <param name="personkey">Key of person to invite</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.ActivateGroup(OpenMetaverse.UUID)">
            <summary>Set a group as the current active group</summary>
            <param name="id">group ID (UUID)</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.ActivateTitle(OpenMetaverse.UUID,OpenMetaverse.UUID)">
            <summary>Change the role that determines your active title</summary>
            <param name="group">Group ID to use</param>
            <param name="role">Role ID to change to</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.SetGroupContribution(OpenMetaverse.UUID,System.Int32)">
            <summary>Set this avatar's tier contribution</summary>
            <param name="group">Group ID to change tier in</param>
            <param name="contribution">amount of tier to donate</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.RequestJoinGroup(OpenMetaverse.UUID)">
            <summary>Request to join a group</summary>
            <remarks>Subscribe to <code>OnGroupJoined</code> event for confirmation.</remarks>
            <param name="id">group ID (UUID) to join.</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.RequestCreateGroup(OpenMetaverse.Group)">
            <summary>
            Request to create a new group. If the group is successfully
            created, L$100 will automatically be deducted
            </summary>
            <remarks>Subscribe to <code>OnGroupCreated</code> event to receive confirmation.</remarks>
            <param name="group">Group struct containing the new group info</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.UpdateGroup(OpenMetaverse.UUID,OpenMetaverse.Group)">
            <summary>Update a group's profile and other information</summary>
            <param name="id">Groups ID (UUID) to update.</param>
            <param name="group">Group struct to update.</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.EjectUser(OpenMetaverse.UUID,OpenMetaverse.UUID)">
            <summary>Eject a user from a group</summary>
            <param name="group">Group ID to eject the user from</param>
            <param name="member">Avatar's key to eject</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.UpdateRole(OpenMetaverse.GroupRole)">
            <summary>Update role information</summary>
            <param name="role">Modified role to be updated</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.CreateRole(OpenMetaverse.UUID,OpenMetaverse.GroupRole)">
            <summary>Create a new group role</summary>
            <param name="group">Group ID to update</param>
            <param name="role">Role to create</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.RemoveFromRole(OpenMetaverse.UUID,OpenMetaverse.UUID,OpenMetaverse.UUID)">
            <summary>Remove an avatar from a role</summary>
            <param name="group">Group ID to update</param>
            <param name="role">Role ID to be removed from</param>
            <param name="member">Avatar's Key to remove</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.AddToRole(OpenMetaverse.UUID,OpenMetaverse.UUID,OpenMetaverse.UUID)">
            <summary>Assign an avatar to a role</summary>
            <param name="group">Group ID to update</param>
            <param name="role">Role ID to assign to</param>
            <param name="member">Avatar's ID to assign to role</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.RequestGroupNoticeList(OpenMetaverse.UUID)">
            <summary>Request the group notices list</summary>
            <param name="group">Group ID to fetch notices for</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.RequestGroupNotice(OpenMetaverse.UUID)">
            <summary>Request a group notice by key</summary>
            <param name="noticeID">ID of group notice</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.SendGroupNotice(OpenMetaverse.UUID,OpenMetaverse.GroupNotice)">
            <summary>Send out a group notice</summary>
            <param name="group">Group ID to update</param>
            <param name="notice"><code>GroupNotice</code> structure containing notice data</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.StartProposal(OpenMetaverse.UUID,OpenMetaverse.GroupProposal)">
            <summary>Start a group proposal (vote)</summary>
            <param name="group">The Group ID to send proposal to</param>
            <param name="prop"><code>GroupProposal</code> structure containing the proposal</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.LeaveGroup(OpenMetaverse.UUID)">
            <summary>Request to leave a group</summary>
            <remarks>Subscribe to <code>OnGroupLeft</code> event to receive confirmation</remarks>
            <param name="groupID">The group to leave</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.EjectGroupMemberReplyHandler(OpenMetaverse.Packets.Packet,OpenMetaverse.Simulator)">
            <summary>
            Packet Handler for EjectGroupMemberReply, fired when an avatar is ejected from 
            a group.
            </summary>
            <param name="packet">The EjectGroupMemberReply packet</param>
            <param name="simulator">The simulator where the message originated</param>
            <remarks>This is a silly packet, it doesn't provide you with the ejectees UUID</remarks>
        </member>
        <member name="E:OpenMetaverse.GroupManager.OnCurrentGroups">
            <summary>Fired when a <seealso cref="T:OpenMetaverse.Packets.AgentGroupDataUpdatePacket"/> is received, contains a list of 
            groups avatar is currently a member of</summary>
        </member>
        <member name="E:OpenMetaverse.GroupManager.OnGroupNames">
            <summary>Fired when a UUIDGroupNameReply packet is receiived, 
            contains name of group requested</summary>
        </member>
        <member name="E:OpenMetaverse.GroupManager.OnGroupProfile">
            <summary>Fired when a GroupProfileReply packet is received,
            contains group profile information for requested group.</summary>
        </member>
        <member name="E:OpenMetaverse.GroupManager.OnGroupMembers">
            <summary>Fired when a GroupMembersReply packet is received,
            contains a list of group members for requested group</summary>
        </member>
        <member name="E:OpenMetaverse.GroupManager.OnGroupRoles">
            <summary>Fired when a GroupRoleDataReply packet is received,
            contains details on roles for requested group</summary>
        </member>
        <member name="E:OpenMetaverse.GroupManager.OnGroupRolesMembers">
            <summary>Fired when a <seealso cref="T:OpenMetaverse.Packets.GroupRoleMembersReplyPacket"/> is received,
            Contains group member to group role mappings</summary>
        </member>
        <member name="E:OpenMetaverse.GroupManager.OnGroupTitles">
            <summary>Fired when a GroupTitlesReply packet is received,
            sets the active role title for the current Agent</summary>
        </member>
        <member name="E:OpenMetaverse.GroupManager.OnGroupAccountSummary">
            <summary>Fired when a GroupAccountSummaryReply packet is received,
            Contains a summary of group financial information</summary>
        </member>
        <member name="E:OpenMetaverse.GroupManager.OnGroupCreated">
            <summary>Fired when a CreateGroupReply packet is received, indicates
            the successful creation of a new group</summary>
        </member>
        <member name="E:OpenMetaverse.GroupManager.OnGroupJoined">
            <summary>Fired when a JoinGroupReply packet is received, indicates
            the Avatar has successfully joined a new group either by <seealso cref="M:OpenMetaverse.GroupManager.RequestJoinGroup(OpenMetaverse.UUID)"/>
            or by accepting a group join invitation with <seealso cref="M:OpenMetaverse.AgentManager.GroupInviteRespond(OpenMetaverse.UUID,OpenMetaverse.UUID,System.Boolean)"/></summary>
        </member>
        <member name="E:OpenMetaverse.GroupManager.OnGroupLeft">
            <summary>Fired when a LeaveGroupReply packet is received, indicates
            the Avatar has successfully left a group</summary>
            <seealso cref="M:OpenMetaverse.GroupManager.LeaveGroup(OpenMetaverse.UUID)"/>
        </member>
        <member name="E:OpenMetaverse.GroupManager.OnGroupDropped">
            <summary>Fired when a AgentDropGroup packet is received, contains
            the <seealso cref="F:OpenMetaverse.Group.ID"/> of the group dropped</summary>
        </member>
        <member name="E:OpenMetaverse.GroupManager.OnGroupMemberEjected">
            <summary>Fired when a GroupMemberEjected packet is received,
            indicates a member of a group has been ejected</summary>
        </member>
        <member name="E:OpenMetaverse.GroupManager.OnGroupNoticesList">
            <summary>Fired when the list of group notices is recievied</summary>
        </member>
        <member name="T:OpenMetaverse.GroupManager.CurrentGroupsCallback">
            <summary>
            Callback for the list of groups the avatar is currently a member of
            </summary>
            <param name="groups">A dictionary containing the groups an avatar is a member of,
            where the Key is the group <seealso cref="T:OpenMetaverse.UUID"/>, and the values are the groups</param>
        </member>
        <member name="T:OpenMetaverse.GroupManager.GroupNamesCallback">
            <summary>
            Callback for a list of group names
            </summary>
            <param name="groupNames">A dictionary containing the the group names requested
            where the Key is the group <seealso cref="T:OpenMetaverse.UUID"/>, and the values are the names</param>
        </member>
        <member name="T:OpenMetaverse.GroupManager.GroupProfileCallback">
            <summary>
            Callback for the profile of a group
            </summary>
            <param name="group">The group profile</param>
        </member>
        <member name="T:OpenMetaverse.GroupManager.GroupMembersCallback">
            <summary>
            Callback for the member list of a group
            </summary>
            <param name="members">A dictionary containing the members of a group
            where the Key is the group <seealso cref="T:OpenMetaverse.UUID"/>, and the values are the members</param>
        </member>
        <member name="T:OpenMetaverse.GroupManager.GroupRolesCallback">
            <summary>
            Callback for the role list of a group
            </summary>
            <param name="roles">A dictionary containing the roles of a group
            where the Key is the group <seealso cref="T:OpenMetaverse.UUID"/>, and the values are the roles</param>
        </member>
        <member name="T:OpenMetaverse.GroupManager.GroupRolesMembersCallback">
            <summary>
            Callback for a pairing of roles to members
            </summary>
            <param name="rolesMembers">A List of Keyvalue pairs containing the role ID and the members assigned to 
            that role</param>
        </member>
        <member name="T:OpenMetaverse.GroupManager.GroupTitlesCallback">
            <summary>
            Callback for the title list of a group
            </summary>
            <param name="titles">A dictionary containing the titles of a group
            where the Key is the group <seealso cref="T:OpenMetaverse.UUID"/>, and the values are the title details</param>
        </member>
        <member name="T:OpenMetaverse.GroupManager.GroupAccountSummaryCallback">
            <summary>
            Callback fired when group account summary information is received
            </summary>
            <param name="summary">The group account summary information</param>
        </member>
        <member name="T:OpenMetaverse.GroupManager.GroupCreatedCallback">
            <summary>
            Callback fired after an attempt to create a group
            </summary>
            <param name="groupID">The new groups <seealso cref="T:OpenMetaverse.UUID"/></param>
            <param name="success">True of creation was successful</param>
            <param name="message">A string, containing a message from the simulator</param>
        </member>
        <member name="T:OpenMetaverse.GroupManager.GroupJoinedCallback">
            <summary>
            Callback fired when the avatar has joined a group
            </summary>
            <param name="groupID">The <see cref="T:OpenMetaverse.UUID"/> of the group joined</param>
            <param name="success">True if the join was successful</param>
        </member>
        <member name="T:OpenMetaverse.GroupManager.GroupLeftCallback">
            <summary>
            Callback fired when the avatar leaves a group
            </summary>
            <param name="groupID">The <see cref="T:OpenMetaverse.UUID"/> of the group joined</param>
            <param name="success">True if the part was successful</param>
        </member>
        <member name="T:OpenMetaverse.GroupManager.GroupDroppedCallback">
            <summary>
            Fired when a group is dropped, likely because it did not keep the required (2) avatar
            minimum
            </summary>
            <param name="groupID">The <see cref="T:OpenMetaverse.UUID"/> of the group which was dropped</param>
        </member>
        <member name="T:OpenMetaverse.GroupManager.GroupMemberEjectedCallback">
            <summary>
            Fired when a member of a group is ejected, 
            Does not provide member information, only 
            group ID and whether it was successful or not
            </summary>
            <param name="groupID">The Group UUID the member was ejected from</param>
            <param name="success">true of member was successfully ejected</param>
        </member>
        <member name="T:OpenMetaverse.GroupManager.GroupNoticesListCallback">
            <summary>
            Fired when the list of group notices is recievied
            </summary>
            <param name="groupID">The <see cref="T:OpenMetaverse.UUID"/> of the group for which the notice list entry was recievied</param>
            <param name="notice">The Notice list entry</param>
        </member>
        <member name="T:OpenMetaverse.Helpers">
            <summary>
            Static helper functions and global variables
            </summary>
        </member>
        <member name="F:OpenMetaverse.Helpers.MSG_APPENDED_ACKS">
            <summary>This header flag signals that ACKs are appended to the packet</summary>
        </member>
        <member name="F:OpenMetaverse.Helpers.MSG_RESENT">
            <summary>This header flag signals that this packet has been sent before</summary>
        </member>
        <member name="F:OpenMetaverse.Helpers.MSG_RELIABLE">
            <summary>This header flags signals that an ACK is expected for this packet</summary>
        </member>
        <member name="F:OpenMetaverse.Helpers.MSG_ZEROCODED">
            <summary>This header flag signals that the message is compressed using zerocoding</summary>
        </member>
        <member name="M:OpenMetaverse.Helpers.TEOffsetShort(System.Single)">
            <summary>
            
            </summary>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:OpenMetaverse.Helpers.TEOffsetFloat(System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="bytes"></param>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:OpenMetaverse.Helpers.TERotationShort(System.Single)">
            <summary>
            
            </summary>
            <param name="rotation"></param>
            <returns></returns>
        </member>
        <member name="M:OpenMetaverse.Helpers.TERotationFloat(System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="bytes"></param>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:OpenMetaverse.Helpers.GlobalPosToRegionHandle(System.Single,System.Single,System.Single@,System.Single@)">
            <summary>
            Given an X/Y location in absolute (grid-relative) terms, a region
            handle is returned along with the local X/Y location in that region
            </summary>
            <param name="globalX">The absolute X location, a number such as 
            255360.35</param>
            <param name="globalY">The absolute Y location, a number such as
            255360.35</param>
            <param name="localX">The sim-local X position of the global X
            position, a value from 0.0 to 256.0</param>
            <param name="localY">The sim-local Y position of the global Y
            position, a value from 0.0 to 256.0</param>
            <returns>A 64-bit region handle that can be used to teleport to</returns>
        </member>
        <member name="M:OpenMetaverse.Helpers.FloatToTerseString(System.Single)">
            <summary>
            Converts a floating point number to a terse string format used for
            transmitting numbers in wearable asset files
            </summary>
            <param name="val">Floating point number to convert to a string</param>
            <returns>A terse string representation of the input number</returns>
        </member>
        <member name="M:OpenMetaverse.Helpers.FieldToString(System.Text.StringBuilder,System.Byte[],System.String)">
            <summary>
            Convert a variable length field (byte array) to a string, with a
            field name prepended to each line of the output
            </summary>
            <remarks>If the byte array has unprintable characters in it, a 
            hex dump will be written instead</remarks>
            <param name="output">The StringBuilder object to write to</param>
            <param name="bytes">The byte array to convert to a string</param>
            <param name="fieldName">A field name to prepend to each line of output</param>
        </member>
        <member name="M:OpenMetaverse.Helpers.ZeroDecode(System.Byte[],System.Int32,System.Byte[])">
            <summary>
            Decode a zerocoded byte array, used to decompress packets marked
            with the zerocoded flag
            </summary>
            <remarks>Any time a zero is encountered, the next byte is a count 
            of how many zeroes to expand. One zero is encoded with 0x00 0x01, 
            two zeroes is 0x00 0x02, three zeroes is 0x00 0x03, etc. The 
            first four bytes are copied directly to the output buffer.
            </remarks>
            <param name="src">The byte array to decode</param>
            <param name="srclen">The length of the byte array to decode. This 
            would be the length of the packet up to (but not including) any
            appended ACKs</param>
            <param name="dest">The output byte array to decode to</param>
            <returns>The length of the output buffer</returns>
        </member>
        <member name="M:OpenMetaverse.Helpers.ZeroEncode(System.Byte[],System.Int32,System.Byte[])">
            <summary>
            Encode a byte array with zerocoding. Used to compress packets marked
            with the zerocoded flag. Any zeroes in the array are compressed down
            to a single zero byte followed by a count of how many zeroes to expand
            out. A single zero becomes 0x00 0x01, two zeroes becomes 0x00 0x02,
            three zeroes becomes 0x00 0x03, etc. The first four bytes are copied
            directly to the output buffer.
            </summary>
            <param name="src">The byte array to encode</param>
            <param name="srclen">The length of the byte array to encode</param>
            <param name="dest">The output byte array to encode to</param>
            <returns>The length of the output buffer</returns>
        </member>
        <member name="M:OpenMetaverse.Helpers.InventoryCRC(System.Int32,System.Byte,System.SByte,System.SByte,OpenMetaverse.UUID,OpenMetaverse.UUID,System.Int32,OpenMetaverse.UUID,OpenMetaverse.UUID,OpenMetaverse.UUID,OpenMetaverse.UUID,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Calculates the CRC (cyclic redundancy check) needed to upload inventory.
            </summary>
            <param name="creationDate">Creation date</param>
            <param name="saleType">Sale type</param>
            <param name="invType">Inventory type</param>
            <param name="type">Type</param>
            <param name="assetID">Asset ID</param>
            <param name="groupID">Group ID</param>
            <param name="salePrice">Sale price</param>
            <param name="ownerID">Owner ID</param>
            <param name="creatorID">Creator ID</param>
            <param name="itemID">Item ID</param>
            <param name="folderID">Folder ID</param>
            <param name="everyoneMask">Everyone mask (permissions)</param>
            <param name="flags">Flags</param>
            <param name="nextOwnerMask">Next owner mask (permissions)</param>
            <param name="groupMask">Group mask (permissions)</param>
            <param name="ownerMask">Owner mask (permisions)</param>
            <returns>The calculated CRC</returns>
        </member>
        <member name="M:OpenMetaverse.Helpers.GetResourceStream(System.String)">
            <summary>
            Attempts to load a file embedded in the assembly
            </summary>
            <param name="resourceName">The filename of the resource to load</param>
            <returns>A Stream for the requested file, or null if the resource
            was not successfully loaded</returns>
        </member>
        <member name="M:OpenMetaverse.Helpers.GetResourceStream(System.String,System.String)">
            <summary>
            Attempts to load a file either embedded in the assembly or found in
            a given search path
            </summary>
            <param name="resourceName">The filename of the resource to load</param>
            <param name="searchPath">An optional path that will be searched if
            the asset is not found embedded in the assembly</param>
            <returns>A Stream for the requested file, or null if the resource
            was not successfully loaded</returns>
        </member>
        <member name="M:OpenMetaverse.Helpers.PrimListToOSD(System.Collections.Generic.List{OpenMetaverse.Primitive})">
            <summary>
            Converts a list of primitives to an object that can be serialized
            with the LLSD system
            </summary>
            <param name="prims">Primitives to convert to a serializable object</param>
            <returns>An object that can be serialized with LLSD</returns>
        </member>
        <member name="M:OpenMetaverse.Helpers.OSDToPrimList(OpenMetaverse.StructuredData.OSD)">
            <summary>
            Deserializes OSD in to a list of primitives
            </summary>
            <param name="osd">Structure holding the serialized primitive list,
            must be of the SDMap type</param>
            <returns>A list of deserialized primitives</returns>
        </member>
        <member name="M:OpenMetaverse.Helpers.PacketToString(OpenMetaverse.Packets.Packet)">
            <summary>
            Parse a packet into human readable formatted key/value pairs
            </summary>
            <param name="packet">the Packet to parse</param>
            <returns>A string containing the packet block name, and key/value pairs of the data fields</returns>
        </member>
        <member name="T:OpenMetaverse.Helpers.LogLevel">
            <summary>
            Passed to Logger.Log() to identify the severity of a log entry
            </summary>
        </member>
        <member name="F:OpenMetaverse.Helpers.LogLevel.None">
            <summary>No logging information will be output</summary>
        </member>
        <member name="F:OpenMetaverse.Helpers.LogLevel.Info">
            <summary>Non-noisy useful information, may be helpful in 
            debugging a problem</summary>
        </member>
        <member name="F:OpenMetaverse.Helpers.LogLevel.Warning">
            <summary>A non-critical error occurred. A warning will not 
            prevent the rest of the library from operating as usual, 
            although it may be indicative of an underlying issue</summary>
        </member>
        <member name="F:OpenMetaverse.Helpers.LogLevel.Error">
            <summary>A critical error has occurred. Generally this will 
            be followed by the network layer shutting down, although the 
            stability of the library after an error is uncertain</summary>
        </member>
        <member name="F:OpenMetaverse.Helpers.LogLevel.Debug">
            <summary>Used for internal testing, this logging level can 
            generate very noisy (long and/or repetitive) messages. Don't
            pass this to the Log() function, use DebugLog() instead.
            </summary>
        </member>
        <member name="T:OpenMetaverse.InternalDictionary`2">
            <summary>
            The InternalDictionary class is used through the library for storing key/value pairs.
            It is intended to be a replacement for the generic Dictionary class and should 
            be used in its place. It contains several methods for allowing access to the data from
            outside the library that are read only and thread safe.
            
            </summary>
            <typeparam name="TKey">Key <see langword="Tkey"/></typeparam>
            <typeparam name="TValue">Value <see langword="TValue"/></typeparam>
        </member>
        <member name="F:OpenMetaverse.InternalDictionary`2.Dictionary">
            <summary>Internal dictionary that this class wraps around. Do not
            modify or enumerate the contents of this dictionary without locking</summary>
        </member>
        <member name="M:OpenMetaverse.InternalDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <seealso cref="T:InternalDictionary"/> Class 
            with the specified key/value, has the default initial capacity.
            </summary>
            <example>
            <code>
            // initialize a new InternalDictionary named testDict with a string as the key and an int as the value.
            public InternalDictionary&lt;string, int&gt; testDict = new InternalDictionary&lt;string, int&gt;();
            </code>
            </example>
        </member>
        <member name="M:OpenMetaverse.InternalDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <seealso cref="T:InternalDictionary"/> Class 
            with the specified key/value, has its initial valies copied from the specified 
            <seealso cref="T:System.Collections.Generic.Dictionary"/>
            </summary>
            <param name="dictionary"><seealso cref="T:System.Collections.Generic.Dictionary"/>
            to copy initial values from</param>
            <example>
            <code>
            // initialize a new InternalDictionary named testAvName with a UUID as the key and an string as the value.
            // populates with copied values from example KeyNameCache Dictionary.
            
            // create source dictionary
            Dictionary&lt;UUID, string&gt; KeyNameCache = new Dictionary&lt;UUID, string&gt;();
            KeyNameCache.Add("8300f94a-7970-7810-cf2c-fc9aa6cdda24", "Jack Avatar");
            KeyNameCache.Add("27ba1e40-13f7-0708-3e98-5819d780bd62", "Jill Avatar");
            
            // Initialize new dictionary.
            public InternalDictionary&lt;UUID, string&gt; testAvName = new InternalDictionary&lt;UUID, string&gt;(KeyNameCache);
            </code>
            </example>
        </member>
        <member name="M:OpenMetaverse.InternalDictionary`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <seealso cref="T:OpenMetaverse.InternalDictionary"/> Class 
            with the specified key/value, With its initial capacity specified.
            </summary>
            <param name="capacity">Initial size of dictionary</param>
            <example>
            <code>
            // initialize a new InternalDictionary named testDict with a string as the key and an int as the value, 
            // initially allocated room for 10 entries.
            public InternalDictionary&lt;string, int&gt; testDict = new InternalDictionary&lt;string, int&gt;(10);
            </code>
            </example>
        </member>
        <member name="M:OpenMetaverse.InternalDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Try to get entry from <seealso cref="T:OpenMetaverse.InternalDictionary"/> with specified key 
            </summary>
            <param name="key">Key to use for lookup</param>
            <param name="value">Value returned</param>
            <returns><see langword="true"/> if specified key exists,  <see langword="false"/> if not found</returns>
            <example>
            <code>
            // find your avatar using the Simulator.ObjectsAvatars InternalDictionary:
               Avatar av;
               if (Client.Network.CurrentSim.ObjectsAvatars.TryGetValue(Client.Self.AgentID, out av))
                   Console.WriteLine("Found Avatar {0}", av.Name);
            </code>
            <seealso cref="F:OpenMetaverse.Simulator.ObjectsAvatars"/>
            </example>
        </member>
        <member name="M:OpenMetaverse.InternalDictionary`2.Find(System.Predicate{`1})">
            <summary>
            Finds the specified match.
            </summary>
            <param name="match">The match.</param>
            <returns>Matched value</returns>
            <example>
            <code>
            // use a delegate to find a prim in the ObjectsPrimitives InternalDictionary
            // with the ID 95683496
            uint findID = 95683496;
            Primitive findPrim = sim.ObjectsPrimitives.Find(
                        delegate(Primitive prim) { return prim.ID == findID; });
            </code>
            </example>
        </member>
        <member name="M:OpenMetaverse.InternalDictionary`2.FindAll(System.Predicate{`1})">
             <summary>Find All items in an <seealso cref="T:InternalDictionary"/></summary>
             <param name="match">return matching items.</param>
             <returns>a <seealso cref="T:System.Collections.Generic.List"/> containing found items.</returns>
             <example>
             Find All prims within 20 meters and store them in a List
             <code>
             int radius = 20;
             List&lt;Primitive&gt; prims = Client.Network.CurrentSim.ObjectsPrimitives.FindAll(
                     delegate(Primitive prim) {
                         Vector3 pos = prim.Position;
                         return ((prim.ParentID == 0) &amp;&amp; (pos != Vector3.Zero) &amp;&amp; (Vector3.Distance(pos, location) &lt; radius));
                     }
                ); 
            </code>
            </example>
        </member>
        <member name="M:OpenMetaverse.InternalDictionary`2.FindAll(System.Predicate{`0})">
             <summary>Find All items in an <seealso cref="T:InternalDictionary"/></summary>
             <param name="match">return matching keys.</param>
             <returns>a <seealso cref="T:System.Collections.Generic.List"/> containing found keys.</returns>
             <example>
             Find All keys which also exist in another dictionary
             <code>
             List&lt;UUID&gt; matches = myDict.FindAll(
                     delegate(UUID id) {
                         return myOtherDict.ContainsKey(id);
                     }
                ); 
            </code>
            </example>
        </member>
        <member name="M:OpenMetaverse.InternalDictionary`2.ForEach(System.Action{`1})">
             <summary>Perform an <seealso cref="T:System.Action"/> on each entry in an <seealso cref="T:OpenMetaverse.InternalDictionary"/></summary>
             <param name="action"><seealso cref="T:System.Action"/> to perform</param>
             <example>
             <code>
             // Iterates over the ObjectsPrimitives InternalDictionary and prints out some information.
             Client.Network.CurrentSim.ObjectsPrimitives.ForEach(
                 delegate(Primitive prim)
                 {
                     if (prim.Text != null)
                     {
                         Console.WriteLine("NAME={0} ID = {1} TEXT = '{2}'", 
                             prim.PropertiesFamily.Name, prim.ID, prim.Text);
                     }
                 });
            </code>
            </example>
        </member>
        <member name="M:OpenMetaverse.InternalDictionary`2.ForEach(System.Action{`0})">
            <summary>Perform an <seealso cref="T:System.Action"/> on each key of an <seealso cref="T:OpenMetaverse.InternalDictionary"/></summary>
            <param name="action"><seealso cref="T:System.Action"/> to perform</param>
        </member>
        <member name="M:OpenMetaverse.InternalDictionary`2.ContainsKey(`0)">
            <summary>Check if Key exists in Dictionary</summary>
            <param name="key">Key to check for</param>
            <returns><see langword="true"/> if found, <see langword="false"/> otherwise</returns>
        </member>
        <member name="M:OpenMetaverse.InternalDictionary`2.ContainsValue(`1)">
            <summary>Check if Value exists in Dictionary</summary>
            <param name="value">Value to check for</param>
            <returns><see langword="true"/> if found, <see langword="false"/> otherwise</returns>
        </member>
        <member name="M:OpenMetaverse.InternalDictionary`2.Add(`0,`1)">
            <summary>
            Adds the specified key to the dictionary, dictionary locking is not performed, 
            <see cref="M:OpenMetaverse.InternalDictionary`2.SafeAdd(`0,`1)"/>
            </summary>
            <param name="key">The key</param>
            <param name="value">The value</param>
        </member>
        <member name="M:OpenMetaverse.InternalDictionary`2.Remove(`0)">
            <summary>
            Removes the specified key, dictionary locking is not performed
            </summary>
            <param name="key">The key.</param>
            <returns><see langword="true"/> if successful, <see langword="false"/> otherwise</returns>
        </member>
        <member name="M:OpenMetaverse.InternalDictionary`2.SafeAdd(`0,`1)">
            <summary>
            Safely add a key/value pair to the dictionary
            </summary>
            <param name="key">The key</param>
            <param name="value">The value</param>
        </member>
        <member name="M:OpenMetaverse.InternalDictionary`2.SafeRemove(`0)">
            <summary>
            Safely Removes an item from the InternalDictionary
            </summary>
            <param name="key">The key</param>
            <returns><see langword="true"/> if successful, <see langword="false"/> otherwise</returns>
        </member>
        <member name="P:OpenMetaverse.InternalDictionary`2.Count">
            <summary>
            Gets the number of Key/Value pairs contained in the <seealso cref="T:InternalDictionary"/>
            </summary>
        </member>
        <member name="P:OpenMetaverse.InternalDictionary`2.Item(`0)">
            <summary>
            Indexer for the dictionary
            </summary>
            <param name="key">The key</param>
            <returns>The value</returns>
        </member>
        <member name="T:OpenMetaverse.InventoryException">
            <summary>
            Exception class to identify inventory exceptions
            </summary>
        </member>
        <member name="T:OpenMetaverse.Inventory">
            <summary>
            Responsible for maintaining inventory structure. Inventory constructs nodes
            and manages node children as is necessary to maintain a coherant hirarchy.
            Other classes should not manipulate or create InventoryNodes explicitly. When
            A node's parent changes (when a folder is moved, for example) simply pass
            Inventory the updated InventoryFolder and it will make the appropriate changes
            to its internal representation.
            </summary>
        </member>
        <member name="M:OpenMetaverse.Inventory.GetContents(OpenMetaverse.UUID)">
            <summary>
            Returns the contents of the specified folder
            </summary>
            <param name="folder">A folder's UUID</param>
            <returns>The contents of the folder corresponding to <code>folder</code></returns>
            <exception cref="T:OpenMetaverse.InventoryException">When <code>folder</code> does not exist in the inventory</exception>
        </member>
        <member name="M:OpenMetaverse.Inventory.UpdateNodeFor(OpenMetaverse.InventoryBase)">
            <summary>
            Updates the state of the InventoryNode and inventory data structure that
            is responsible for the InventoryObject. If the item was previously not added to inventory,
            it adds the item, and updates structure accordingly. If it was, it updates the 
            InventoryNode, changing the parent node if <code>item.parentUUID</code> does 
            not match <code>node.Parent.Data.UUID</code>.
            
            You can not set the inventory root folder using this method
            </summary>
            <param name="item">The InventoryObject to store</param>
        </member>
        <member name="M:OpenMetaverse.Inventory.RemoveNodeFor(OpenMetaverse.InventoryBase)">
            <summary>
            Removes the InventoryObject and all related node data from Inventory.
            </summary>
            <param name="item">The InventoryObject to remove.</param>
        </member>
        <member name="M:OpenMetaverse.Inventory.Contains(OpenMetaverse.UUID)">
            <summary>
            Used to find out if Inventory contains the InventoryObject
            specified by <code>uuid</code>.
            </summary>
            <param name="uuid">The UUID to check.</param>
            <returns>true if inventory contains uuid, false otherwise</returns>
        </member>
        <member name="M:OpenMetaverse.Inventory.cache_inventory_to_disk(System.String)">
            <summary>
            Save the current inventory structure to a cache file
            </summary>
            <param name="filename">Name of the cache file to save to</param>
        </member>
        <member name="M:OpenMetaverse.Inventory.read_inventory_cache(System.String)">
            <summary>
            Loads in inventory cache file into the inventory structure. Note only valid to call after login has been successful.
            </summary>
            <param name="filename">Name of the cache file to load</param>
        </member>
        <member name="E:OpenMetaverse.Inventory.OnInventoryObjectUpdated">
            <summary>
            Called when an InventoryObject's state is changed.
            </summary>
        </member>
        <member name="E:OpenMetaverse.Inventory.OnInventoryObjectRemoved">
            <summary>
            Called when an item or folder is removed from inventory.
            </summary>
        </member>
        <member name="E:OpenMetaverse.Inventory.OnInventoryObjectAdded">
            <summary>
            Called when an item is first added to the local inventory store.
            This will occur most frequently when we're initially downloading
            the inventory from the server.
            
            This will also fire when another avatar or object offers us inventory
            </summary>
        </member>
        <member name="P:OpenMetaverse.Inventory.RootFolder">
            <summary>
            The root folder of this avatars inventory
            </summary>
        </member>
        <member name="P:OpenMetaverse.Inventory.LibraryFolder">
            <summary>
            The default shared library folder
            </summary>
        </member>
        <member name="P:OpenMetaverse.Inventory.RootNode">
            <summary>
            The root node of the avatars inventory
            </summary>
        </member>
        <member name="P:OpenMetaverse.Inventory.LibraryRootNode">
            <summary>
            The root node of the default shared library
            </summary>
        </member>
        <member name="P:OpenMetaverse.Inventory.Item(OpenMetaverse.UUID)">
            <summary>
            By using the bracket operator on this class, the program can get the 
            InventoryObject designated by the specified uuid. If the value for the corresponding
            UUID is null, the call is equivelant to a call to <code>RemoveNodeFor(this[uuid])</code>.
            If the value is non-null, it is equivelant to a call to <code>UpdateNodeFor(value)</code>,
            the uuid parameter is ignored.
            </summary>
            <param name="uuid">The UUID of the InventoryObject to get or set, ignored if set to non-null value.</param>
            <returns>The InventoryObject corresponding to <code>uuid</code>.</returns>
        </member>
        <member name="T:OpenMetaverse.Inventory.InventoryObjectUpdated">
            <summary>
            Delegate to use for the OnInventoryObjectUpdated event.
            </summary>
            <param name="oldObject">The state of the InventoryObject before the update occured.</param>
            <param name="newObject">The state of the InventoryObject after the update occured.</param>
        </member>
        <member name="T:OpenMetaverse.Inventory.InventoryObjectRemoved">
            <summary>
            Delegate to use for the OnInventoryObjectRemoved event.
            </summary>
            <param name="obj">The InventoryObject that was removed.</param>
        </member>
        <member name="T:OpenMetaverse.Inventory.InventoryObjectAdded">
            <summary>
            Delegate to use for the OnInventoryObjectUpdated event.
            </summary>
            <param name="obj">The InventoryObject that has been stored.</param>
        </member>
        <member name="T:OpenMetaverse.InventoryType">
            <summary>
            Inventory Item Types, eg Script, Notecard, Folder, etc
            </summary>
        </member>
        <member name="F:OpenMetaverse.InventoryType.Unknown">
            <summary>Unknown</summary>
        </member>
        <member name="F:OpenMetaverse.InventoryType.Texture">
            <summary>Texture</summary>
        </member>
        <member name="F:OpenMetaverse.InventoryType.Sound">
            <summary>Sound</summary>
        </member>
        <member name="F:OpenMetaverse.InventoryType.CallingCard">
            <summary>Calling Card</summary>
        </member>
        <member name="F:OpenMetaverse.InventoryType.Landmark">
            <summary>Landmark</summary>
        </member>
        <member name="F:OpenMetaverse.InventoryType.Notecard">
            <summary>Notecard</summary>
        </member>
        <member name="F:OpenMetaverse.InventoryType.Category">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.InventoryType.Folder">
            <summary>Folder</summary>
        </member>
        <member name="F:OpenMetaverse.InventoryType.RootCategory">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.InventoryType.LSL">
            <summary>an LSL Script</summary>
        </member>
        <member name="F:OpenMetaverse.InventoryType.Snapshot">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.InventoryType.Attachment">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.InventoryType.Wearable">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.InventoryType.Animation">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.InventoryType.Gesture">
            <summary></summary>
        </member>
        <member name="T:OpenMetaverse.SaleType">
            <summary>
            Item Sale Status
            </summary>
        </member>
        <member name="F:OpenMetaverse.SaleType.Not">
            <summary>Not for sale</summary>
        </member>
        <member name="F:OpenMetaverse.SaleType.Original">
            <summary>The original is for sale</summary>
        </member>
        <member name="F:OpenMetaverse.SaleType.Copy">
            <summary>Copies are for sale</summary>
        </member>
        <member name="F:OpenMetaverse.SaleType.Contents">
            <summary>The contents of the object are for sale</summary>
        </member>
        <member name="F:OpenMetaverse.InventorySortOrder.ByName">
            <summary>Sort by name</summary>
        </member>
        <member name="F:OpenMetaverse.InventorySortOrder.ByDate">
            <summary>Sort by date</summary>
        </member>
        <member name="F:OpenMetaverse.InventorySortOrder.FoldersByName">
            <summary>Sort folders by name, regardless of whether items are
            sorted by name or date</summary>
        </member>
        <member name="F:OpenMetaverse.InventorySortOrder.SystemFoldersToTop">
            <summary>Place system folders at the top</summary>
        </member>
        <member name="T:OpenMetaverse.DeRezDestination">
            <summary>
            Possible destinations for DeRezObject request
            </summary>
        </member>
        <member name="F:OpenMetaverse.DeRezDestination.AgentInventorySave">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.DeRezDestination.AgentInventoryCopy">
            <summary>Copy from in-world to agent inventory</summary>
        </member>
        <member name="F:OpenMetaverse.DeRezDestination.TaskInventory">
            <summary>Derez to TaskInventory</summary>
        </member>
        <member name="F:OpenMetaverse.DeRezDestination.Attachment">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.DeRezDestination.AgentInventoryTake">
            <summary>Take Object</summary>
        </member>
        <member name="F:OpenMetaverse.DeRezDestination.ForceToGodInventory">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.DeRezDestination.TrashFolder">
            <summary>Delete Object</summary>
        </member>
        <member name="F:OpenMetaverse.DeRezDestination.AttachmentToInventory">
            <summary>Put an avatar attachment into agent inventory</summary>
        </member>
        <member name="F:OpenMetaverse.DeRezDestination.AttachmentExists">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.DeRezDestination.ReturnToOwner">
            <summary>Return an object back to the owner's inventory</summary>
        </member>
        <member name="F:OpenMetaverse.DeRezDestination.ReturnToLastOwner">
            <summary>Return a deeded object back to the last owner's inventory</summary>
        </member>
        <member name="T:OpenMetaverse.InventoryItemFlags">
            <summary>
            Upper half of the Flags field for inventory items
            </summary>
        </member>
        <member name="F:OpenMetaverse.InventoryItemFlags.ObjectSlamPerm">
            <summary>Indicates that the NextOwner permission will be set to the
            most restrictive set of permissions found in the object set
            (including linkset items and object inventory items) on next rez</summary>
        </member>
        <member name="F:OpenMetaverse.InventoryItemFlags.ObjectSlamSale">
            <summary>Indicates that the object sale information has been
            changed</summary>
        </member>
        <member name="F:OpenMetaverse.InventoryItemFlags.ObjectOverwriteBase">
            <summary>If set, and a slam bit is set, indicates BaseMask will be overwritten on Rez</summary>
        </member>
        <member name="F:OpenMetaverse.InventoryItemFlags.ObjectOverwriteOwner">
            <summary>If set, and a slam bit is set, indicates OwnerMask will be overwritten on Rez</summary>
        </member>
        <member name="F:OpenMetaverse.InventoryItemFlags.ObjectOverwriteGroup">
            <summary>If set, and a slam bit is set, indicates GroupMask will be overwritten on Rez</summary>
        </member>
        <member name="F:OpenMetaverse.InventoryItemFlags.ObjectOverwriteEveryone">
            <summary>If set, and a slam bit is set, indicates EveryoneMask will be overwritten on Rez</summary>
        </member>
        <member name="F:OpenMetaverse.InventoryItemFlags.ObjectOverwriteNextOwner">
            <summary>If set, and a slam bit is set, indicates NextOwnerMask will be overwritten on Rez</summary>
        </member>
        <member name="F:OpenMetaverse.InventoryItemFlags.ObjectHasMultipleItems">
            <summary>Indicates whether this object is composed of multiple
            items or not</summary>
        </member>
        <member name="F:OpenMetaverse.InventoryItemFlags.SharedSingleReference">
            <summary>Indicates that the asset is only referenced by this
            inventory item. If this item is deleted or updated to reference a
            new assetID, the asset can be deleted</summary>
        </member>
        <member name="T:OpenMetaverse.InventoryBase">
            <summary>
            Base Class for Inventory Items
            </summary>
        </member>
        <member name="F:OpenMetaverse.InventoryBase.UUID">
            <summary><seealso cref="T:OpenMetaverse.UUID"/> of item/folder</summary>
        </member>
        <member name="F:OpenMetaverse.InventoryBase.ParentUUID">
            <summary><seealso cref="T:OpenMetaverse.UUID"/> of parent folder</summary>
        </member>
        <member name="F:OpenMetaverse.InventoryBase.Name">
            <summary>Name of item/folder</summary>
        </member>
        <member name="F:OpenMetaverse.InventoryBase.OwnerID">
            <summary>Item/Folder Owners <seealso cref="T:OpenMetaverse.UUID"/></summary>
        </member>
        <member name="M:OpenMetaverse.InventoryBase.#ctor(OpenMetaverse.UUID)">
            <summary>
            Constructor, takes an itemID as a parameter
            </summary>
            <param name="itemID">The <seealso cref="T:OpenMetaverse.UUID"/> of the item</param>
        </member>
        <member name="M:OpenMetaverse.InventoryBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenMetaverse.InventoryBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenMetaverse.InventoryBase.GetHashCode">
            <summary>
            Generates a number corresponding to the value of the object to support the use of a hash table,
            suitable for use in hashing algorithms and data structures such as a hash table
            </summary>
            <returns>A Hashcode of all the combined InventoryBase fields</returns>
        </member>
        <member name="M:OpenMetaverse.InventoryBase.Equals(System.Object)">
            <summary>
            Determine whether the specified <seealso cref="T:OpenMetaverse.InventoryBase"/> object is equal to the current object
            </summary>
            <param name="o">InventoryBase object to compare against</param>
            <returns>true if objects are the same</returns>
        </member>
        <member name="M:OpenMetaverse.InventoryBase.Equals(OpenMetaverse.InventoryBase)">
            <summary>
            Determine whether the specified <seealso cref="T:OpenMetaverse.InventoryBase"/> object is equal to the current object
            </summary>
            <param name="o">InventoryBase object to compare against</param>
            <returns>true if objects are the same</returns>
        </member>
        <member name="T:OpenMetaverse.InventoryItem">
            <summary>
            An Item in Inventory
            </summary>
        </member>
        <member name="F:OpenMetaverse.InventoryItem.AssetUUID">
            <summary>The <seealso cref="T:OpenMetaverse.UUID"/> of this item</summary>
        </member>
        <member name="F:OpenMetaverse.InventoryItem.Permissions">
            <summary>The combined <seealso cref="T:OpenMetaverse.Permissions"/> of this item</summary>
        </member>
        <member name="F:OpenMetaverse.InventoryItem.AssetType">
            <summary>The type of item from <seealso cref="T:OpenMetaverse.AssetType"/></summary>
        </member>
        <member name="F:OpenMetaverse.InventoryItem.InventoryType">
            <summary>The type of item from the <seealso cref="T:OpenMetaverse.InventoryType"/> enum</summary>
        </member>
        <member name="F:OpenMetaverse.InventoryItem.CreatorID">
            <summary>The <seealso cref="T:OpenMetaverse.UUID"/> of the creator of this item</summary>
        </member>
        <member name="F:OpenMetaverse.InventoryItem.Description">
            <summary>A Description of this item</summary>
        </member>
        <member name="F:OpenMetaverse.InventoryItem.GroupID">
            <summary>The <seealso cref="T:OpenMetaverse.Group"/>s <seealso cref="T:OpenMetaverse.UUID"/> this item is set to or owned by</summary>
        </member>
        <member name="F:OpenMetaverse.InventoryItem.GroupOwned">
            <summary>If true, item is owned by a group</summary>
        </member>
        <member name="F:OpenMetaverse.InventoryItem.SalePrice">
            <summary>The price this item can be purchased for</summary>
        </member>
        <member name="F:OpenMetaverse.InventoryItem.SaleType">
            <summary>The type of sale from the <seealso cref="T:OpenMetaverse.SaleType"/> enum</summary>
        </member>
        <member name="F:OpenMetaverse.InventoryItem.Flags">
            <summary>Combined flags from <seealso cref="T:OpenMetaverse.InventoryItemFlags"/></summary>
        </member>
        <member name="F:OpenMetaverse.InventoryItem.CreationDate">
            <summary>Time and date this inventory item was created, stored as
            UTC (Coordinated Universal Time)</summary>
        </member>
        <member name="M:OpenMetaverse.InventoryItem.#ctor(OpenMetaverse.UUID)">
            <summary>
             Construct a new InventoryItem object
            </summary>
            <param name="itemID">The <seealso cref="T:OpenMetaverse.UUID"/> of the item</param>
        </member>
        <member name="M:OpenMetaverse.InventoryItem.#ctor(OpenMetaverse.InventoryType,OpenMetaverse.UUID)">
            <summary>
            Construct a new InventoryItem object of a specific Type
            </summary>
            <param name="type">The type of item from <seealso cref="T:OpenMetaverse.InventoryType"/></param>
            <param name="itemID"><seealso cref="T:OpenMetaverse.UUID"/> of the item</param>
        </member>
        <member name="M:OpenMetaverse.InventoryItem.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenMetaverse.InventoryItem.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenMetaverse.InventoryItem.GetHashCode">
            <summary>
            Generates a number corresponding to the value of the object to support the use of a hash table.
            Suitable for use in hashing algorithms and data structures such as a hash table
            </summary>
            <returns>A Hashcode of all the combined InventoryItem fields</returns>
        </member>
        <member name="M:OpenMetaverse.InventoryItem.Equals(System.Object)">
            <summary>
            Compares an object
            </summary>
            <param name="o">The object to compare</param>
            <returns>true if comparison object matches</returns>
        </member>
        <member name="M:OpenMetaverse.InventoryItem.Equals(OpenMetaverse.InventoryBase)">
            <summary>
            Determine whether the specified <seealso cref="T:OpenMetaverse.InventoryBase"/> object is equal to the current object
            </summary>
            <param name="o">The <seealso cref="T:OpenMetaverse.InventoryBase"/> object to compare against</param>
            <returns>true if objects are the same</returns>
        </member>
        <member name="M:OpenMetaverse.InventoryItem.Equals(OpenMetaverse.InventoryItem)">
            <summary>
            Determine whether the specified <seealso cref="T:OpenMetaverse.InventoryItem"/> object is equal to the current object
            </summary>
            <param name="o">The <seealso cref="T:OpenMetaverse.InventoryItem"/> object to compare against</param>
            <returns>true if objects are the same</returns>
        </member>
        <member name="T:OpenMetaverse.InventoryTexture">
            <summary>
            InventoryTexture Class representing a graphical image
            </summary>
            <seealso cref="!:ManagedImage"/>
        </member>
        <member name="M:OpenMetaverse.InventoryTexture.#ctor(OpenMetaverse.UUID)">
            <summary>
            Construct an InventoryTexture object
            </summary>
            <param name="itemID">A <seealso cref="T:OpenMetaverse.UUID"/> which becomes the 
            <seealso cref="T:OpenMetaverse.InventoryItem"/> objects AssetUUID</param>
        </member>
        <member name="M:OpenMetaverse.InventoryTexture.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construct an InventoryTexture object from a serialization stream
            </summary>
        </member>
        <member name="T:OpenMetaverse.InventorySound">
            <summary>
            InventorySound Class representing a playable sound
            </summary>
        </member>
        <member name="M:OpenMetaverse.InventorySound.#ctor(OpenMetaverse.UUID)">
            <summary>
            Construct an InventorySound object
            </summary>
            <param name="itemID">A <seealso cref="T:OpenMetaverse.UUID"/> which becomes the 
            <seealso cref="T:OpenMetaverse.InventoryItem"/> objects AssetUUID</param>
        </member>
        <member name="M:OpenMetaverse.InventorySound.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construct an InventorySound object from a serialization stream
            </summary>
        </member>
        <member name="T:OpenMetaverse.InventoryCallingCard">
            <summary>
            InventoryCallingCard Class, contains information on another avatar
            </summary>
        </member>
        <member name="M:OpenMetaverse.InventoryCallingCard.#ctor(OpenMetaverse.UUID)">
            <summary>
            Construct an InventoryCallingCard object
            </summary>
            <param name="itemID">A <seealso cref="T:OpenMetaverse.UUID"/> which becomes the 
            <seealso cref="T:OpenMetaverse.InventoryItem"/> objects AssetUUID</param>
        </member>
        <member name="M:OpenMetaverse.InventoryCallingCard.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construct an InventoryCallingCard object from a serialization stream
            </summary>
        </member>
        <member name="T:OpenMetaverse.InventoryLandmark">
            <summary>
            InventoryLandmark Class, contains details on a specific location
            </summary>
        </member>
        <member name="M:OpenMetaverse.InventoryLandmark.#ctor(OpenMetaverse.UUID)">
            <summary>
            Construct an InventoryLandmark object
            </summary>
            <param name="itemID">A <seealso cref="T:OpenMetaverse.UUID"/> which becomes the 
            <seealso cref="T:OpenMetaverse.InventoryItem"/> objects AssetUUID</param>
        </member>
        <member name="M:OpenMetaverse.InventoryLandmark.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construct an InventoryLandmark object from a serialization stream
            </summary>
        </member>
        <member name="P:OpenMetaverse.InventoryLandmark.LandmarkVisited">
            <summary>
            Landmarks use the InventoryItemFlags struct and will have a flag of 1 set if they have been visited
            </summary>
        </member>
        <member name="T:OpenMetaverse.InventoryObject">
            <summary>
            InventoryObject Class contains details on a primitive or coalesced set of primitives
            </summary>
        </member>
        <member name="M:OpenMetaverse.InventoryObject.#ctor(OpenMetaverse.UUID)">
            <summary>
            Construct an InventoryObject object
            </summary>
            <param name="itemID">A <seealso cref="T:OpenMetaverse.UUID"/> which becomes the 
            <seealso cref="T:OpenMetaverse.InventoryItem"/> objects AssetUUID</param>
        </member>
        <member name="M:OpenMetaverse.InventoryObject.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construct an InventoryObject object from a serialization stream
            </summary>
        </member>
        <member name="P:OpenMetaverse.InventoryObject.ItemFlags">
            <summary>
            Gets or sets the upper byte of the Flags value
            </summary>
        </member>
        <member name="T:OpenMetaverse.InventoryNotecard">
            <summary>
            InventoryNotecard Class, contains details on an encoded text document
            </summary>
        </member>
        <member name="M:OpenMetaverse.InventoryNotecard.#ctor(OpenMetaverse.UUID)">
            <summary>
            Construct an InventoryNotecard object
            </summary>
            <param name="itemID">A <seealso cref="T:OpenMetaverse.UUID"/> which becomes the 
            <seealso cref="T:OpenMetaverse.InventoryItem"/> objects AssetUUID</param>
        </member>
        <member name="M:OpenMetaverse.InventoryNotecard.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construct an InventoryNotecard object from a serialization stream
            </summary>
        </member>
        <member name="T:OpenMetaverse.InventoryCategory">
            <summary>
            InventoryCategory Class
            </summary>
            <remarks>TODO: Is this even used for anything?</remarks>
        </member>
        <member name="M:OpenMetaverse.InventoryCategory.#ctor(OpenMetaverse.UUID)">
            <summary>
            Construct an InventoryCategory object
            </summary>
            <param name="itemID">A <seealso cref="T:OpenMetaverse.UUID"/> which becomes the 
            <seealso cref="T:OpenMetaverse.InventoryItem"/> objects AssetUUID</param>
        </member>
        <member name="M:OpenMetaverse.InventoryCategory.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construct an InventoryCategory object from a serialization stream
            </summary>
        </member>
        <member name="T:OpenMetaverse.InventoryLSL">
            <summary>
            InventoryLSL Class, represents a Linden Scripting Language object
            </summary>
        </member>
        <member name="M:OpenMetaverse.InventoryLSL.#ctor(OpenMetaverse.UUID)">
            <summary>
            Construct an InventoryLSL object
            </summary>
            <param name="itemID">A <seealso cref="T:OpenMetaverse.UUID"/> which becomes the 
            <seealso cref="T:OpenMetaverse.InventoryItem"/> objects AssetUUID</param>
        </member>
        <member name="M:OpenMetaverse.InventoryLSL.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construct an InventoryLSL object from a serialization stream
            </summary>
        </member>
        <member name="T:OpenMetaverse.InventorySnapshot">
            <summary>
            InventorySnapshot Class, an image taken with the viewer
            </summary>
        </member>
        <member name="M:OpenMetaverse.InventorySnapshot.#ctor(OpenMetaverse.UUID)">
            <summary>
            Construct an InventorySnapshot object
            </summary>
            <param name="itemID">A <seealso cref="T:OpenMetaverse.UUID"/> which becomes the 
            <seealso cref="T:OpenMetaverse.InventoryItem"/> objects AssetUUID</param>
        </member>
        <member name="M:OpenMetaverse.InventorySnapshot.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construct an InventorySnapshot object from a serialization stream
            </summary>
        </member>
        <member name="T:OpenMetaverse.InventoryAttachment">
            <summary>
            InventoryAttachment Class, contains details on an attachable object
            </summary>
        </member>
        <member name="M:OpenMetaverse.InventoryAttachment.#ctor(OpenMetaverse.UUID)">
            <summary>
            Construct an InventoryAttachment object
            </summary>
            <param name="itemID">A <seealso cref="T:OpenMetaverse.UUID"/> which becomes the 
            <seealso cref="T:OpenMetaverse.InventoryItem"/> objects AssetUUID</param>
        </member>
        <member name="M:OpenMetaverse.InventoryAttachment.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construct an InventoryAttachment object from a serialization stream
            </summary>
        </member>
        <member name="P:OpenMetaverse.InventoryAttachment.AttachmentPoint">
            <summary>
            Get the last AttachmentPoint this object was attached to
            </summary>
        </member>
        <member name="T:OpenMetaverse.InventoryWearable">
            <summary>
            InventoryWearable Class, details on a clothing item or body part
            </summary>
        </member>
        <member name="M:OpenMetaverse.InventoryWearable.#ctor(OpenMetaverse.UUID)">
            <summary>
            Construct an InventoryWearable object
            </summary>
            <param name="itemID">A <seealso cref="T:OpenMetaverse.UUID"/> which becomes the 
            <seealso cref="T:OpenMetaverse.InventoryItem"/> objects AssetUUID</param>
        </member>
        <member name="M:OpenMetaverse.InventoryWearable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construct an InventoryWearable object from a serialization stream
            </summary>
        </member>
        <member name="P:OpenMetaverse.InventoryWearable.WearableType">
            <summary>
            The <seealso cref="T:OpenMetaverse.WearableType"/>, Skin, Shape, Skirt, Etc
            </summary>
        </member>
        <member name="T:OpenMetaverse.InventoryAnimation">
            <summary>
            InventoryAnimation Class, A bvh encoded object which animates an avatar
            </summary>
        </member>
        <member name="M:OpenMetaverse.InventoryAnimation.#ctor(OpenMetaverse.UUID)">
            <summary>
            Construct an InventoryAnimation object
            </summary>
            <param name="itemID">A <seealso cref="T:OpenMetaverse.UUID"/> which becomes the 
            <seealso cref="T:OpenMetaverse.InventoryItem"/> objects AssetUUID</param>
        </member>
        <member name="M:OpenMetaverse.InventoryAnimation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construct an InventoryAnimation object from a serialization stream
            </summary>
        </member>
        <member name="T:OpenMetaverse.InventoryGesture">
            <summary>
            InventoryGesture Class, details on a series of animations, sounds, and actions
            </summary>
        </member>
        <member name="M:OpenMetaverse.InventoryGesture.#ctor(OpenMetaverse.UUID)">
            <summary>
            Construct an InventoryGesture object
            </summary>
            <param name="itemID">A <seealso cref="T:OpenMetaverse.UUID"/> which becomes the 
            <seealso cref="T:OpenMetaverse.InventoryItem"/> objects AssetUUID</param>
        </member>
        <member name="M:OpenMetaverse.InventoryGesture.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construct an InventoryGesture object from a serialization stream
            </summary>
        </member>
        <member name="T:OpenMetaverse.InventoryFolder">
            <summary>
            A folder contains <seealso cref="T:OpenMetaverse.InventoryItem"/>s and has certain attributes specific 
            to itself
            </summary>
        </member>
        <member name="F:OpenMetaverse.InventoryFolder.PreferredType">
            <summary>The Preferred <seealso cref="T:OpenMetaverse.AssetType"/> for a folder.</summary>
        </member>
        <member name="F:OpenMetaverse.InventoryFolder.Version">
            <summary>The Version of this folder</summary>
        </member>
        <member name="F:OpenMetaverse.InventoryFolder.DescendentCount">
            <summary>Number of child items this folder contains.</summary>
        </member>
        <member name="M:OpenMetaverse.InventoryFolder.#ctor(OpenMetaverse.UUID)">
            <summary>
            Constructor
            </summary>
            <param name="itemID">UUID of the folder</param>
        </member>
        <member name="M:OpenMetaverse.InventoryFolder.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenMetaverse.InventoryFolder.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Get Serilization data for this InventoryFolder object
            </summary>
        </member>
        <member name="M:OpenMetaverse.InventoryFolder.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construct an InventoryFolder object from a serialization stream
            </summary>
        </member>
        <member name="M:OpenMetaverse.InventoryFolder.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenMetaverse.InventoryFolder.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:OpenMetaverse.InventoryFolder.Equals(OpenMetaverse.InventoryBase)">
            <summary>
            
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:OpenMetaverse.InventoryFolder.Equals(OpenMetaverse.InventoryFolder)">
            <summary>
            
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="T:OpenMetaverse.InventoryManager">
            <summary>
            Tools for dealing with agents inventory
            </summary>
        </member>
        <member name="F:OpenMetaverse.InventoryManager._NewFolderNames">
            <summary>Partial mapping of AssetTypes to folder names</summary>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.#ctor(OpenMetaverse.GridClient)">
            <summary>
            Default constructor
            </summary>
            <param name="client">Reference to the GridClient object</param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.FetchItem(OpenMetaverse.UUID,OpenMetaverse.UUID,System.Int32)">
            <summary>
            Fetch an inventory item from the dataserver
            </summary>
            <param name="itemID">The items <seealso cref="T:OpenMetaverse.UUID"/></param>
            <param name="ownerID">The item Owners <seealso cref="T:OpenMetaverse.UUID"/></param>
            <param name="timeoutMS">a integer representing the number of milliseconds to wait for results</param>
            <returns>An <seealso cref="T:OpenMetaverse.InventoryItem"/> object on success, or null if no item was found</returns>
            <remarks>Items will also be sent to the <seealso cref="E:OpenMetaverse.InventoryManager.OnItemReceived"/> event</remarks>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.RequestFetchInventory(OpenMetaverse.UUID,OpenMetaverse.UUID)">
            <summary>
            Request A single inventory item
            </summary>
            <param name="itemID">The items <seealso cref="T:OpenMetaverse.UUID"/></param>
            <param name="ownerID">The item Owners <seealso cref="T:OpenMetaverse.UUID"/></param>
            <seealso cref="E:OpenMetaverse.InventoryManager.OnItemReceived"/>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.RequestFetchInventory(System.Collections.Generic.List{OpenMetaverse.UUID},System.Collections.Generic.List{OpenMetaverse.UUID})">
            <summary>
            Request inventory items
            </summary>
            <param name="itemIDs">Inventory items to request</param>
            <param name="ownerIDs">Owners of the inventory items</param>
            <seealso cref="E:OpenMetaverse.InventoryManager.OnItemReceived"/>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.FolderContents(OpenMetaverse.UUID,OpenMetaverse.UUID,System.Boolean,System.Boolean,OpenMetaverse.InventorySortOrder,System.Int32)">
            <summary>
            Get contents of a folder
            </summary>
            <param name="folder">The <seealso cref="T:OpenMetaverse.UUID"/> of the folder to search</param>
            <param name="owner">The <seealso cref="T:OpenMetaverse.UUID"/> of the folders owner</param>
            <param name="folders">true to retrieve folders</param>
            <param name="items">true to retrieve items</param>
            <param name="order">sort order to return results in</param>
            <param name="timeoutMS">a integer representing the number of milliseconds to wait for results</param>
            <returns>A list of inventory items matching search criteria within folder</returns>
            <seealso cref="M:OpenMetaverse.InventoryManager.RequestFolderContents(OpenMetaverse.UUID,OpenMetaverse.UUID,System.Boolean,System.Boolean,OpenMetaverse.InventorySortOrder)"/>
            <remarks>InventoryFolder.DescendentCount will only be accurate if both folders and items are
            requested</remarks>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.RequestFolderContents(OpenMetaverse.UUID,OpenMetaverse.UUID,System.Boolean,System.Boolean,OpenMetaverse.InventorySortOrder)">
            <summary>
            Request the contents of an inventory folder
            </summary>
            <param name="folder">The folder to search</param>
            <param name="owner">The folder owners <seealso cref="T:OpenMetaverse.UUID"/></param>
            <param name="folders">true to return <seealso cref="!:InventoryManager.InventoryFolder"/>s contained in folder</param>
            <param name="items">true to return <seealso cref="!:InventoryManager.InventoryItem"/>s containd in folder</param>
            <param name="order">the sort order to return items in</param>
            <seealso cref="M:OpenMetaverse.InventoryManager.FolderContents(OpenMetaverse.UUID,OpenMetaverse.UUID,System.Boolean,System.Boolean,OpenMetaverse.InventorySortOrder,System.Int32)"/>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.FindFolderForType(OpenMetaverse.AssetType)">
            <summary>
            Returns the UUID of the folder (category) that defaults to
            containing 'type'. The folder is not necessarily only for that
            type
            </summary>
            <remarks>This will return the root folder if one does not exist</remarks>
            <param name="type"></param>
            <returns>The UUID of the desired folder if found, the UUID of the RootFolder
            if not found, or UUID.Zero on failure</returns>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.FindObjectByPath(OpenMetaverse.UUID,OpenMetaverse.UUID,System.String,System.Int32)">
            <summary>
            Find an object in inventory using a specific path to search
            </summary>
            <param name="baseFolder">The folder to begin the search in</param>
            <param name="inventoryOwner">The object owners <seealso cref="T:OpenMetaverse.UUID"/></param>
            <param name="path">A string path to search</param>
            <param name="timeoutMS">milliseconds to wait for a reply</param>
            <returns>Found items <seealso cref="T:OpenMetaverse.UUID"/> or <seealso cref="F:OpenMetaverse.UUID.Zero"/> if 
            timeout occurs or item is not found</returns>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.RequestFindObjectByPath(OpenMetaverse.UUID,OpenMetaverse.UUID,System.String)">
            <summary>
            Find inventory items by path
            </summary>
            <param name="baseFolder">The folder to begin the search in</param>
            <param name="inventoryOwner">The object owners <seealso cref="T:OpenMetaverse.UUID"/></param>
            <param name="path">A string path to search, folders/objects separated by a '/'</param>
            <remarks>Results are sent to the <seealso cref="E:OpenMetaverse.InventoryManager.OnFindObjectByPath"/> event</remarks>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.LocalFind(OpenMetaverse.UUID,System.String[],System.Int32,System.Boolean)">
            <summary>
            Search inventory Store object for an item or folder
            </summary>
            <param name="baseFolder">The folder to begin the search in</param>
            <param name="path">An array which creates a path to search</param>
            <param name="level">Number of levels below baseFolder to conduct searches</param>
            <param name="firstOnly">if True, will stop searching after first match is found</param>
            <returns>A list of inventory items found</returns>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.Move(OpenMetaverse.InventoryBase,OpenMetaverse.InventoryFolder)">
            <summary>
            Move an inventory item or folder to a new location
            </summary>
            <param name="item">The <seealso cref="T:InventoryBase"/> item or folder to move</param>
            <param name="newParent">The <seealso cref="T:InventoryFolder"/> to move item or folder to</param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.Move(OpenMetaverse.InventoryBase,OpenMetaverse.InventoryFolder,System.String)">
            <summary>
            Move an inventory item or folder to a new location and change its name
            </summary>
            <param name="item">The <seealso cref="T:InventoryBase"/> item or folder to move</param>
            <param name="newParent">The <seealso cref="T:InventoryFolder"/> to move item or folder to</param>
            <param name="newName">The name to change the item or folder to</param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.MoveFolder(OpenMetaverse.UUID,OpenMetaverse.UUID,System.String)">
            <summary>
            Move and rename a folder
            </summary>
            <param name="folderID">The source folders <seealso cref="T:OpenMetaverse.UUID"/></param>
            <param name="newparentID">The destination folders <seealso cref="T:OpenMetaverse.UUID"/></param>
            <param name="newName">The name to change the folder to</param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.MoveFolder(OpenMetaverse.UUID,OpenMetaverse.UUID)">
            <summary>
            Move a folder
            </summary>
            <param name="folderID">The source folders <seealso cref="T:OpenMetaverse.UUID"/></param>
            <param name="newParentID">The destination folders <seealso cref="T:OpenMetaverse.UUID"/></param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.MoveFolders(System.Collections.Generic.Dictionary{OpenMetaverse.UUID,OpenMetaverse.UUID})">
            <summary>
            Move multiple folders, the keys in the Dictionary parameter,
            to a new parents, the value of that folder's key.
            </summary>
            <param name="foldersNewParents">A Dictionary containing the 
            <seealso cref="T:OpenMetaverse.UUID"/> of the source as the key, and the 
            <seealso cref="T:OpenMetaverse.UUID"/> of the destination as the value</param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.MoveItem(OpenMetaverse.UUID,OpenMetaverse.UUID)">
            <summary>
            Move an inventory item to a new folder
            </summary>
            <param name="itemID">The <seealso cref="T:OpenMetaverse.UUID"/> of the source item to move</param>
            <param name="folderID">The <seealso cref="T:OpenMetaverse.UUID"/> of the destination folder</param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.MoveItem(OpenMetaverse.UUID,OpenMetaverse.UUID,System.String)">
            <summary>
            Move and rename an inventory item
            </summary>
            <param name="itemID">The <seealso cref="T:OpenMetaverse.UUID"/> of the source item to move</param>
            <param name="folderID">The <seealso cref="T:OpenMetaverse.UUID"/> of the destination folder</param>
            <param name="newName">The name to change the folder to</param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.MoveItems(System.Collections.Generic.Dictionary{OpenMetaverse.UUID,OpenMetaverse.UUID})">
            <summary>
            Move multiple inventory items to new locations
            </summary>
            <param name="itemsNewParents">A Dictionary containing the 
            <seealso cref="T:OpenMetaverse.UUID"/> of the source item as the key, and the 
            <seealso cref="T:OpenMetaverse.UUID"/> of the destination folder as the value</param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.RemoveDescendants(OpenMetaverse.UUID)">
            <summary>
            Remove descendants of a folder
            </summary>
            <param name="folder">The <seealso cref="T:OpenMetaverse.UUID"/> of the folder</param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.RemoveItem(OpenMetaverse.UUID)">
            <summary>
            Remove a single item from inventory
            </summary>
            <param name="item">The <seealso cref="T:OpenMetaverse.UUID"/> of the inventory item to remove</param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.RemoveFolder(OpenMetaverse.UUID)">
            <summary>
            Remove a folder from inventory
            </summary>
            <param name="folder">The <seealso cref="T:OpenMetaverse.UUID"/> of the folder to remove</param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.Remove(System.Collections.Generic.List{OpenMetaverse.UUID},System.Collections.Generic.List{OpenMetaverse.UUID})">
            <summary>
            Remove multiple items or folders from inventory
            </summary>
            <param name="items">A List containing the <seealso cref="T:OpenMetaverse.UUID"/>s of items to remove</param>
            <param name="folders">A List containing the <seealso cref="T:OpenMetaverse.UUID"/>s of the folders to remove</param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.EmptyLostAndFound">
            <summary>
            Empty the Lost and Found folder
            </summary>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.EmptyTrash">
            <summary>
            Empty the Trash folder
            </summary>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.RequestCreateItem(OpenMetaverse.UUID,System.String,System.String,OpenMetaverse.AssetType,OpenMetaverse.UUID,OpenMetaverse.InventoryType,OpenMetaverse.PermissionMask,OpenMetaverse.InventoryManager.ItemCreatedCallback)">
            <summary>
            
            </summary>
            <param name="parentFolder"></param>
            <param name="name"></param>
            <param name="description"></param>
            <param name="type"></param>
            <param name="assetTransactionID">Proper use is to upload the inventory's asset first, then provide the Asset's TransactionID here.</param>
            <param name="invType"></param>
            <param name="nextOwnerMask"></param>
            <param name="callback"></param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.RequestCreateItem(OpenMetaverse.UUID,System.String,System.String,OpenMetaverse.AssetType,OpenMetaverse.UUID,OpenMetaverse.InventoryType,OpenMetaverse.WearableType,OpenMetaverse.PermissionMask,OpenMetaverse.InventoryManager.ItemCreatedCallback)">
            <summary>
            
            </summary>
            <param name="parentFolder"></param>
            <param name="name"></param>
            <param name="description"></param>
            <param name="type"></param>
            <param name="assetTransactionID">Proper use is to upload the inventory's asset first, then provide the Asset's TransactionID here.</param>
            <param name="invType"></param>
            <param name="wearableType"></param>
            <param name="nextOwnerMask"></param>
            <param name="callback"></param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.CreateFolder(OpenMetaverse.UUID,System.String)">
            <summary>
            Creates a new inventory folder
            </summary>
            <param name="parentID">ID of the folder to put this folder in</param>
            <param name="name">Name of the folder to create</param>
            <returns>The UUID of the newly created folder</returns>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.CreateFolder(OpenMetaverse.UUID,System.String,OpenMetaverse.AssetType)">
            <summary>
            Creates a new inventory folder
            </summary>
            <param name="parentID">ID of the folder to put this folder in</param>
            <param name="name">Name of the folder to create</param>
            <param name="preferredType">Sets this folder as the default folder
            for new assets of the specified type. Use <code>AssetType.Unknown</code>
            to create a normal folder, otherwise it will likely create a
            duplicate of an existing folder type</param>
            <returns>The UUID of the newly created folder</returns>
            <remarks>If you specify a preferred type of <code>AsseType.Folder</code>
            it will create a new root folder which may likely cause all sorts
            of strange problems</remarks>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.RequestCopyItem(OpenMetaverse.UUID,OpenMetaverse.UUID,System.String,OpenMetaverse.InventoryManager.ItemCopiedCallback)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="newParent"></param>
            <param name="newName"></param>
            <param name="callback"></param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.RequestCopyItem(OpenMetaverse.UUID,OpenMetaverse.UUID,System.String,OpenMetaverse.UUID,OpenMetaverse.InventoryManager.ItemCopiedCallback)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="newParent"></param>
            <param name="newName"></param>
            <param name="oldOwnerID"></param>
            <param name="callback"></param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.RequestCopyItems(System.Collections.Generic.List{OpenMetaverse.UUID},System.Collections.Generic.List{OpenMetaverse.UUID},System.Collections.Generic.List{System.String},OpenMetaverse.UUID,OpenMetaverse.InventoryManager.ItemCopiedCallback)">
            <summary>
            
            </summary>
            <param name="items"></param>
            <param name="targetFolders"></param>
            <param name="newNames"></param>
            <param name="oldOwnerID"></param>
            <param name="callback"></param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.RequestCopyItemFromNotecard(OpenMetaverse.UUID,OpenMetaverse.UUID,OpenMetaverse.UUID,OpenMetaverse.UUID,OpenMetaverse.InventoryManager.ItemCopiedCallback)">
            <summary>
            Request a copy of an asset embedded within a notecard
            </summary>
            <param name="objectID">Usually UUID.Zero for copying an asset from a notecard</param>
            <param name="notecardID">UUID of the notecard to request an asset from</param>
            <param name="folderID">Target folder for asset to go to in your inventory</param>
            <param name="itemID">UUID of the embedded asset</param>
            <param name="callback">callback to run when item is copied to inventory</param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.RequestUpdateItem(OpenMetaverse.InventoryItem)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.RequestUpdateItems(System.Collections.Generic.List{OpenMetaverse.InventoryItem})">
            <summary>
            
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.RequestUpdateItems(System.Collections.Generic.List{OpenMetaverse.InventoryItem},OpenMetaverse.UUID)">
            <summary>
            
            </summary>
            <param name="items"></param>
            <param name="transactionID"></param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.RequestUploadNotecardAsset(System.Byte[],OpenMetaverse.UUID,OpenMetaverse.InventoryManager.NotecardUploadedAssetCallback)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <param name="notecardID"></param>
            <param name="callback"></param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.RequestRezFromInventory(OpenMetaverse.Simulator,OpenMetaverse.Quaternion,OpenMetaverse.Vector3,OpenMetaverse.InventoryItem)">
            <summary>
            Rez an object from inventory
            </summary>
            <param name="simulator">Simulator to place object in</param>
            <param name="rotation">Rotation of the object when rezzed</param>
            <param name="position">Vector of where to place object</param>
            <param name="item">InventoryItem object containing item details</param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.RequestRezFromInventory(OpenMetaverse.Simulator,OpenMetaverse.Quaternion,OpenMetaverse.Vector3,OpenMetaverse.InventoryItem,OpenMetaverse.UUID)">
            <summary>
            Rez an object from inventory
            </summary>
            <param name="simulator">Simulator to place object in</param>
            <param name="rotation">Rotation of the object when rezzed</param>
            <param name="position">Vector of where to place object</param>
            <param name="item">InventoryItem object containing item details</param>
            <param name="groupOwner">UUID of group to own the object</param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.RequestRezFromInventory(OpenMetaverse.Simulator,OpenMetaverse.Quaternion,OpenMetaverse.Vector3,OpenMetaverse.InventoryItem,OpenMetaverse.UUID,OpenMetaverse.UUID,System.Boolean)">
            <summary>
            Rez an object from inventory
            </summary>
            <param name="simulator">Simulator to place object in</param>
            <param name="rotation">Rotation of the object when rezzed</param>
            <param name="position">Vector of where to place object</param>
            <param name="item">InventoryItem object containing item details</param>
            <param name="groupOwner">UUID of group to own the object</param>        
            <param name="queryID">User defined queryID to correlate replies</param>
            <param name="requestObjectDetails">if set to true the simulator
            will automatically send object detail packet(s) back to the client</param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.RequestDeRezToInventory(System.UInt32)">
            <summary>
            DeRez an object from the simulator to the agents Objects folder in the agents Inventory
            </summary>
            <param name="objectLocalID">The simulator Local ID of the object</param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.RequestDeRezToInventory(System.UInt32,OpenMetaverse.DeRezDestination,OpenMetaverse.UUID,OpenMetaverse.UUID)">
            <summary>
            DeRez an object from the simulator and return to inventory
            </summary>
            <param name="objectLocalID">The simulator Local ID of the object</param>
            <param name="destType">The type of destination from the <seealso cref="T:OpenMetaverse.DeRezDestination"/> enum</param>
            <param name="destFolder">The destination inventory folders <seealso cref="T:OpenMetaverse.UUID"/> -or- 
            if DeRezzing object to a tasks Inventory, the Tasks <seealso cref="T:OpenMetaverse.UUID"/></param>
            <param name="transactionID">The transaction ID for this request which
            can be used to correlate this request with other packets</param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.GiveItem(OpenMetaverse.UUID,System.String,OpenMetaverse.AssetType,OpenMetaverse.UUID,System.Boolean)">
            <summary>
            Give an inventory item to another avatar
            </summary>
            <param name="itemID">The <seealso cref="T:OpenMetaverse.UUID"/> of the item to give</param>
            <param name="itemName">The name of the item</param>
            <param name="assetType">The type of the item from the <seealso cref="T:OpenMetaverse.AssetType"/> enum</param>
            <param name="recipient">The <seealso cref="T:OpenMetaverse.UUID"/> of the recipient</param>
            <param name="doEffect">true to generate a beameffect during transfer</param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.GiveFolder(OpenMetaverse.UUID,System.String,OpenMetaverse.AssetType,OpenMetaverse.UUID,System.Boolean)">
            <summary>
            Give an inventory Folder with contents to another avatar
            </summary>
            <param name="folderID">The <seealso cref="T:OpenMetaverse.UUID"/> of the Folder to give</param>
            <param name="folderName">The name of the folder</param>
            <param name="assetType">The type of the item from the <seealso cref="T:OpenMetaverse.AssetType"/> enum</param>
            <param name="recipient">The <seealso cref="T:OpenMetaverse.UUID"/> of the recipient</param>
            <param name="doEffect">true to generate a beameffect during transfer</param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.UpdateTaskInventory(System.UInt32,OpenMetaverse.InventoryItem)">
            <summary>
            
            </summary>
            <param name="objectLocalID"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.GetTaskInventory(OpenMetaverse.UUID,System.UInt32,System.Int32)">
            <summary>
            Get the inventory of a Task (Primitive)
            </summary>
            <param name="objectID">The tasks <seealso cref="T:OpenMetaverse.UUID"/></param>
            <param name="objectLocalID">The tasks simulator local ID</param>
            <param name="timeoutMS">milliseconds to wait for reply from simulator</param>
            <returns>A List containing the inventory items inside the task</returns>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.RequestTaskInventory(System.UInt32)">
            <summary>
            
            </summary>
            <param name="objectLocalID"></param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.RequestTaskInventory(System.UInt32,OpenMetaverse.Simulator)">
            <summary>
            Request the contents of a tasks (primitives) inventory
            </summary>
            <param name="objectLocalID">The simulator Local ID of the object</param>
            <param name="simulator">A reference to the simulator object that contains the object</param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.MoveTaskInventory(System.UInt32,OpenMetaverse.UUID,OpenMetaverse.UUID,OpenMetaverse.Simulator)">
            <summary>
            Moves an Item from an objects (Prim) Inventory to the specified folder in the avatars inventory
            </summary>
            <param name="objectLocalID">LocalID of the object in the simulator</param>
            <param name="taskItemID">UUID of the task item to move</param>
            <param name="inventoryFolderID">UUID of the folder to move the item to</param>
            <param name="simulator">Simulator Object</param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.RemoveTaskInventory(System.UInt32,OpenMetaverse.UUID,OpenMetaverse.Simulator)">
            <summary>
            Remove an item from an objects (Prim) Inventory
            </summary>
            <param name="objectLocalID">LocalID of the object in the simulator</param>
            <param name="taskItemID">UUID of the task item to remove</param>
            <param name="simulator">Simulator Object</param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.CopyScriptToTask(System.UInt32,OpenMetaverse.InventoryItem)">
             <summary>
             Copy an InventoryScript item from the Agents Inventory into a primitives task inventory
             </summary>
             <param name="objectLocalID">An unsigned integer representing a primitive being simulated</param>
             <param name="item">An <seealso cref="T:OpenMetaverse.InventoryItem"/> which represents a script object from the agents inventory</param>
             <returns>A Unique Transaction ID</returns>
             <remarks>
             <code>
                uint Prim = 95899503; // Fake prim ID
                UUID Script = UUID.Parse("92a7fe8a-e949-dd39-a8d8-1681d8673232"); // Fake Script UUID in Inventory
            
                Client.Inventory.FolderContents(Client.Inventory.FindFolderForType(AssetType.LSLText), Client.Self.AgentID, 
                    false, true, InventorySortOrder.ByName, 10000);
            
                UUID Transaction = Client.Inventory.RezScript(Prim, (InventoryItem)Client.Inventory.Store[Script]);
             </code>
             </remarks>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.AssetTypeToString(OpenMetaverse.AssetType)">
            <summary>
            Takes an AssetType and returns the string representation
            </summary>
            <param name="type">The source <seealso cref="T:OpenMetaverse.AssetType"/></param>
            <returns>The string version of the AssetType</returns>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.StringToAssetType(System.String)">
            <summary>
            Translate a string name of an AssetType into the proper Type
            </summary>
            <param name="type">A string containing the AssetType name</param>
            <returns>The AssetType which matches the string name, or AssetType.Unknown if no match was found</returns>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.InventoryTypeToString(OpenMetaverse.InventoryType)">
            <summary>
            Convert an InventoryType to a string
            </summary>
            <param name="type">The <seealso cref="T:InventoryType"/> to convert</param>
            <returns>A string representation of the source </returns>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.StringToInventoryType(System.String)">
            <summary>
            Convert a string into a valid InventoryType
            </summary>
            <param name="type">A string representation of the InventoryType to convert</param>
            <returns>A InventoryType object which matched the type</returns>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.ItemCRC(OpenMetaverse.InventoryItem)">
            <summary>
            Create a CRC from an InventoryItem
            </summary>
            <param name="iitem">The source InventoryItem</param>
            <returns>A uint representing the source InventoryItem as a CRC</returns>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.CreateInventoryItem(OpenMetaverse.InventoryType,OpenMetaverse.UUID)">
            <summary>
            Wrapper for creating a new <seealso cref="T:OpenMetaverse.InventoryItem"/> object
            </summary>
            <param name="type">The type of item from the <seealso cref="T:OpenMetaverse.InventoryType"/> enum</param>
            <param name="id">The <seealso cref="T:OpenMetaverse.UUID"/> of the newly created object</param>
            <returns>An <seealso cref="T:OpenMetaverse.InventoryItem"/> object with the type and id passed</returns>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.ParseTaskInventory(System.String)">
            <summary>
            Parse the results of a RequestTaskInventory() response
            </summary>
            <param name="taskData">A string which contains the data from the task reply</param>
            <returns>A List containing the items contained within the tasks inventory</returns>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.UpdateCreateInventoryItemHandler(OpenMetaverse.Packets.Packet,OpenMetaverse.Simulator)">
            <summary>
            UpdateCreateInventoryItem packets are received when a new inventory item 
            is created. This may occur when an object that's rezzed in world is
            taken into inventory, when an item is created using the CreateInventoryItem
            packet, or when an object is purchased
            </summary>
        </member>
        <member name="E:OpenMetaverse.InventoryManager.OnItemReceived">
            <summary>
            Fired when a reply to a RequestFetchInventory() is received
            </summary>
            <seealso cref="M:OpenMetaverse.InventoryManager.RequestFetchInventory(OpenMetaverse.UUID,OpenMetaverse.UUID)"/>
        </member>
        <member name="E:OpenMetaverse.InventoryManager.OnFolderUpdated">
            <summary>
            Fired when a response to a RequestFolderContents() is received 
            </summary>
            <seealso cref="M:OpenMetaverse.InventoryManager.RequestFolderContents(OpenMetaverse.UUID,OpenMetaverse.UUID,System.Boolean,System.Boolean,OpenMetaverse.InventorySortOrder)"/>
        </member>
        <member name="E:OpenMetaverse.InventoryManager.OnObjectOffered">
            <summary>
            Fired when an object or another avatar offers us an inventory item
            </summary>
        </member>
        <member name="E:OpenMetaverse.InventoryManager.OnFindObjectByPath">
            <summary>
            Fired when a response to FindObjectByPath() is received
            </summary>
            <seealso cref="M:OpenMetaverse.InventoryManager.FindObjectByPath(OpenMetaverse.UUID,OpenMetaverse.UUID,System.String,System.Int32)"/>
        </member>
        <member name="E:OpenMetaverse.InventoryManager.OnTaskItemReceived">
            <summary>
            Fired when a task inventory item is received
            
            This may occur when an object that's rezzed in world is
            taken into inventory, when an item is created using the CreateInventoryItem
            packet, or when an object is purchased
            </summary>
        </member>
        <member name="E:OpenMetaverse.InventoryManager.OnTaskInventoryReply">
            <summary>
            Fired in response to a request for a tasks (primitive) inventory
            </summary>
            <seealso cref="M:OpenMetaverse.InventoryManager.GetTaskInventory(OpenMetaverse.UUID,System.UInt32,System.Int32)"/>
            <seealso cref="M:OpenMetaverse.InventoryManager.RequestTaskInventory(System.UInt32)"/>
        </member>
        <member name="E:OpenMetaverse.InventoryManager.OnSaveAssetToInventory">
            <summary>
            Fired when a SaveAssetToInventory packet is received, generally after the logout reply handler
            </summary>
        </member>
        <member name="P:OpenMetaverse.InventoryManager.Store">
            <summary>
            Get this agents Inventory data
            </summary>
        </member>
        <member name="T:OpenMetaverse.InventoryManager.ItemCreatedCallback">
            <summary>
            Callback for inventory item creation finishing
            </summary>
            <param name="success">Whether the request to create an inventory
            item succeeded or not</param>
            <param name="item">Inventory item being created. If success is
            false this will be null</param>
        </member>
        <member name="T:OpenMetaverse.InventoryManager.ItemCreatedFromAssetCallback">
            <summary>
            Callback for an inventory item being create from an uploaded asset
            </summary>
            <param name="success">true if inventory item creation was successful</param>
            <param name="status"></param>
            <param name="itemID"></param>
            <param name="assetID"></param>
        </member>
        <member name="T:OpenMetaverse.InventoryManager.ItemCopiedCallback">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="T:OpenMetaverse.InventoryManager.ItemReceivedCallback">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="T:OpenMetaverse.InventoryManager.FolderUpdatedCallback">
            <summary>
            Callback for an inventory folder updating
            </summary>
            <param name="folderID">UUID of the folder that was updated</param>
        </member>
        <member name="T:OpenMetaverse.InventoryManager.ObjectOfferedCallback">
            <summary>
            Callback for when an inventory item is offered to us by another avatar or an object
            </summary>
            <param name="offerDetails">A <seealso cref="T:OpenMetaverse.InstantMessage"/> object containing specific
            details on the item being offered, eg who its from</param>
            <param name="type">The <seealso cref="T:OpenMetaverse.AssetType"/>AssetType being offered</param>
            <param name="objectID">Will be null if item is offered from an object</param>
            <param name="fromTask">will be true of item is offered from an object</param>
            <returns>Return true to accept the offer, or false to decline it</returns>
        </member>
        <member name="T:OpenMetaverse.InventoryManager.TaskItemReceivedCallback">
            <summary>
            Callback when an inventory object is accepted and received from a
            task inventory. This is the callback in which you actually get
            the ItemID, as in ObjectOfferedCallback it is null when received
            from a task.
            </summary>
            <param name="itemID"></param>
            <param name="folderID"></param>
            <param name="creatorID"></param>
            <param name="assetID"></param>
            <param name="type"></param>
        </member>
        <member name="T:OpenMetaverse.InventoryManager.FindObjectByPathCallback">
            <summary>
            
            </summary>
            <param name="path"></param>
            <param name="inventoryObjectID"></param>
        </member>
        <member name="T:OpenMetaverse.InventoryManager.TaskInventoryReplyCallback">
            <summary>
            Reply received after calling <code>RequestTaskInventory</code>,
            contains a filename that can be used in an asset download request
            </summary>
            <param name="itemID">UUID of the inventory item</param>
            <param name="serial">Version number of the task inventory asset</param>
            <param name="assetFilename">Filename of the task inventory asset</param>
        </member>
        <member name="T:OpenMetaverse.InventoryManager.NotecardUploadedAssetCallback">
            <summary>
            
            </summary>
            <param name="success"></param>
            <param name="status"></param>
            <param name="itemID"></param>
            <param name="assetID"></param>
        </member>
        <member name="T:OpenMetaverse.InventoryManager.SaveAssetToInventoryCallback">
            <summary>
            Fired when local inventory store needs to be updated. Generally at logout to update a local cache
            </summary>
            <param name="itemID">the assets UUID</param>
            <param name="newAssetID">The new AssetID of the item, or UUID.Zero</param>
        </member>
        <member name="M:OpenMetaverse.InventoryNode.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenMetaverse.InventoryNode.#ctor(OpenMetaverse.InventoryBase)">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:OpenMetaverse.InventoryNode.#ctor(OpenMetaverse.InventoryBase,OpenMetaverse.InventoryNode)">
            <summary>
            De-serialization constructor for the InventoryNode Class
            </summary>
        </member>
        <member name="M:OpenMetaverse.InventoryNode.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization handler for the InventoryNode Class
            </summary>
        </member>
        <member name="M:OpenMetaverse.InventoryNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenMetaverse.InventoryNode.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenMetaverse.InventoryNode.Data">
            <summary></summary>
        </member>
        <member name="P:OpenMetaverse.InventoryNode.Parent">
            <summary></summary>
        </member>
        <member name="P:OpenMetaverse.InventoryNode.ParentID">
            <summary></summary>
        </member>
        <member name="P:OpenMetaverse.InventoryNode.Nodes">
            <summary></summary>
        </member>
        <member name="T:OpenMetaverse.Logger">
            <summary>
            Singleton logging class for the entire library
            </summary>
        </member>
        <member name="F:OpenMetaverse.Logger.LogInstance">
            <summary>log4net logging engine</summary>
        </member>
        <member name="M:OpenMetaverse.Logger.#cctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenMetaverse.Logger.Log(System.Object,OpenMetaverse.Helpers.LogLevel)">
            <summary>
            Send a log message to the logging engine
            </summary>
            <param name="message">The log message</param>
            <param name="level">The severity of the log entry</param>
        </member>
        <member name="M:OpenMetaverse.Logger.Log(System.Object,OpenMetaverse.Helpers.LogLevel,OpenMetaverse.GridClient)">
            <summary>
            Send a log message to the logging engine
            </summary>
            <param name="message">The log message</param>
            <param name="level">The severity of the log entry</param>
            <param name="client">Instance of the client</param>
        </member>
        <member name="M:OpenMetaverse.Logger.Log(System.Object,OpenMetaverse.Helpers.LogLevel,System.Exception)">
            <summary>
            Send a log message to the logging engine
            </summary>
            <param name="message">The log message</param>
            <param name="level">The severity of the log entry</param>
            <param name="exception">Exception that was raised</param>
        </member>
        <member name="M:OpenMetaverse.Logger.Log(System.Object,OpenMetaverse.Helpers.LogLevel,OpenMetaverse.GridClient,System.Exception)">
            <summary>
            Send a log message to the logging engine
            </summary>
            <param name="message">The log message</param>
            <param name="level">The severity of the log entry</param>
            <param name="client">Instance of the client</param>
            <param name="exception">Exception that was raised</param>
        </member>
        <member name="M:OpenMetaverse.Logger.DebugLog(System.Object)">
            <summary>
            If the library is compiled with DEBUG defined, an event will be
            fired if an <code>OnLogMessage</code> handler is registered and the
            message will be sent to the logging engine
            </summary>
            <param name="message">The message to log at the DEBUG level to the
            current logging engine</param>
        </member>
        <member name="M:OpenMetaverse.Logger.DebugLog(System.Object,OpenMetaverse.GridClient)">
            <summary>
            If the library is compiled with DEBUG defined and
            <code>GridClient.Settings.DEBUG</code> is true, an event will be
            fired if an <code>OnLogMessage</code> handler is registered and the
            message will be sent to the logging engine
            </summary>
            <param name="message">The message to log at the DEBUG level to the
            current logging engine</param>
            <param name="client">Instance of the client</param>
        </member>
        <member name="E:OpenMetaverse.Logger.OnLogMessage">
            <summary>Triggered whenever a message is logged. If this is left
            null, log messages will go to the console</summary>
        </member>
        <member name="T:OpenMetaverse.Logger.LogCallback">
            <summary>
            Callback used for client apps to receive log messages from
            the library
            </summary>
            <param name="message">Data being logged</param>
            <param name="level">The severity of the log entry from <seealso cref="T:OpenMetaverse.Helpers.LogLevel"/></param>
        </member>
        <member name="T:OpenMetaverse.LoginStatus">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenMetaverse.LoginStatus.Failed">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.LoginStatus.None">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.LoginStatus.ConnectingToLogin">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.LoginStatus.ReadingResponse">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.LoginStatus.ConnectingToSim">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.LoginStatus.Redirecting">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.LoginStatus.Success">
            <summary></summary>
        </member>
        <member name="T:OpenMetaverse.LoginParams">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenMetaverse.LoginParams.URI">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.LoginParams.Timeout">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.LoginParams.MethodName">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.LoginParams.FirstName">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.LoginParams.LastName">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.LoginParams.Password">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.LoginParams.Start">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.LoginParams.Channel">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.LoginParams.Version">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.LoginParams.Platform">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.LoginParams.MAC">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.LoginParams.ViewerDigest">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.LoginParams.Options">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.LoginParams.id0">
            <summary></summary>
        </member>
        <member name="T:OpenMetaverse.NetworkManager">
            <summary>
            NetworkManager is responsible for managing the network layer of 
            OpenMetaverse. It tracks all the server connections, serializes 
            outgoing traffic and deserializes incoming traffic, and provides
            instances of delegates for network-related events.
            </summary>
        </member>
        <member name="F:OpenMetaverse.NetworkManager.LoginSeedCapability">
            <summary>Seed CAPS URL returned from the login server</summary>
        </member>
        <member name="M:OpenMetaverse.NetworkManager.DefaultLoginParams(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="firstName">Account first name</param>
            <param name="lastName">Account last name</param>
            <param name="password">Account password</param>
            <param name="userAgent">Client application name</param>
            <param name="userVersion">Client application version</param>
            <returns></returns>
        </member>
        <member name="M:OpenMetaverse.NetworkManager.Login(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Simplified login that takes the most common and required fields
            </summary>
            <param name="firstName">Account first name</param>
            <param name="lastName">Account last name</param>
            <param name="password">Account password</param>
            <param name="userAgent">Client application name</param>
            <param name="userVersion">Client application version</param>
            <returns>Whether the login was successful or not. On failure the
            LoginErrorKey string will contain the error code and LoginMessage
            will contain a description of the error</returns>
        </member>
        <member name="M:OpenMetaverse.NetworkManager.Login(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Simplified login that takes the most common fields along with a
            starting location URI, and can accept an MD5 string instead of a
            plaintext password
            </summary>
            <param name="firstName">Account first name</param>
            <param name="lastName">Account last name</param>
            <param name="password">Account password or MD5 hash of the password
            such as $1$1682a1e45e9f957dcdf0bb56eb43319c</param>
            <param name="userAgent">Client application name</param>
            <param name="start">Starting location URI that can be built with
            StartLocation()</param>
            <param name="userVersion">Client application version</param>
            <returns>Whether the login was successful or not. On failure the
            LoginErrorKey string will contain the error code and LoginMessage
            will contain a description of the error</returns>
        </member>
        <member name="M:OpenMetaverse.NetworkManager.Login(OpenMetaverse.LoginParams)">
            <summary>
            Login that takes a struct of all the values that will be passed to
            the login server
            </summary>
            <param name="loginParams">The values that will be passed to the login
            server, all fields must be set even if they are String.Empty</param>
            <returns>Whether the login was successful or not. On failure the
            LoginErrorKey string will contain the error code and LoginMessage
            will contain a description of the error</returns>
        </member>
        <member name="M:OpenMetaverse.NetworkManager.StartLocation(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Build a start location URI for passing to the Login function
            </summary>
            <param name="sim">Name of the simulator to start in</param>
            <param name="x">X coordinate to start at</param>
            <param name="y">Y coordinate to start at</param>
            <param name="z">Z coordinate to start at</param>
            <returns>String with a URI that can be used to login to a specified
            location</returns>
        </member>
        <member name="M:OpenMetaverse.NetworkManager.GetPlatform">
            <summary>
            Get current OS
            </summary>
            <returns>Either "Win" or "Linux"</returns>
        </member>
        <member name="M:OpenMetaverse.NetworkManager.GetMAC">
            <summary>
            Get clients default Mac Address
            </summary>
            <returns>A string containing the first found Mac Address</returns>
        </member>
        <member name="F:OpenMetaverse.NetworkManager.Simulators">
            <summary>All of the simulators we are currently connected to</summary>
        </member>
        <member name="F:OpenMetaverse.NetworkManager.CapsEvents">
            <summary>Handlers for incoming capability events</summary>
        </member>
        <member name="F:OpenMetaverse.NetworkManager.PacketEvents">
            <summary>Handlers for incoming packets</summary>
        </member>
        <member name="F:OpenMetaverse.NetworkManager.PacketInbox">
            <summary>Incoming packets that are awaiting handling</summary>
        </member>
        <member name="F:OpenMetaverse.NetworkManager.PacketOutbox">
            <summary>Outgoing packets that are awaiting handling</summary>
        </member>
        <member name="M:OpenMetaverse.NetworkManager.#ctor(OpenMetaverse.GridClient)">
            <summary>
            Default constructor
            </summary>
            <param name="client">Reference to the GridClient object</param>
        </member>
        <member name="M:OpenMetaverse.NetworkManager.RegisterCallback(OpenMetaverse.Packets.PacketType,OpenMetaverse.NetworkManager.PacketCallback)">
            <summary>
            Register an event handler for a packet. This is a low level event
            interface and should only be used if you are doing something not
            supported in the library
            </summary>
            <param name="type">Packet type to trigger events for</param>
            <param name="callback">Callback to fire when a packet of this type
            is received</param>
        </member>
        <member name="M:OpenMetaverse.NetworkManager.UnregisterCallback(OpenMetaverse.Packets.PacketType,OpenMetaverse.NetworkManager.PacketCallback)">
            <summary>
            Unregister an event handler for a packet. This is a low level event
            interface and should only be used if you are doing something not 
            supported in the library
            </summary>
            <param name="type">Packet type this callback is registered with</param>
            <param name="callback">Callback to stop firing events for</param>
        </member>
        <member name="M:OpenMetaverse.NetworkManager.RegisterEventCallback(System.String,OpenMetaverse.Caps.EventQueueCallback)">
            <summary>
            Register a CAPS event handler. This is a low level event interface
            and should only be used if you are doing something not supported in
            the library
            </summary>
            <param name="capsEvent">Name of the CAPS event to register a handler for</param>
            <param name="callback">Callback to fire when a CAPS event is received</param>
        </member>
        <member name="M:OpenMetaverse.NetworkManager.UnregisterEventCallback(System.String,OpenMetaverse.Caps.EventQueueCallback)">
            <summary>
            Unregister a CAPS event handler. This is a low level event interface
            and should only be used if you are doing something not supported in
            the library
            </summary>
            <param name="capsEvent">Name of the CAPS event this callback is
            registered with</param>
            <param name="callback">Callback to stop firing events for</param>
        </member>
        <member name="M:OpenMetaverse.NetworkManager.SendPacket(OpenMetaverse.Packets.Packet)">
            <summary>
            Send a packet to the simulator the avatar is currently occupying
            </summary>
            <param name="packet">Packet to send</param>
        </member>
        <member name="M:OpenMetaverse.NetworkManager.SendPacket(OpenMetaverse.Packets.Packet,OpenMetaverse.Simulator)">
            <summary>
            Send a packet to a specified simulator
            </summary>
            <param name="packet">Packet to send</param>
            <param name="simulator">Simulator to send the packet to</param>
        </member>
        <member name="M:OpenMetaverse.NetworkManager.Connect(System.Net.IPAddress,System.UInt16,System.UInt64,System.Boolean,System.String)">
            <summary>
            Connect to a simulator
            </summary>
            <param name="ip">IP address to connect to</param>
            <param name="port">Port to connect to</param>
            <param name="handle">Handle for this simulator, to identify its
            location in the grid</param>
            <param name="setDefault">Whether to set CurrentSim to this new
            connection, use this if the avatar is moving in to this simulator</param>
            <param name="seedcaps">URL of the capabilities server to use for
            this sim connection</param>
            <returns>A Simulator object on success, otherwise null</returns>
        </member>
        <member name="M:OpenMetaverse.NetworkManager.Connect(System.Net.IPEndPoint,System.UInt64,System.Boolean,System.String)">
            <summary>
            Connect to a simulator
            </summary>
            <param name="endPoint">IP address and port to connect to</param>
            <param name="handle">Handle for this simulator, to identify its
            location in the grid</param>
            <param name="setDefault">Whether to set CurrentSim to this new
            connection, use this if the avatar is moving in to this simulator</param>
            <param name="seedcaps">URL of the capabilities server to use for
            this sim connection</param>
            <returns>A Simulator object on success, otherwise null</returns>
        </member>
        <member name="M:OpenMetaverse.NetworkManager.Logout">
            <summary>
            Initiate a blocking logout request. This will return when the logout
            handshake has completed or when <code>Settings.LOGOUT_TIMEOUT</code>
            has expired and the network layer is manually shut down
            </summary>
        </member>
        <member name="M:OpenMetaverse.NetworkManager.RequestLogout">
            <summary>
            Initiate the logout process. Check if logout succeeded with the
            <code>OnLogoutReply</code> event, and if this does not fire the
            <code>Shutdown()</code> function needs to be manually called
            </summary>
        </member>
        <member name="M:OpenMetaverse.NetworkManager.DisconnectSim(OpenMetaverse.Simulator,System.Boolean)">
            <summary>
            
            </summary>
            <param name="sim"></param>
            <param name="sendCloseCircuit"></param>
        </member>
        <member name="M:OpenMetaverse.NetworkManager.Shutdown(OpenMetaverse.NetworkManager.DisconnectType)">
            <summary>
            Shutdown will disconnect all the sims except for the current sim
            first, and then kill the connection to CurrentSim. This should only
            be called if the logout process times out on <code>RequestLogout</code>
            </summary>
        </member>
        <member name="M:OpenMetaverse.NetworkManager.FindSimulator(System.Net.IPEndPoint)">
            <summary>
            Searches through the list of currently connected simulators to find
            one attached to the given IPEndPoint
            </summary>
            <param name="endPoint">IPEndPoint of the Simulator to search for</param>
            <returns>A Simulator reference on success, otherwise null</returns>
        </member>
        <member name="M:OpenMetaverse.NetworkManager.RaiseConnectedEvent(OpenMetaverse.Simulator)">
            <summary>
            Fire an event when an event queue connects for capabilities
            </summary>
            <param name="simulator">Simulator the event queue is attached to</param>
        </member>
        <member name="M:OpenMetaverse.NetworkManager.LogoutReplyHandler(OpenMetaverse.Packets.Packet,OpenMetaverse.Simulator)">
            <summary>
            Called to deal with LogoutReply packet and fires off callback
            </summary>
            <param name="packet">Full packet of type LogoutReplyPacket</param>
            <param name="simulator"></param>
        </member>
        <member name="M:OpenMetaverse.NetworkManager.EnableSimulatorHandler(System.String,OpenMetaverse.StructuredData.OSD,OpenMetaverse.Simulator)">
            <summary>
            Handler for EnableSimulator packet
            </summary>
            <param name="capsKey">the Capabilities Key, "EnableSimulator"</param>
            <param name="osd">the LLSD Encoded packet</param>
            <param name="simulator">The simulator the packet was sent from</param>
        </member>
        <member name="E:OpenMetaverse.NetworkManager.OnLogin">
            <summary>Called any time the login status changes, will eventually
            return LoginStatus.Success or LoginStatus.Failure</summary>
        </member>
        <member name="E:OpenMetaverse.NetworkManager.OnLoginResponse">
            <summary>Called when a reply is received from the login server, the
            login sequence will block until this event returns</summary>
        </member>
        <member name="P:OpenMetaverse.NetworkManager.LoginStatusCode">
            <summary>Current state of logging in</summary>
        </member>
        <member name="P:OpenMetaverse.NetworkManager.LoginErrorKey">
            <summary>Upon login failure, contains a short string key for the
            type of login error that occurred</summary>
        </member>
        <member name="P:OpenMetaverse.NetworkManager.RawLoginReply">
            <summary>The raw XML-RPC reply from the login server, exactly as it
            was received (minus the HTTP header)</summary>
        </member>
        <member name="P:OpenMetaverse.NetworkManager.LoginMessage">
            <summary>During login this contains a descriptive version of 
            LoginStatusCode. After a successful login this will contain the 
            message of the day, and after a failed login a descriptive error 
            message will be returned</summary>
        </member>
        <member name="E:OpenMetaverse.NetworkManager.OnPacketSent">
            <summary>
            Event raised when an outgoing packet is sent to a simulator
            </summary>
        </member>
        <member name="E:OpenMetaverse.NetworkManager.OnConnected">
            <summary>
            Event raised when the client was able to connected successfully.
            </summary>
            <remarks>Uses the ConnectedCallback delegate.</remarks>
        </member>
        <member name="E:OpenMetaverse.NetworkManager.OnLogoutReply">
            <summary>
            Event raised when a logout is confirmed by the simulator
            </summary>
        </member>
        <member name="E:OpenMetaverse.NetworkManager.OnSimConnecting">
            <summary>
            Event raised when a before a connection to a simulator is 
            initialized
            </summary>
        </member>
        <member name="E:OpenMetaverse.NetworkManager.OnSimConnected">
            <summary>
            Event raised when a connection to a simulator is established
            </summary>
        </member>
        <member name="E:OpenMetaverse.NetworkManager.OnSimDisconnected">
            <summary>
            An event for the connection to a simulator other than the currently
            occupied one disconnecting
            </summary>
            <remarks>The Simulators list is locked when this event is 
            triggered, do not attempt to modify the collection or acquire a
            lock on it when this callback is fired</remarks>
        </member>
        <member name="E:OpenMetaverse.NetworkManager.OnDisconnected">
            <summary>
            An event for being logged out either through client request, server
            forced, or network error
            </summary>
        </member>
        <member name="E:OpenMetaverse.NetworkManager.OnCurrentSimChanged">
            <summary>
            An event for when CurrentSim changes
            </summary>
        </member>
        <member name="E:OpenMetaverse.NetworkManager.OnEventQueueRunning">
            <summary>
            Triggered when an event queue makes the initial connection
            </summary>
        </member>
        <member name="P:OpenMetaverse.NetworkManager.CircuitCode">
            <summary>Unique identifier associated with our connections to
            simulators</summary>
        </member>
        <member name="P:OpenMetaverse.NetworkManager.CurrentSim">
            <summary>The simulator that the logged in avatar is currently 
            occupying</summary>
        </member>
        <member name="P:OpenMetaverse.NetworkManager.Connected">
            <summary>Shows whether the network layer is logged in to the
            grid or not</summary>
        </member>
        <member name="P:OpenMetaverse.NetworkManager.InboxCount">
            <summary>Number of packets in the incoming queue</summary>
        </member>
        <member name="P:OpenMetaverse.NetworkManager.OutboxCount">
            <summary>Number of packets in the outgoing queue</summary>
        </member>
        <member name="T:OpenMetaverse.NetworkManager.LoginCallback">
            <summary>
            
            </summary>
            <param name="login"></param>
            <param name="message"></param>
        </member>
        <member name="T:OpenMetaverse.NetworkManager.LoginResponseCallback">
            <summary>
            
            </summary>
            <param name="loginSuccess"></param>
            <param name="redirect"></param>
            <param name="replyData"></param>
            <param name="message"></param>
            <param name="reason"></param>
        </member>
        <member name="T:OpenMetaverse.NetworkManager.DisconnectType">
            <summary>
            Explains why a simulator or the grid disconnected from us
            </summary>
        </member>
        <member name="F:OpenMetaverse.NetworkManager.DisconnectType.ClientInitiated">
            <summary>The client requested the logout or simulator disconnect</summary>
        </member>
        <member name="F:OpenMetaverse.NetworkManager.DisconnectType.ServerInitiated">
            <summary>The server notified us that it is disconnecting</summary>
        </member>
        <member name="F:OpenMetaverse.NetworkManager.DisconnectType.NetworkTimeout">
            <summary>Either a socket was closed or network traffic timed out</summary>
        </member>
        <member name="F:OpenMetaverse.NetworkManager.DisconnectType.SimShutdown">
            <summary>The last active simulator shut down</summary>
        </member>
        <member name="T:OpenMetaverse.NetworkManager.IncomingPacket">
            <summary>
            Holds a simulator reference and a decoded packet, these structs are put in
            the packet inbox for event handling
            </summary>
        </member>
        <member name="F:OpenMetaverse.NetworkManager.IncomingPacket.Simulator">
            <summary>Reference to the simulator that this packet came from</summary>
        </member>
        <member name="F:OpenMetaverse.NetworkManager.IncomingPacket.Packet">
            <summary>Packet that needs to be processed</summary>
        </member>
        <member name="T:OpenMetaverse.NetworkManager.OutgoingPacket">
            <summary>
            Holds a simulator reference and an encoded packet, these structs are put in
            the packet outbox for sending
            </summary>
        </member>
        <member name="F:OpenMetaverse.NetworkManager.OutgoingPacket.Simulator">
            <summary>Reference to the simulator this packet is destined for</summary>
        </member>
        <member name="F:OpenMetaverse.NetworkManager.OutgoingPacket.Packet">
            <summary>Packet that needs to be processed</summary>
        </member>
        <member name="F:OpenMetaverse.NetworkManager.OutgoingPacket.SetSequence">
            <summary>True if the sequence number needs to be set, otherwise false</summary>
        </member>
        <member name="F:OpenMetaverse.NetworkManager.OutgoingPacket.ResendCount">
            <summary>Number of times this packet has been resent</summary>
        </member>
        <member name="F:OpenMetaverse.NetworkManager.OutgoingPacket.TickCount">
            <summary>Environment.TickCount when this packet was last sent over the wire</summary>
        </member>
        <member name="T:OpenMetaverse.NetworkManager.PacketCallback">
            <summary>
            Coupled with RegisterCallback(), this is triggered whenever a packet
            of a registered type is received
            </summary>
            <param name="packet"></param>
            <param name="simulator"></param>
        </member>
        <member name="T:OpenMetaverse.NetworkManager.PacketSentCallback">
            <summary>
            Triggered whenever an outgoing packet is sent
            </summary>
            <param name="data">Buffer holding the outgoing packet payload</param>
            <param name="bytesSent">Number of bytes of the data buffer that were sent</param>
            <param name="simulator">Simulator this packet was sent to</param>
        </member>
        <member name="T:OpenMetaverse.NetworkManager.ConnectedCallback">
            <summary>
            Assigned by the OnConnected event. Raised when login was a success
            </summary>
            <param name="sender">Reference to the GridClient object that called the event</param>
        </member>
        <member name="T:OpenMetaverse.NetworkManager.LogoutCallback">
            <summary>
            Assigned by the OnLogoutReply callback. Raised upone receipt of a LogoutReply packet during logout process.
            </summary>
            <param name="inventoryItems"></param>
        </member>
        <member name="T:OpenMetaverse.NetworkManager.SimConnectingCallback">
            <summary>
            Triggered before a new connection to a simulator is established
            </summary>
            <remarks>The connection to the new simulator won't be established
            until this callback returns</remarks>
            <param name="simulator">The simulator that is being connected to</param>
            <returns>Whether to continue connecting to the simulator or abort
            the connection</returns>
        </member>
        <member name="T:OpenMetaverse.NetworkManager.SimConnectedCallback">
            <summary>
            Triggered when a new connection to a simulator is established
            </summary>
            <param name="simulator">The simulator that is being connected to</param>
        </member>
        <member name="T:OpenMetaverse.NetworkManager.SimDisconnectedCallback">
            <summary>
            Triggered when a simulator other than the simulator that is currently
            being occupied disconnects for whatever reason
            </summary>
            <param name="simulator">The simulator that disconnected, which will become a null
            reference after the callback is finished</param>
            <param name="reason">Enumeration explaining the reason for the disconnect</param>
        </member>
        <member name="T:OpenMetaverse.NetworkManager.DisconnectedCallback">
            <summary>
            Triggered when we are logged out of the grid due to a simulator request,
            client request, network timeout, or any other cause
            </summary>
            <param name="reason">Enumeration explaining the reason for the disconnect</param>
            <param name="message">If we were logged out by the simulator, this 
            is a message explaining why</param>
        </member>
        <member name="T:OpenMetaverse.NetworkManager.CurrentSimChangedCallback">
            <summary>
            Triggered when CurrentSim changes
            </summary>
            <param name="PreviousSimulator">A reference to the old value of CurrentSim</param>
        </member>
        <member name="T:OpenMetaverse.NetworkManager.EventQueueRunningCallback">
            <summary>
            Triggered when an event queue makes the initial connection
            </summary>
            <param name="simulator">Simulator this event queue is tied to</param>
        </member>
        <member name="T:OpenMetaverse.NameValue">
            <summary>
            A Name Value pair with additional settings, used in the protocol
            primarily to transmit avatar names and active group in object packets
            </summary>
        </member>
        <member name="F:OpenMetaverse.NameValue.Name">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.NameValue.Type">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.NameValue.Class">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.NameValue.Sendto">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.NameValue.Value">
            <summary></summary>
        </member>
        <member name="M:OpenMetaverse.NameValue.#ctor(System.String,OpenMetaverse.NameValue.ValueType,OpenMetaverse.NameValue.ClassType,OpenMetaverse.NameValue.SendtoType,System.Object)">
            <summary>
            Constructor that takes all the fields as parameters
            </summary>
            <param name="name"></param>
            <param name="valueType"></param>
            <param name="classType"></param>
            <param name="sendtoType"></param>
            <param name="value"></param>
        </member>
        <member name="M:OpenMetaverse.NameValue.#ctor(System.String)">
            <summary>
            Constructor that takes a single line from a NameValue field
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:OpenMetaverse.NameValue.ValueType">
            <summary>Type of the value</summary>
        </member>
        <member name="F:OpenMetaverse.NameValue.ValueType.Unknown">
            <summary>Unknown</summary>
        </member>
        <member name="F:OpenMetaverse.NameValue.ValueType.String">
            <summary>String value</summary>
        </member>
        <member name="F:OpenMetaverse.NameValue.ValueType.F32">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.NameValue.ValueType.S32">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.NameValue.ValueType.VEC3">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.NameValue.ValueType.U32">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.NameValue.ValueType.CAMERA">
            <summary>Deprecated</summary>
        </member>
        <member name="F:OpenMetaverse.NameValue.ValueType.Asset">
            <summary>String value, but designated as an asset</summary>
        </member>
        <member name="F:OpenMetaverse.NameValue.ValueType.U64">
            <summary></summary>
        </member>
        <member name="T:OpenMetaverse.NameValue.ClassType">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenMetaverse.NameValue.ClassType.Unknown">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.NameValue.ClassType.ReadOnly">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.NameValue.ClassType.ReadWrite">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.NameValue.ClassType.Callback">
            <summary></summary>
        </member>
        <member name="T:OpenMetaverse.NameValue.SendtoType">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenMetaverse.NameValue.SendtoType.Unknown">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.NameValue.SendtoType.Sim">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.NameValue.SendtoType.DataSim">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.NameValue.SendtoType.SimViewer">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.NameValue.SendtoType.DataSimViewer">
            <summary></summary>
        </member>
        <member name="T:OpenMetaverse.NotConnectedException">
            <summary>
            This exception is thrown whenever a network operation is attempted 
            without a network connection.
            </summary>
        </member>
        <member name="T:OpenMetaverse.ReportType">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenMetaverse.ReportType.None">
            <summary>No report</summary>
        </member>
        <member name="F:OpenMetaverse.ReportType.Unknown">
            <summary>Unknown report type</summary>
        </member>
        <member name="F:OpenMetaverse.ReportType.Bug">
            <summary>Bug report</summary>
        </member>
        <member name="F:OpenMetaverse.ReportType.Complaint">
            <summary>Complaint report</summary>
        </member>
        <member name="F:OpenMetaverse.ReportType.CustomerServiceRequest">
            <summary>Customer service report</summary>
        </member>
        <member name="T:OpenMetaverse.CompressedFlags">
            <summary>
            Bitflag field for ObjectUpdateCompressed data blocks, describing 
            which options are present for each object
            </summary>
        </member>
        <member name="F:OpenMetaverse.CompressedFlags.ScratchPad">
            <summary>Unknown</summary>
        </member>
        <member name="F:OpenMetaverse.CompressedFlags.Tree">
            <summary>Whether the object has a TreeSpecies</summary>
        </member>
        <member name="F:OpenMetaverse.CompressedFlags.HasText">
            <summary>Whether the object has floating text ala llSetText</summary>
        </member>
        <member name="F:OpenMetaverse.CompressedFlags.HasParticles">
            <summary>Whether the object has an active particle system</summary>
        </member>
        <member name="F:OpenMetaverse.CompressedFlags.HasSound">
            <summary>Whether the object has sound attached to it</summary>
        </member>
        <member name="F:OpenMetaverse.CompressedFlags.HasParent">
            <summary>Whether the object is attached to a root object or not</summary>
        </member>
        <member name="F:OpenMetaverse.CompressedFlags.TextureAnimation">
            <summary>Whether the object has texture animation settings</summary>
        </member>
        <member name="F:OpenMetaverse.CompressedFlags.HasAngularVelocity">
            <summary>Whether the object has an angular velocity</summary>
        </member>
        <member name="F:OpenMetaverse.CompressedFlags.HasNameValues">
            <summary>Whether the object has a name value pairs string</summary>
        </member>
        <member name="F:OpenMetaverse.CompressedFlags.MediaURL">
            <summary>Whether the object has a Media URL set</summary>
        </member>
        <member name="T:OpenMetaverse.UpdateType">
            <summary>
            Specific Flags for MultipleObjectUpdate requests
            </summary>
        </member>
        <member name="F:OpenMetaverse.UpdateType.None">
            <summary>None</summary>
        </member>
        <member name="F:OpenMetaverse.UpdateType.Position">
            <summary>Change position of prims</summary>
        </member>
        <member name="F:OpenMetaverse.UpdateType.Rotation">
            <summary>Change rotation of prims</summary>
        </member>
        <member name="F:OpenMetaverse.UpdateType.Scale">
            <summary>Change size of prims</summary>
        </member>
        <member name="F:OpenMetaverse.UpdateType.Linked">
            <summary>Perform operation on link set</summary>
        </member>
        <member name="F:OpenMetaverse.UpdateType.Uniform">
            <summary>Scale prims uniformly, same as selecing ctrl+shift in the
            viewer. Used in conjunction with Scale</summary>
        </member>
        <member name="T:OpenMetaverse.ObjectUpdate">
            <summary>
            Contains the variables sent in an object update packet for objects. 
            Used to track position and movement of prims and avatars
            </summary>
        </member>
        <member name="F:OpenMetaverse.ObjectUpdate.Avatar">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.ObjectUpdate.CollisionPlane">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.ObjectUpdate.State">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.ObjectUpdate.LocalID">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.ObjectUpdate.Position">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.ObjectUpdate.Velocity">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.ObjectUpdate.Acceleration">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.ObjectUpdate.Rotation">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.ObjectUpdate.AngularVelocity">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.ObjectUpdate.Textures">
            <summary></summary>
        </member>
        <member name="T:OpenMetaverse.ObjectManager">
            <summary>
            Handles all network traffic related to prims and avatar positions and 
            movement.
            </summary>
        </member>
        <member name="F:OpenMetaverse.ObjectManager.Client">
            <summary>Reference to the GridClient object</summary>
        </member>
        <member name="F:OpenMetaverse.ObjectManager.InterpolationTimer">
            <summary>Does periodic dead reckoning calculation to convert
            velocity and acceleration to new positions for objects</summary>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.#ctor(OpenMetaverse.GridClient)">
            <summary>
            Instantiates a new ObjectManager class
            </summary>
            <param name="client">A reference to the client</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.#ctor(OpenMetaverse.GridClient,System.Boolean)">
            <summary>
            Instantiates a new ObjectManager class
            </summary>
            <param name="client">A reference to the client</param>
            <param name="registerCallbacks">If false, the ObjectManager won't
            register any packet callbacks and won't decode incoming object
            packets</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.RequestObject(OpenMetaverse.Simulator,System.UInt32)">
            <summary>
            Request object information from the sim, primarily used for stale 
            or missing cache entries
            </summary>
            <param name="simulator">The simulator containing the object you're 
            looking for</param>
            <param name="localID">The objects ID which is local to the simulator the object is in</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.RequestObjects(OpenMetaverse.Simulator,System.Collections.Generic.List{System.UInt32})">
            <summary>
            Request object information for multiple objects all contained in
            the same sim, primarily used for stale or missing cache entries
            </summary>
            <param name="simulator">A reference to the <seealso cref="T:OpenMetaverse.Simulator"/> object where the objects reside</param>
            <param name="localIDs">An array which contains the IDs of the objects to request</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.BuyObject(OpenMetaverse.Simulator,System.UInt32,OpenMetaverse.SaleType,System.Int32,OpenMetaverse.UUID,OpenMetaverse.UUID)">
             <summary>
             Attempt to purchase an original object, a copy, or the contents of
             an object
             </summary>
             <param name="simulator">A reference to the <seealso cref="T:OpenMetaverse.Simulator"/> object where the objects reside</param>        
             <param name="localID">The objects ID which is local to the simulator the object is in</param>
             <param name="saleType">Whether the original, a copy, or the object
             contents are on sale. This is used for verification, if the this
             sale type is not valid for the object the purchase will fail</param>
             <param name="price">Price of the object. This is used for 
             verification, if it does not match the actual price the purchase
             will fail</param>
             <param name="groupID">Group ID that will be associated with the new
             purchase</param>
             <param name="categoryID">Inventory folder UUID where the object or objects 
             purchased should be placed</param>
             <example>
             <code>
             BuyObject(Client.Network.CurrentSim, 500, SaleType.Copy, 
             100, UUID.Zero, Client.Self.InventoryRootFolderUUID);
             </code> 
            </example>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.SelectObject(OpenMetaverse.Simulator,System.UInt32,System.Boolean)">
            <summary>
            Select a single object. This will trigger the simulator to send us back 
            an ObjectProperties packet so we can get the full information for
            this object
            </summary>
            <param name="simulator">A reference to the <seealso cref="T:OpenMetaverse.Simulator"/> object where the object resides</param>
            <param name="localID">The objects ID which is local to the simulator the object is in</param>
            <param name="automaticDeselect">Should objects be deselected immediately after selection</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.SelectObject(OpenMetaverse.Simulator,System.UInt32)">
            <summary>
            Select a single object. This will trigger the simulator to send us back 
            an ObjectProperties packet so we can get the full information for
            this object
            </summary>
            <param name="simulator">A reference to the <seealso cref="T:OpenMetaverse.Simulator"/> object where the object resides</param>
            <param name="localID">The objects ID which is local to the simulator the object is in</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.SelectObjects(OpenMetaverse.Simulator,System.UInt32[],System.Boolean)">
            <summary>
            Select multiple objects. This will trigger the simulator to send us
            back ObjectProperties for each object
            </summary>
            <param name="simulator">A reference to the <seealso cref="T:OpenMetaverse.Simulator"/> object where the objects reside</param>
            <param name="localIDs">An array which contains the IDs of the objects to select</param>
            <param name="automaticDeselect">Should objects be deselected immediately after selection</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.SelectObjects(OpenMetaverse.Simulator,System.UInt32[])">
            <summary>
            Select multiple objects. This will trigger the simulator to send us
            back ObjectProperties for each object
            </summary>
            <param name="simulator">A reference to the <seealso cref="T:OpenMetaverse.Simulator"/> object where the objects reside</param>
            <param name="localIDs">An array which contains the IDs of the objects to select</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.SetFlags(System.UInt32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Sets and object's flags (physical, temporary, phantom, casts shadow)
            </summary>
            <param name="localID"></param>
            <param name="physical"></param>
            <param name="temporary"></param>
            <param name="phantom"></param>
            <param name="castsShadow"></param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.SetSaleInfo(System.UInt32,OpenMetaverse.SaleType,System.Int32)">
            <summary>
            Sets an object's sale information
            </summary>
            <param name="localID"></param>
            <param name="saleType"></param>
            <param name="price"></param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.SetSaleInfo(System.Collections.Generic.List{System.UInt32},OpenMetaverse.SaleType,System.Int32)">
            <summary>
            Sets sale info for multiple objects
            </summary>
            <param name="localIDs"></param>
            <param name="saleType"></param>
            <param name="price"></param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.DeselectObject(OpenMetaverse.Simulator,System.UInt32)">
            <summary>
            Deselect an object
            </summary>
            <param name="simulator">A reference to the <seealso cref="T:OpenMetaverse.Simulator"/> object where the object resides</param>
            <param name="localID">The objects ID which is local to the simulator the object is in</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.DeselectObjects(OpenMetaverse.Simulator,System.UInt32[])">
            <summary>
            Deselect multiple objects.
            </summary>
            <param name="simulator">A reference to the <seealso cref="!:libsecondlife.Simulator"/> object where the objects reside</param>
            <param name="localIDs">An array which contains the IDs of the objects to select</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.ClickObject(OpenMetaverse.Simulator,System.UInt32)">
            <summary>
            Perform a click action on an object
            </summary>
            <param name="simulator">A reference to the <seealso cref="T:OpenMetaverse.Simulator"/> object where the object resides</param>
            <param name="localID">The objects ID which is local to the simulator the object is in</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.AddPrim(OpenMetaverse.Simulator,OpenMetaverse.Primitive.ConstructionData,OpenMetaverse.UUID,OpenMetaverse.Vector3,OpenMetaverse.Vector3,OpenMetaverse.Quaternion)">
            <summary>
            Create, or "rez" a new prim object in a simulator
            </summary>
            <param name="simulator">A reference to the <seealso cref="T:OpenMetaverse.Simulator"/> object to place the object in</param>
            <param name="prim">Data describing the prim object to rez</param>
            <param name="groupID">Group ID that this prim will be set to, or UUID.Zero if you
            do not want the object to be associated with a specific group</param>
            <param name="position">An approximation of the position at which to rez the prim</param>
            <param name="scale">Scale vector to size this prim</param>
            <param name="rotation">Rotation quaternion to rotate this prim</param>
            <remarks>Due to the way client prim rezzing is done on the server,
            the requested position for an object is only close to where the prim
            actually ends up. If you desire exact placement you'll need to 
            follow up by moving the object after it has been created. This
            function will not set textures, light and flexible data, or other 
            extended primitive properties</remarks>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.AddPrim(OpenMetaverse.Simulator,OpenMetaverse.Primitive.ConstructionData,OpenMetaverse.UUID,OpenMetaverse.Vector3,OpenMetaverse.Vector3,OpenMetaverse.Quaternion,OpenMetaverse.PrimFlags)">
            <summary>
            Create, or "rez" a new prim object in a simulator
            </summary>
            <param name="simulator">A reference to the <seealso cref="T:OpenMetaverse.Simulator"/> object to place the object in</param>
            <param name="prim">Data describing the prim object to rez</param>
            <param name="groupID">Group ID that this prim will be set to, or UUID.Zero if you
            do not want the object to be associated with a specific group</param>
            <param name="position">An approximation of the position at which to rez the prim</param>
            <param name="scale">Scale vector to size this prim</param>
            <param name="rotation">Rotation quaternion to rotate this prim</param>
            <param name="createFlags">Specify the <seealso cref="T:OpenMetaverse.PrimFlags"/></param>
            <remarks>Due to the way client prim rezzing is done on the server,
            the requested position for an object is only close to where the prim
            actually ends up. If you desire exact placement you'll need to 
            follow up by moving the object after it has been created. This
            function will not set textures, light and flexible data, or other 
            extended primitive properties</remarks>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.AddTree(OpenMetaverse.Simulator,OpenMetaverse.Vector3,OpenMetaverse.Quaternion,OpenMetaverse.Vector3,OpenMetaverse.Tree,OpenMetaverse.UUID,System.Boolean)">
            <summary>
            Rez a Linden tree
            </summary>
            <param name="simulator">A reference to the <seealso cref="T:OpenMetaverse.Simulator"/> object where the object resides</param>
            <param name="scale">The size of the tree</param>
            <param name="rotation">The rotation of the tree</param>
            <param name="position">The position of the tree</param>
            <param name="treeType">The Type of tree</param>
            <param name="groupOwner">The <seealso cref="T:OpenMetaverse.UUID"/> of the group to set the tree to, 
            or UUID.Zero if no group is to be set</param>
            <param name="newTree">true to use the "new" Linden trees, false to use the old</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.AddGrass(OpenMetaverse.Simulator,OpenMetaverse.Vector3,OpenMetaverse.Quaternion,OpenMetaverse.Vector3,OpenMetaverse.Grass,OpenMetaverse.UUID)">
            <summary>
            Rez grass and ground cover
            </summary>
            <param name="simulator">A reference to the <seealso cref="T:OpenMetaverse.Simulator"/> object where the object resides</param>
            <param name="scale">The size of the grass</param>
            <param name="rotation">The rotation of the grass</param>
            <param name="position">The position of the grass</param>
            <param name="grassType">The type of grass from the <seealso cref="T:OpenMetaverse.Grass"/> enum</param>
            <param name="groupOwner">The <seealso cref="T:OpenMetaverse.UUID"/> of the group to set the tree to, 
            or UUID.Zero if no group is to be set</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.SetTextures(OpenMetaverse.Simulator,System.UInt32,OpenMetaverse.Primitive.TextureEntry)">
            <summary>
            Set the textures to apply to the faces of an object
            </summary>
            <param name="simulator">A reference to the <seealso cref="T:OpenMetaverse.Simulator"/> object where the object resides</param>
            <param name="localID">The objects ID which is local to the simulator the object is in</param>
            <param name="textures">The texture data to apply</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.SetTextures(OpenMetaverse.Simulator,System.UInt32,OpenMetaverse.Primitive.TextureEntry,System.String)">
            <summary>
            Set the textures to apply to the faces of an object
            </summary>
            <param name="simulator">A reference to the <seealso cref="T:OpenMetaverse.Simulator"/> object where the object resides</param>
            <param name="localID">The objects ID which is local to the simulator the object is in</param>
            <param name="textures">The texture data to apply</param>
            <param name="mediaUrl">A media URL (not used)</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.SetLight(OpenMetaverse.Simulator,System.UInt32,OpenMetaverse.Primitive.LightData)">
            <summary>
            Set the Light data on an object
            </summary>
            <param name="simulator">A reference to the <seealso cref="T:OpenMetaverse.Simulator"/> object where the object resides</param>
            <param name="localID">The objects ID which is local to the simulator the object is in</param>
            <param name="light">A <seealso cref="T:OpenMetaverse.Primitive.LightData"/> object containing the data to set</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.SetFlexible(OpenMetaverse.Simulator,System.UInt32,OpenMetaverse.Primitive.FlexibleData)">
            <summary>
            Set the flexible data on an object
            </summary>
            <param name="simulator">A reference to the <seealso cref="T:OpenMetaverse.Simulator"/> object where the object resides</param>
            <param name="localID">The objects ID which is local to the simulator the object is in</param>
            <param name="flexible">A <seealso cref="T:OpenMetaverse.Primitive.FlexibleData"/> object containing the data to set</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.SetSculpt(OpenMetaverse.Simulator,System.UInt32,OpenMetaverse.Primitive.SculptData)">
            <summary>
            Set the sculptie texture and data on an object
            </summary>
            <param name="simulator">A reference to the <seealso cref="T:OpenMetaverse.Simulator"/> object where the object resides</param>
            <param name="localID">The objects ID which is local to the simulator the object is in</param>
            <param name="sculpt">A <seealso cref="T:OpenMetaverse.Primitive.SculptData"/> object containing the data to set</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.SetExtraParamOff(OpenMetaverse.Simulator,System.UInt32,OpenMetaverse.ExtraParamType)">
            <summary>
            Set additional primitive parameters on an object
            </summary>
            <param name="simulator">A reference to the <seealso cref="T:OpenMetaverse.Simulator"/> object where the object resides</param>
            <param name="localID">The objects ID which is local to the simulator the object is in</param>
            <param name="type">The extra parameters to set</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.LinkPrims(OpenMetaverse.Simulator,System.Collections.Generic.List{System.UInt32})">
            <summary>
            Link multiple prims into a linkset
            </summary>
            <param name="simulator">A reference to the <seealso cref="T:OpenMetaverse.Simulator"/> object where the objects reside</param>
            <param name="localIDs">An array which contains the IDs of the objects to link</param>
            <remarks>The last object in the array will be the root object of the linkset TODO: Is this true?</remarks>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.SetRotation(OpenMetaverse.Simulator,System.UInt32,OpenMetaverse.Quaternion)">
            <summary>
            Change the rotation of an object
            </summary>
            <param name="simulator">A reference to the <seealso cref="T:OpenMetaverse.Simulator"/> object where the object resides</param>
            <param name="localID">The objects ID which is local to the simulator the object is in</param>
            <param name="rotation">The new rotation of the object</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.SetName(OpenMetaverse.Simulator,System.UInt32,System.String)">
            <summary>
            Set the name of an object
            </summary>
            <param name="simulator">A reference to the <seealso cref="T:OpenMetaverse.Simulator"/> object where the object resides</param>
            <param name="localID">The objects ID which is local to the simulator the object is in</param>
            <param name="name">A string containing the new name of the object</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.SetNames(OpenMetaverse.Simulator,System.UInt32[],System.String[])">
            <summary>
            Set the name of multiple objects
            </summary>
            <param name="simulator">A reference to the <seealso cref="T:OpenMetaverse.Simulator"/> object where the objects reside</param>
            <param name="localIDs">An array which contains the IDs of the objects to change the name of</param>
            <param name="names">An array which contains the new names of the objects</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.SetDescription(OpenMetaverse.Simulator,System.UInt32,System.String)">
            <summary>
            Set the description of an object
            </summary>
            <param name="simulator">A reference to the <seealso cref="T:OpenMetaverse.Simulator"/> object where the object resides</param>
            <param name="localID">The objects ID which is local to the simulator the object is in</param>
            <param name="description">A string containing the new description of the object</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.SetDescriptions(OpenMetaverse.Simulator,System.UInt32[],System.String[])">
            <summary>
            Set the descriptions of multiple objects
            </summary>
            <param name="simulator">A reference to the <seealso cref="T:OpenMetaverse.Simulator"/> object where the objects reside</param>
            <param name="localIDs">An array which contains the IDs of the objects to change the description of</param>
            <param name="descriptions">An array which contains the new descriptions of the objects</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.AttachObject(OpenMetaverse.Simulator,System.UInt32,OpenMetaverse.AttachmentPoint,OpenMetaverse.Quaternion)">
            <summary>
            Attach an object to this avatar
            </summary>
            <param name="simulator">A reference to the <seealso cref="T:OpenMetaverse.Simulator"/> object where the object resides</param>
            <param name="localID">The objects ID which is local to the simulator the object is in</param>
            <param name="attachPoint">The point on the avatar the object will be attached</param>
            <param name="rotation">The rotation of the attached object</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.DropObject(OpenMetaverse.Simulator,System.UInt32)">
            <summary>
            Drop an attached object from this avatar
            </summary>
            <param name="simulator">A reference to the <seealso cref="T:OpenMetaverse.Simulator"/>
            object where the objects reside. This will always be the simulator the avatar is currently in
            </param>
            <param name="localID">The object's ID which is local to the simulator the object is in</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.DetachObjects(OpenMetaverse.Simulator,System.Collections.Generic.List{System.UInt32})">
            <summary>
            Detach an object from yourself
            </summary>
            <param name="simulator">A reference to the <seealso cref="T:OpenMetaverse.Simulator"/> 
            object where the objects reside
            
            This will always be the simulator the avatar is currently in
            </param>
            <param name="localIDs">An array which contains the IDs of the objects to detach</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.SetPosition(OpenMetaverse.Simulator,System.UInt32,OpenMetaverse.Vector3)">
            <summary>
            Change the position of an object, Will change position of entire linkset
            </summary>
            <param name="simulator">A reference to the <seealso cref="T:OpenMetaverse.Simulator"/> object where the object resides</param>
            <param name="localID">The objects ID which is local to the simulator the object is in</param>
            <param name="position">The new position of the object</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.SetPosition(OpenMetaverse.Simulator,System.UInt32,OpenMetaverse.Vector3,System.Boolean)">
            <summary>
            Change the position of an object
            </summary>
            <param name="simulator">A reference to the <seealso cref="T:OpenMetaverse.Simulator"/> object where the object resides</param>
            <param name="localID">The objects ID which is local to the simulator the object is in</param>
            <param name="position">The new position of the object</param>
            <param name="childOnly">if true, will change position of (this) child prim only, not entire linkset</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.SetScale(OpenMetaverse.Simulator,System.UInt32,OpenMetaverse.Vector3,System.Boolean,System.Boolean)">
            <summary>
            Change the Scale (size) of an object
            </summary>
            <param name="simulator">A reference to the <seealso cref="T:OpenMetaverse.Simulator"/> object where the object resides</param>
            <param name="localID">The objects ID which is local to the simulator the object is in</param>
            <param name="scale">The new scale of the object</param>
            <param name="childOnly">If true, will change scale of this prim only, not entire linkset</param>
            <param name="uniform">True to resize prims uniformly</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.SetRotation(OpenMetaverse.Simulator,System.UInt32,OpenMetaverse.Quaternion,System.Boolean)">
            <summary>
            Change the Rotation of an object that is either a child or a whole linkset
            </summary>
            <param name="simulator">A reference to the <seealso cref="T:OpenMetaverse.Simulator"/> object where the object resides</param>
            <param name="localID">The objects ID which is local to the simulator the object is in</param>
            <param name="quat">The new scale of the object</param>
            <param name="childOnly">If true, will change rotation of this prim only, not entire linkset</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.UpdateObject(OpenMetaverse.Simulator,System.UInt32,OpenMetaverse.Vector3,OpenMetaverse.UpdateType)">
            <summary>
            Send a Multiple Object Update packet to change the size, scale or rotation of a primitive
            </summary>
            <param name="simulator">A reference to the <seealso cref="T:OpenMetaverse.Simulator"/> object where the object resides</param>
            <param name="localID">The objects ID which is local to the simulator the object is in</param>
            <param name="data">The new rotation, size, or position of the target object</param>
            <param name="type">The flags from the <seealso cref="T:OpenMetaverse.UpdateType"/> Enum</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.DeedObject(OpenMetaverse.Simulator,System.UInt32,OpenMetaverse.UUID)">
            <summary>
            Deed an object (prim) to a group, Object must be shared with group which
            can be accomplished with SetPermissions()
            </summary>
            <param name="simulator">A reference to the <seealso cref="T:OpenMetaverse.Simulator"/> object where the object resides</param>
            <param name="localID">The objects ID which is local to the simulator the object is in</param>
            <param name="groupOwner">The <seealso cref="T:OpenMetaverse.UUID"/> of the group to deed the object to</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.DeedObjects(OpenMetaverse.Simulator,System.Collections.Generic.List{System.UInt32},OpenMetaverse.UUID)">
            <summary>
            Deed multiple objects (prims) to a group, Objects must be shared with group which
            can be accomplished with SetPermissions()
            </summary>
            <param name="simulator">A reference to the <seealso cref="T:OpenMetaverse.Simulator"/> object where the object resides</param>
            <param name="localIDs">An array which contains the IDs of the objects to deed</param>
            <param name="groupOwner">The <seealso cref="T:OpenMetaverse.UUID"/> of the group to deed the object to</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.SetPermissions(OpenMetaverse.Simulator,System.Collections.Generic.List{System.UInt32},OpenMetaverse.PermissionWho,OpenMetaverse.PermissionMask,System.Boolean)">
            <summary>
            Set the permissions on multiple objects
            </summary>
            <param name="simulator">A reference to the <seealso cref="T:OpenMetaverse.Simulator"/> object where the objects reside</param>
            <param name="localIDs">An array which contains the IDs of the objects to set the permissions on</param>
            <param name="who">The new Who mask to set</param>
            <param name="permissions">The new Permissions mark to set</param>
            <param name="set">TODO: What does this do?</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.RequestObjectPropertiesFamily(OpenMetaverse.Simulator,OpenMetaverse.UUID)">
            <summary>
            Request additional properties for an object
            </summary>
            <param name="simulator">A reference to the <seealso cref="T:OpenMetaverse.Simulator"/> object where the object resides</param>
            <param name="objectID"></param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.RequestObjectPropertiesFamily(OpenMetaverse.Simulator,OpenMetaverse.UUID,System.Boolean)">
            <summary>
            Request additional properties for an object
            </summary>
            <param name="simulator">A reference to the <seealso cref="T:OpenMetaverse.Simulator"/> object where the object resides</param>
            <param name="objectID">Absolute UUID of the object</param>
            <param name="reliable">Whether to require server acknowledgement of this request</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.UpdateHandler(OpenMetaverse.Packets.Packet,OpenMetaverse.Simulator)">
            <summary>
            Used for new prims, or significant changes to existing prims
            </summary>
            <param name="packet"></param>
            <param name="simulator"></param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.TerseUpdateHandler(OpenMetaverse.Packets.Packet,OpenMetaverse.Simulator)">
            <summary>
            A terse object update, used when a transformation matrix or
            velocity/acceleration for an object changes but nothing else
            (scale/position/rotation/acceleration/velocity)
            </summary>
            <param name="packet"></param>
            <param name="simulator"></param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.CompressedUpdateHandler(OpenMetaverse.Packets.Packet,OpenMetaverse.Simulator)">
            <summary>
            
            </summary>
            <param name="packet"></param>
            <param name="simulator"></param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.CachedUpdateHandler(OpenMetaverse.Packets.Packet,OpenMetaverse.Simulator)">
            <summary>
            Handles cached object update packets from the simulator
            </summary>
            <param name="packet">The packet containing the object data</param>
            <param name="simulator">The simulator sending the data</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.KillObjectHandler(OpenMetaverse.Packets.Packet,OpenMetaverse.Simulator)">
            <summary>
            Handle KillObject packets from the simulator
            </summary>
            <param name="packet">The packet containing the object data</param>
            <param name="simulator">The simulator sending the data</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.BuildBasicShape(OpenMetaverse.PrimType)">
            <summary>
            Setup construction data for a basic primitive shape
            </summary>
            <param name="type">Primitive shape to construct</param>
            <returns>Construction data that can be plugged into a <seealso cref="T:OpenMetaverse.Primitive"/></returns>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.SetAvatarSittingOn(OpenMetaverse.Simulator,OpenMetaverse.Avatar,System.UInt32,System.UInt32)">
            <summary>
            
            </summary>
            <param name="sim"></param>
            <param name="av"></param>
            <param name="localid"></param>
            <param name="oldSeatID"></param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.UpdateDilation(OpenMetaverse.Simulator,System.UInt32)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <param name="dilation"></param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.SetShape(OpenMetaverse.Simulator,System.UInt32,OpenMetaverse.Primitive.ConstructionData)">
            <summary>
            Set the Shape data of an object
            </summary>
            <param name="simulator">A reference to the <seealso cref="T:OpenMetaverse.Simulator"/> object where the object resides</param>
            <param name="localID">The objects ID which is local to the simulator the object is in</param>
            <param name="prim">Data describing the prim shape</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.SetMaterial(OpenMetaverse.Simulator,System.UInt32,OpenMetaverse.Material)">
            <summary>
            Set the Material data of an object
            </summary>
            <param name="simulator">A reference to the <seealso cref="T:OpenMetaverse.Simulator"/> object where the object resides</param>
            <param name="localID">The objects ID which is local to the simulator the object is in</param>
            <param name="material">The new material of the object</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.GetPrimitive(OpenMetaverse.Simulator,System.UInt32,OpenMetaverse.UUID)">
            <summary>
            
            </summary>
            <param name="simulator"></param>
            <param name="localID"></param>
            <param name="fullID"></param>
            <returns></returns>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.GetAvatar(OpenMetaverse.Simulator,System.UInt32,OpenMetaverse.UUID)">
            <summary>
            
            </summary>
            <param name="simulator"></param>
            <param name="localID"></param>
            <param name="fullID"></param>
            <returns></returns>
        </member>
        <member name="E:OpenMetaverse.ObjectManager.OnNewPrim">
            <summary>
            This event will be raised for every ObjectUpdate block that 
            contains a prim that isn't attached to an avatar.
            </summary>
            <remarks>Depending on the circumstances a client could 
            receive two or more of these events for the same object, if you 
            or the object left the current sim and returned for example. Client
            applications are responsible for tracking and storing objects.
            </remarks>
        </member>
        <member name="E:OpenMetaverse.ObjectManager.OnNewAttachment">
            <summary>
            This event will be raised for every ObjectUpdate block that 
            contains an avatar attachment.
            </summary>
            <remarks>Depending on the circumstances a client could 
            receive two or more of these events for the same object, if you 
            or the object left the current sim and returned for example. Client
            applications are responsible for tracking and storing objects.
            </remarks>
        </member>
        <member name="E:OpenMetaverse.ObjectManager.OnNewAvatar">
            <summary>
            This event will be raised for every ObjectUpdate block that 
            contains a new avatar.
            </summary>
            <remarks>Depending on the circumstances a client 
            could receive two or more of these events for the same avatar, if 
            you or the other avatar left the current sim and returned for 
            example. Client applications are responsible for tracking and 
            storing objects.
            </remarks>
        </member>
        <member name="E:OpenMetaverse.ObjectManager.OnObjectUpdated">
            <summary>
            This event will be raised when a terse object update packet is 
            received, containing the updated position, rotation, and 
            movement-related vectors
            </summary>
        </member>
        <member name="E:OpenMetaverse.ObjectManager.OnAvatarSitChanged">
            <summary>
            This event will be raised when an avatar sits on an object
            or stands up, with a local ID of the current seat or zero.
            </summary>
        </member>
        <member name="E:OpenMetaverse.ObjectManager.OnObjectKilled">
            <summary>
            This event will be raised when an object is removed from a 
            simulator.
            </summary>
        </member>
        <member name="E:OpenMetaverse.ObjectManager.OnObjectProperties">
            <summary>
            This event will be raised when an objects properties are received
            from the simulator
            </summary>
        </member>
        <member name="E:OpenMetaverse.ObjectManager.OnObjectPropertiesFamily">
            <summary>
            Thie event will be raised when an objects properties family 
            information is recieved from the simulator. ObjectPropertiesFamily
            is a subset of the fields found in ObjectProperties
            </summary>
        </member>
        <member name="T:OpenMetaverse.ObjectManager.NewPrimCallback">
            <summary>
            
            </summary>
            <param name="simulator"></param>
            <param name="prim"></param>
            <param name="regionHandle"></param>
            <param name="timeDilation"></param>
        </member>
        <member name="T:OpenMetaverse.ObjectManager.NewAttachmentCallback">
            <summary>
            
            </summary>
            <param name="simulator"></param>
            <param name="prim"></param>
            <param name="regionHandle"></param>
            <param name="timeDilation"></param>
        </member>
        <member name="T:OpenMetaverse.ObjectManager.ObjectPropertiesCallback">
            <summary>
            
            </summary>
            <param name="simulator"></param>
            <param name="props"></param>
        </member>
        <member name="T:OpenMetaverse.ObjectManager.ObjectPropertiesFamilyCallback">
            <summary>
            
            </summary>
            <param name="simulator"></param>
            <param name="props"></param>
            <param name="type"></param>
        </member>
        <member name="T:OpenMetaverse.ObjectManager.NewAvatarCallback">
            <summary>
            
            </summary>
            <param name="simulator"></param>
            <param name="avatar"></param>
            <param name="regionHandle"></param>
            <param name="timeDilation"></param>
        </member>
        <member name="T:OpenMetaverse.ObjectManager.NewFoliageCallback">
            <summary>
            
            </summary>
            <param name="simulator"></param>
            <param name="foliage"></param>
            <param name="regionHandle"></param>
            <param name="timeDilation"></param>
        </member>
        <member name="T:OpenMetaverse.ObjectManager.ObjectUpdatedCallback">
            <summary>
            Called whenever an object disappears
            </summary>
            <param name="simulator"></param>
            <param name="update"></param>
            <param name="regionHandle"></param>
            <param name="timeDilation"></param>
        </member>
        <member name="T:OpenMetaverse.ObjectManager.KillObjectCallback">
            <summary>
            
            </summary>
            <param name="simulator"></param>
            <param name="objectID"></param>
        </member>
        <member name="T:OpenMetaverse.ObjectManager.AvatarSitChanged">
            <summary>
            Called whenever the client avatar sits down or stands up
            </summary>
            <param name="simulator">Simulator the packet was received from</param>
            <param name="avatar"></param>
            <param name="sittingOn">The local ID of the object that is being sat
            <param name="oldSeat"></param>
            on. If this is zero the avatar is not sitting on an object</param>
        </member>
        <member name="F:OpenMetaverse.UDPPacketBuffer.BUFFER_SIZE">
            <summary>Size of the byte array used to store raw packet data</summary>
        </member>
        <member name="F:OpenMetaverse.UDPPacketBuffer.ZERO_BUFFER_SIZE">
            <summary>Size of the temporary buffer for zerodecoding and 
            zeroencoding this packet</summary>
        </member>
        <member name="F:OpenMetaverse.UDPPacketBuffer.Data">
            <summary>Raw packet data buffer</summary>
        </member>
        <member name="F:OpenMetaverse.UDPPacketBuffer.ZeroData">
            <summary>Temporary buffer used for zerodecoding and zeroencoding
            this packet</summary>
        </member>
        <member name="F:OpenMetaverse.UDPPacketBuffer.DataLength">
            <summary>Length of the data to transmit</summary>
        </member>
        <member name="F:OpenMetaverse.UDPPacketBuffer.RemoteEndPoint">
            <summary>EndPoint of the remote host</summary>
        </member>
        <member name="M:OpenMetaverse.UDPPacketBuffer.#ctor">
            <summary>
            Create an allocated UDP packet buffer for receiving a packet
            </summary>
        </member>
        <member name="M:OpenMetaverse.UDPPacketBuffer.#ctor(System.Net.IPEndPoint)">
            <summary>
            Create an allocated UDP packet buffer for sending a packet
            </summary>
            <param name="endPoint">EndPoint of the remote host</param>
        </member>
        <member name="T:OpenMetaverse.PacketBufferPool">
            <summary>
            Object pool for packet buffers. This is used to allocate memory for all
            incoming and outgoing packets, and zerocoding buffers for those packets
            </summary>
        </member>
        <member name="M:OpenMetaverse.ObjectPoolBase`1.#ctor">
            <summary>
            Creates a new instance of the ObjectPoolBase class. Initialize MUST be called
            after using this constructor.
            </summary>
        </member>
        <member name="M:OpenMetaverse.ObjectPoolBase`1.#ctor(System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Creates a new instance of the ObjectPool Base class.        
            </summary>
            <param name="itemsPerSegment">The object pool is composed of segments, which 
            are allocated whenever the size of the pool is exceeded. The number of items
            in a segment should be large enough that allocating a new segmeng is a rare
            thing. For example, on a server that will have 10k people logged in at once, 
            the receive buffer object pool should have segment sizes of at least 1000 
            byte arrays per segment.
            </param>
            <param name="minimumSegmentCount">The minimun number of segments that may exist.</param>
            <param name="gcOnPoolGrowth">Perform a full GC.Collect whenever a segment is allocated, and then again after allocation to compact the heap.</param>
            <param name="cleanupFrequenceMS">The frequency which segments are checked to see if they're eligible for cleanup.</param>
        </member>
        <member name="M:OpenMetaverse.ObjectPoolBase`1.ForceCleanup">
            <summary>
            Forces the segment cleanup algorithm to be run. This method is intended 
            primarly for use from the Unit Test libraries.
            </summary>
        </member>
        <member name="M:OpenMetaverse.ObjectPoolBase`1.GetObjectInstance">
            <summary>
            Responsible for allocate 1 instance of an object that will be stored in a segment. 
            </summary>
            <returns>An instance of whatever objec the pool is pooling.</returns>
        </member>
        <member name="M:OpenMetaverse.ObjectPoolBase`1.CheckIn(OpenMetaverse.ObjectPoolSegment{`0},`0)">
            <summary>
            Checks in an instance of T owned by the object pool. This method is only intended to be called
            by the <c>WrappedObject</c> class.
            </summary>
            <param name="owningSegment">The segment from which the instance is checked out.</param>
            <param name="instance">The instance of <c>T</c> to check back into the segment.</param>
        </member>
        <member name="M:OpenMetaverse.ObjectPoolBase`1.CheckOut">
            <summary>
            Checks an instance of <c>T</c> from the pool. If the pool is not sufficient to 
            allow the checkout, a new segment is created. 
            </summary>
            <returns>A <c>WrappedObject</c> around the instance of <c>T</c>. To check
            the instance back into the segment, be sureto dispose the WrappedObject 
            when finished. </returns>
        </member>
        <member name="P:OpenMetaverse.ObjectPoolBase`1.TotalSegments">
            <summary>
            The total number of segments created. Intended to be used by the Unit Tests.
            </summary>
        </member>
        <member name="P:OpenMetaverse.ObjectPoolBase`1.ItemsPerSegment">
            <summary>
            The number of items that are in a segment. Items in a segment 
            are all allocated at the same time, and are hopefully close to 
            each other in the managed heap. 
            </summary>
        </member>
        <member name="P:OpenMetaverse.ObjectPoolBase`1.MinimumSegmentCount">
            <summary>
            The minimum number of segments. When segments are reclaimed, 
            this number of segments will always be left alone. These
            segments are allocated at startup.
            </summary>
        </member>
        <member name="P:OpenMetaverse.ObjectPoolBase`1.MinimumSegmentAgePriorToCleanup">
            <summary>
            The age a segment must be before it's eligible for cleanup. 
            This  is used to prevent thrash, and typical values are in 
            the 5 minute range.
            </summary>
        </member>
        <member name="P:OpenMetaverse.ObjectPoolBase`1.CleanupFrequencyMilliseconds">
            <summary>
            The frequence which the cleanup thread runs. This is typically
            expected to be in the 5 minute range. 
            </summary>
        </member>
        <member name="M:OpenMetaverse.PacketBufferPool.#ctor(System.Net.IPEndPoint,System.Int32,System.Int32)">
            <summary>
            Initialize the object pool in client mode
            </summary>
            <param name="endPoint">Server to connect to</param>
            <param name="itemsPerSegment"></param>
            <param name="minSegments"></param>
        </member>
        <member name="M:OpenMetaverse.PacketBufferPool.#ctor(System.Int32,System.Int32)">
            <summary>
            Initialize the object pool in server mode
            </summary>
            <param name="itemsPerSegment"></param>
            <param name="minSegments"></param>
        </member>
        <member name="M:OpenMetaverse.PacketBufferPool.GetObjectInstance">
            <summary>
            Returns a packet buffer with EndPoint set if the buffer is in
            client mode, or with EndPoint set to null in server mode
            </summary>
            <returns>Initialized UDPPacketBuffer object</returns>
        </member>
        <member name="M:OpenMetaverse.Pool.#cctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenMetaverse.Pool.CheckOut">
            <summary>
            Check a packet buffer out of the pool
            </summary>
            <returns>A packet buffer object</returns>
        </member>
        <member name="M:OpenMetaverse.WrappedObject`1.Dispose">
            <summary>
            Checks the instance back into the object pool
            </summary>
        </member>
        <member name="P:OpenMetaverse.WrappedObject`1.Instance">
            <summary>
            Returns an instance of the class that has been checked out of the Object Pool.
            </summary>
        </member>
        <member name="T:OpenMetaverse.ObjectReturnType">
            <summary>
            Type of return to use when returning objects from a parcel
            </summary>
        </member>
        <member name="F:OpenMetaverse.ObjectReturnType.None">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.ObjectReturnType.Owner">
            <summary>Return objects owned by parcel owner</summary>
        </member>
        <member name="F:OpenMetaverse.ObjectReturnType.Group">
            <summary>Return objects set to group</summary>
        </member>
        <member name="F:OpenMetaverse.ObjectReturnType.Other">
            <summary>Return objects not owned by parcel owner or set to group</summary>
        </member>
        <member name="F:OpenMetaverse.ObjectReturnType.List">
            <summary>Return a specific list of objects on parcel</summary>
        </member>
        <member name="F:OpenMetaverse.ObjectReturnType.Sell">
            <summary>Return objects that are marked for-sale</summary>
        </member>
        <member name="T:OpenMetaverse.ParcelAccessFlags">
            <summary>
            Blacklist/Whitelist flags used in parcels Access List
            </summary>
        </member>
        <member name="F:OpenMetaverse.ParcelAccessFlags.NoAccess">
            <summary>Agent is denied access</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelAccessFlags.Access">
            <summary>Agent is granted access</summary>
        </member>
        <member name="T:OpenMetaverse.ParcelResult">
            <summary>
            The result of a request for parcel properties
            </summary>
        </member>
        <member name="F:OpenMetaverse.ParcelResult.NoData">
            <summary>No matches were found for the request</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelResult.Single">
            <summary>Request matched a single parcel</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelResult.Multiple">
            <summary>Request matched multiple parcels</summary>
        </member>
        <member name="T:OpenMetaverse.AccessList">
            <summary>
            Flags used in the ParcelAccessListRequest packet to specify whether
            we want the access list (whitelist), ban list (blacklist), or both
            </summary>
        </member>
        <member name="F:OpenMetaverse.AccessList.Access">
            <summary>Request the access list</summary>
        </member>
        <member name="F:OpenMetaverse.AccessList.Ban">
            <summary>Request the ban list</summary>
        </member>
        <member name="F:OpenMetaverse.AccessList.Both">
            <summary>Request both White and Black lists</summary>
        </member>
        <member name="T:OpenMetaverse.ParcelStatus">
            <summary>
            Sequence ID in ParcelPropertiesReply packets (sent when avatar
            tries to cross a parcel border)
            </summary>
        </member>
        <member name="F:OpenMetaverse.ParcelStatus.ParcelSelected">
            <summary>Parcel is currently selected</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelStatus.CollisionNotInGroup">
            <summary>Parcel restricted to a group the avatar is not a
            member of</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelStatus.CollisionBanned">
            <summary>Avatar is banned from the parcel</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelStatus.CollisionNotOnAccessList">
            <summary>Parcel is restricted to an access list that the
            avatar is not on</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelStatus.HoveredOverParcel">
            <summary>Response to hovering over a parcel</summary>
        </member>
        <member name="T:OpenMetaverse.TerraformAction">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenMetaverse.TerraformAction.Level">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.TerraformAction.Raise">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.TerraformAction.Lower">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.TerraformAction.Smooth">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.TerraformAction.Noise">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.TerraformAction.Revert">
            <summary></summary>
        </member>
        <member name="T:OpenMetaverse.TerraformBrushSize">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenMetaverse.TerraformBrushSize.Small">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.TerraformBrushSize.Medium">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.TerraformBrushSize.Large">
            <summary></summary>
        </member>
        <member name="T:OpenMetaverse.AccessDeniedReason">
            <summary>
            Reasons agent is denied access to a parcel on the simulator
            </summary>
        </member>
        <member name="F:OpenMetaverse.AccessDeniedReason.NotDenied">
            <summary>Agent is not denied, access is granted</summary>
        </member>
        <member name="F:OpenMetaverse.AccessDeniedReason.NotInGroup">
            <summary>Agent is not a member of the group set for the parcel, or which owns the parcel</summary>
        </member>
        <member name="F:OpenMetaverse.AccessDeniedReason.NotOnAllowList">
            <summary>Agent is not on the parcels specific allow list</summary>
        </member>
        <member name="F:OpenMetaverse.AccessDeniedReason.BannedFromParcel">
            <summary>Agent is on the parcels ban list</summary>
        </member>
        <member name="F:OpenMetaverse.AccessDeniedReason.NoAccess">
            <summary>Unknown</summary>
        </member>
        <member name="F:OpenMetaverse.AccessDeniedReason.NotAgeVerified">
            <summary>Agent is not age verified and parcel settings deny access to non age verified avatars</summary>
        </member>
        <member name="T:OpenMetaverse.ParcelOverlayType">
            <summary>
            Parcel overlay type. This is used primarily for highlighting and
            coloring which is why it is a single integer instead of a set of
            flags
            </summary>
            <remarks>These values seem to be poorly thought out. The first three
            bits represent a single value, not flags. For example Auction (0x05) is
            not a combination of OwnedByOther (0x01) and ForSale(0x04). However,
            the BorderWest and BorderSouth values are bit flags that get attached
            to the value stored in the first three bits. Bits four, five, and six
            are unused</remarks>
        </member>
        <member name="F:OpenMetaverse.ParcelOverlayType.Public">
            <summary>Public land</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelOverlayType.OwnedByOther">
            <summary>Land is owned by another avatar</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelOverlayType.OwnedByGroup">
            <summary>Land is owned by a group</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelOverlayType.OwnedBySelf">
            <summary>Land is owned by the current avatar</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelOverlayType.ForSale">
            <summary>Land is for sale</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelOverlayType.Auction">
            <summary>Land is being auctioned</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelOverlayType.BorderWest">
            <summary>To the west of this area is a parcel border</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelOverlayType.BorderSouth">
            <summary>To the south of this area is a parcel border</summary>
        </member>
        <member name="T:OpenMetaverse.ParcelInfo">
            <summary>
            Some information about a parcel of land returned from a DirectoryManager search
            </summary>
        </member>
        <member name="F:OpenMetaverse.ParcelInfo.ID">
            <summary>Global Key of record</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelInfo.OwnerID">
            <summary>Parcel Owners <seealso cref="T:OpenMetaverse.UUID"/></summary>
        </member>
        <member name="F:OpenMetaverse.ParcelInfo.Name">
            <summary>Name field of parcel, limited to 128 characters</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelInfo.Description">
            <summary>Description field of parcel, limited to 256 characters</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelInfo.ActualArea">
            <summary>Total Square meters of parcel</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelInfo.BillableArea">
            <summary>Total area billable as Tier, for group owned land this will be 10% less than ActualArea</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelInfo.Mature">
            <summary>True of parcel is in Mature simulator</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelInfo.GlobalX">
            <summary>Grid global X position of parcel</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelInfo.GlobalY">
            <summary>Grid global Y position of parcel</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelInfo.GlobalZ">
            <summary>Grid global Z position of parcel (not used)</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelInfo.SimName">
            <summary>Name of simulator parcel is located in</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelInfo.SnapshotID">
            <summary>Texture <seealso cref="T:OpenMetaverse.UUID"/> of parcels display picture</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelInfo.Dwell">
            <summary>Float representing calculated traffic based on time spent on parcel by avatars</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelInfo.SalePrice">
            <summary>Sale price of parcel (not used)</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelInfo.AuctionID">
            <summary>Auction ID of parcel</summary>
        </member>
        <member name="T:OpenMetaverse.ParcelMedia">
            <summary>
            Parcel Media Information
            </summary>
        </member>
        <member name="F:OpenMetaverse.ParcelMedia.MediaAutoScale">
            <summary>A byte, if 0x1 viewer should auto scale media to fit object</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelMedia.MediaLoop">
            <summary>A boolean, if true the viewer should loop the media</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelMedia.MediaID">
            <summary>The Asset UUID of the Texture which when applied to a 
            primitive will display the media</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelMedia.MediaURL">
            <summary>A URL which points to any Quicktime supported media type</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelMedia.MediaDesc">
            <summary>A description of the media</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelMedia.MediaHeight">
            <summary>An Integer which represents the height of the media</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelMedia.MediaWidth">
            <summary>An integer which represents the width of the media</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelMedia.MediaType">
            <summary>A string which contains the mime type of the media</summary>
        </member>
        <member name="T:OpenMetaverse.Parcel">
            <summary>
            Parcel of land, a portion of virtual real estate in a simulator
            </summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.SelfCount">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.OtherCount">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.PublicCount">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.LocalID">
            <summary>Simulator-local ID of this parcel</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.OwnerID">
            <summary>UUID of the owner of this parcel</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.IsGroupOwned">
            <summary>Whether the land is deeded to a group or not</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.AuctionID">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.ClaimDate">
            <summary>Date land was claimed</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.ClaimPrice">
            <summary>Appears to always be zero</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.RentPrice">
            <summary>This field is no longer used</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.AABBMin">
            <summary>Minimum corner of the axis-aligned bounding box for this
            parcel</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.AABBMax">
            <summary>Maximum corner of the axis-aligned bounding box for this
            parcel</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.Bitmap">
            <summary>Bitmap describing land layout in 4x4m squares across the 
            entire region</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.Area">
            <summary>Total parcel land area</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.Status">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.SimWideMaxPrims">
            <summary>Maximum primitives across the entire simulator</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.SimWideTotalPrims">
            <summary>Total primitives across the entire simulator</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.MaxPrims">
            <summary>Maximum number of primitives this parcel supports</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.TotalPrims">
            <summary>Total number of primitives on this parcel</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.OwnerPrims">
            <summary>Total number of primitives owned by the parcel owner on 
            this parcel</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.GroupPrims">
            <summary>Total number of primitives owned by the parcel group on 
            this parcel</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.OtherPrims">
            <summary>Total number of other primitives on this parcel</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.ParcelPrimBonus">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.OtherCleanTime">
            <summary>Autoreturn value in minutes for others' objects</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.Flags">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.SalePrice">
            <summary>Sale price of the parcel, only useful if ForSale is set</summary>
            <remarks>The SalePrice will remain the same after an ownership
            transfer (sale), so it can be used to see the purchase price after
            a sale if the new owner has not changed it</remarks>
        </member>
        <member name="F:OpenMetaverse.Parcel.Name">
            <summary>Parcel Name</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.Desc">
            <summary>Parcel Description</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.MusicURL">
            <summary>URL For Music Stream</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.GroupID">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.PassPrice">
            <summary>Price for a temporary pass</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.PassHours">
            <summary>How long is pass valid for</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.Category">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.AuthBuyerID">
            <summary>Key of authorized buyer</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.SnapshotID">
            <summary>Key of parcel snapshot</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.UserLocation">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.UserLookAt">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.Landing">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.Dwell">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.RegionDenyAnonymous">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.RegionPushOverride">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.AccessWhiteList">
            <summary>Access list of who is whitelisted on this
            parcel</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.AccessBlackList">
            <summary>Access list of who is blacklisted on this
            parcel</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.RegionDenyAgeUnverified">
            <summary>TRUE of region denies access to age unverified users</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.ObscureMedia">
            <summary>true to obscure (hide) media url</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.ObscureMusic">
            <summary>true to obscure (hide) music url</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.Media">
            <summary>A struct containing media details</summary>
        </member>
        <member name="M:OpenMetaverse.Parcel.ToString">
            <summary>
            Displays a parcel object in string format
            </summary>
            <returns>string containing key=value pairs of a parcel object</returns>
        </member>
        <member name="M:OpenMetaverse.Parcel.#ctor(System.Int32)">
            <summary>
            Defalt constructor
            </summary>
            <param name="localID">Local ID of this parcel</param>
        </member>
        <member name="M:OpenMetaverse.Parcel.Update(OpenMetaverse.Simulator,System.Boolean)">
            <summary>
            Update the simulator with any local changes to this Parcel object
            </summary>
            <param name="simulator">Simulator to send updates to</param>
            <param name="wantReply">Whether we want the simulator to confirm
            the update with a reply packet or not</param>
        </member>
        <member name="M:OpenMetaverse.Parcel.UpdateOtherCleanTime(OpenMetaverse.Simulator)">
            <summary>
            Set Autoreturn time
            </summary>
            <param name="simulator">Simulator to send the update to</param>
        </member>
        <member name="T:OpenMetaverse.Parcel.ParcelFlags">
            <summary>
            Various parcel properties
            </summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.ParcelFlags.None">
            <summary>No flags set</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.ParcelFlags.AllowFly">
            <summary>Allow avatars to fly (a client-side only restriction)</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.ParcelFlags.AllowOtherScripts">
            <summary>Allow foreign scripts to run</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.ParcelFlags.ForSale">
            <summary>This parcel is for sale</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.ParcelFlags.AllowLandmark">
            <summary>Allow avatars to create a landmark on this parcel</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.ParcelFlags.AllowTerraform">
            <summary>Allows all avatars to edit the terrain on this parcel</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.ParcelFlags.AllowDamage">
            <summary>Avatars have health and can take damage on this parcel.
            If set, avatars can be killed and sent home here</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.ParcelFlags.CreateObjects">
            <summary>Foreign avatars can create objects here</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.ParcelFlags.ForSaleObjects">
            <summary>All objects on this parcel can be purchased</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.ParcelFlags.UseAccessGroup">
            <summary>Access is restricted to a group</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.ParcelFlags.UseAccessList">
            <summary>Access is restricted to a whitelist</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.ParcelFlags.UseBanList">
            <summary>Ban blacklist is enabled</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.ParcelFlags.UsePassList">
            <summary>Unknown</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.ParcelFlags.ShowDirectory">
            <summary>List this parcel in the search directory</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.ParcelFlags.AllowDeedToGroup">
            <summary>Allow personally owned parcels to be deeded to group</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.ParcelFlags.ContributeWithDeed">
            <summary>If Deeded, owner contributes required tier to group parcel is deeded to</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.ParcelFlags.SoundLocal">
            <summary>Restrict sounds originating on this parcel to the 
            parcel boundaries</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.ParcelFlags.SellParcelObjects">
            <summary>Objects on this parcel are sold when the land is 
            purchsaed</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.ParcelFlags.AllowPublish">
            <summary>Allow this parcel to be published on the web</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.ParcelFlags.MaturePublish">
            <summary>The information for this parcel is mature content</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.ParcelFlags.UrlWebPage">
            <summary>The media URL is an HTML page</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.ParcelFlags.UrlRawHtml">
            <summary>The media URL is a raw HTML string</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.ParcelFlags.RestrictPushObject">
            <summary>Restrict foreign object pushes</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.ParcelFlags.DenyAnonymous">
            <summary>Ban all non identified/transacted avatars</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.ParcelFlags.AllowGroupScripts">
            <summary>Allow group-owned scripts to run</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.ParcelFlags.CreateGroupObjects">
            <summary>Allow object creation by group members or group 
            objects</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.ParcelFlags.AllowAPrimitiveEntry">
            <summary>Allow all objects to enter this parcel</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.ParcelFlags.AllowGroupObjectEntry">
            <summary>Only allow group and owner objects to enter this parcel</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.ParcelFlags.AllowVoiceChat">
            <summary>Voice Enabled on this parcel</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.ParcelFlags.UseEstateVoiceChan">
            <summary>Use Estate Voice channel for Voice on this parcel</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.ParcelFlags.DenyAgeUnverified">
            <summary>Deny Age Unverified Users</summary>
        </member>
        <member name="T:OpenMetaverse.Parcel.ParcelStatus">
            <summary>
            Parcel ownership status
            </summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.ParcelStatus.None">
            <summary>Placeholder</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.ParcelStatus.Leased">
            <summary>Parcel is leased (owned) by an avatar or group</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.ParcelStatus.LeasePending">
            <summary>Parcel is in process of being leased (purchased) by an avatar or group</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.ParcelStatus.Abandoned">
            <summary>Parcel has been abandoned back to Governor Linden</summary>
        </member>
        <member name="T:OpenMetaverse.Parcel.ParcelCategory">
            <summary>
            Category parcel is listed in under search
            </summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.ParcelCategory.None">
            <summary>No assigned category</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.ParcelCategory.Linden">
            <summary>Linden Infohub or public area</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.ParcelCategory.Adult">
            <summary>Adult themed area</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.ParcelCategory.Arts">
            <summary>Arts and Culture</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.ParcelCategory.Business">
            <summary>Business</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.ParcelCategory.Educational">
            <summary>Educational</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.ParcelCategory.Gaming">
            <summary>Gaming</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.ParcelCategory.Hangout">
            <summary>Hangout or Club</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.ParcelCategory.Newcomer">
            <summary>Newcomer friendly</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.ParcelCategory.Park">
            <summary>Parks and Nature</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.ParcelCategory.Residential">
            <summary>Residential</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.ParcelCategory.Shopping">
            <summary>Shopping</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.ParcelCategory.Stage">
            <summary>Not Used?</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.ParcelCategory.Other">
            <summary>Other</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.ParcelCategory.Any">
            <summary>Not an actual category, only used for queries</summary>
        </member>
        <member name="T:OpenMetaverse.Parcel.LandingType">
            <summary>
            Type of teleport landing for a parcel
            </summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.LandingType.None">
            <summary>Unset, simulator default</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.LandingType.LandingPoint">
            <summary>Specific landing point set for this parcel</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.LandingType.Direct">
            <summary>No landing point set, direct teleports enabled for
            this parcel</summary>
        </member>
        <member name="T:OpenMetaverse.ParcelManager">
            <summary>
            Parcel (subdivided simulator lots) subsystem
            </summary>
        </member>
        <member name="M:OpenMetaverse.ParcelManager.#ctor(OpenMetaverse.GridClient)">
            <summary>
            Default constructor
            </summary>
            <param name="client">A reference to the GridClient object</param>
        </member>
        <member name="M:OpenMetaverse.ParcelManager.InfoRequest(OpenMetaverse.UUID)">
            <summary>
            Request basic information for a single parcel
            </summary>
            <param name="parcelID">Simulator-local ID of the parcel</param>
        </member>
        <member name="M:OpenMetaverse.ParcelManager.PropertiesRequest(OpenMetaverse.Simulator,System.Int32,System.Int32)">
            <summary>
            Request properties of a single parcel
            </summary>
            <param name="simulator">Simulator containing the parcel</param>
            <param name="localID">Simulator-local ID of the parcel</param>
            <param name="sequenceID">An arbitrary integer that will be returned
            with the ParcelProperties reply, useful for distinguishing between
            multiple simultaneous requests</param>
        </member>
        <member name="M:OpenMetaverse.ParcelManager.AccessListRequest(OpenMetaverse.Simulator,System.Int32,OpenMetaverse.AccessList,System.Int32)">
            <summary>
            Request the access list for a single parcel
            </summary>
            <param name="simulator">Simulator containing the parcel</param>
            <param name="localID">Simulator-local ID of the parcel</param>
            <param name="sequenceID">An arbitrary integer that will be returned
            with the ParcelAccessList reply, useful for distinguishing between
            multiple simultaneous requests</param>
            <param name="flags"></param>
        </member>
        <member name="M:OpenMetaverse.ParcelManager.PropertiesRequest(OpenMetaverse.Simulator,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Boolean)">
            <summary>
            Request properties of parcels using a bounding box selection
            </summary>
            <param name="simulator">Simulator containing the parcel</param>
            <param name="north">Northern boundary of the parcel selection</param>
            <param name="east">Eastern boundary of the parcel selection</param>
            <param name="south">Southern boundary of the parcel selection</param>
            <param name="west">Western boundary of the parcel selection</param>
            <param name="sequenceID">An arbitrary integer that will be returned
            with the ParcelProperties reply, useful for distinguishing between
            different types of parcel property requests</param>
            <param name="snapSelection">A boolean that is returned with the
            ParcelProperties reply, useful for snapping focus to a single
            parcel</param>
        </member>
        <member name="M:OpenMetaverse.ParcelManager.RequestAllSimParcels(OpenMetaverse.Simulator)">
            <summary>
            Request all simulator parcel properties (used for populating the <code>Simulator.Parcels</code> 
            dictionary)
            </summary>
            <param name="simulator">Simulator to request parcels from (must be connected)</param>
        </member>
        <member name="M:OpenMetaverse.ParcelManager.RequestAllSimParcels(OpenMetaverse.Simulator,System.Boolean,System.Int32)">
            <summary>
            Request all simulator parcel properties (used for populating the <code>Simulator.Parcels</code> 
            dictionary)
            </summary>
            <param name="simulator">Simulator to request parcels from (must be connected)</param>
            <param name="refresh">If TRUE, will force a full refresh</param>
            <param name="msDelay">Number of milliseconds to pause in between each request</param>
        </member>
        <member name="M:OpenMetaverse.ParcelManager.DwellRequest(OpenMetaverse.Simulator,System.Int32)">
            <summary>
            Request the dwell value for a parcel
            </summary>
            <param name="simulator">Simulator containing the parcel</param>
            <param name="localID">Simulator-local ID of the parcel</param>
        </member>
        <member name="M:OpenMetaverse.ParcelManager.Buy(OpenMetaverse.Simulator,System.Int32,System.Boolean,OpenMetaverse.UUID,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Send a request to Purchase a parcel of land
            </summary>
            <param name="simulator">The Simulator the parcel is located in</param>
            <param name="localID">The parcels region specific local ID</param>
            <param name="forGroup">true if this parcel is being purchased by a group</param>
            <param name="groupID">The groups <seealso cref="T:OpenMetaverse.UUID"/></param>
            <param name="removeContribution">true to remove tier contribution if purchase is successful</param>
            <param name="parcelArea">The parcels size</param>
            <param name="parcelPrice">The purchase price of the parcel</param>
            <returns></returns>
        </member>
        <member name="M:OpenMetaverse.ParcelManager.Reclaim(OpenMetaverse.Simulator,System.Int32)">
            <summary>
            Reclaim a parcel of land
            </summary>
            <param name="simulator">The simulator the parcel is in</param>
            <param name="localID">The parcels region specific local ID</param>
        </member>
        <member name="M:OpenMetaverse.ParcelManager.DeedToGroup(OpenMetaverse.Simulator,System.Int32,OpenMetaverse.UUID)">
            <summary>
            Deed a parcel to a group
            </summary>
            <param name="simulator">The simulator the parcel is in</param>
            <param name="localID">The parcels region specific local ID</param>
            <param name="groupID">The groups <seealso cref="T:OpenMetaverse.UUID"/></param>
        </member>
        <member name="M:OpenMetaverse.ParcelManager.ObjectOwnersRequest(OpenMetaverse.Simulator,System.Int32)">
            <summary>
            Request prim owners of a parcel of land.
            </summary>
            <param name="simulator">Simulator parcel is in</param>
            <param name="localID">The parcels region specific local ID</param>
        </member>
        <member name="M:OpenMetaverse.ParcelManager.ReturnObjects(OpenMetaverse.Simulator,System.Int32,OpenMetaverse.ObjectReturnType,System.Collections.Generic.List{OpenMetaverse.UUID})">
            <summary>
            Return objects from a parcel
            </summary>
            <param name="simulator">Simulator parcel is in</param>
            <param name="localID">The parcels region specific local ID</param>
            <param name="type">the type of objects to return, <seealso cref="T:OpenMetaverse.ObjectReturnType"/></param>
            <param name="ownerIDs">A list containing object owners <seealso cref="T:OpenMetaverse.UUID"/>s to return</param>
        </member>
        <member name="M:OpenMetaverse.ParcelManager.ParcelSubdivide(OpenMetaverse.Simulator,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Subdivide (split) a parcel
            </summary>
            <param name="simulator"></param>
            <param name="west"></param>
            <param name="south"></param>
            <param name="east"></param>
            <param name="north"></param>
        </member>
        <member name="M:OpenMetaverse.ParcelManager.ParcelJoin(OpenMetaverse.Simulator,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Join two parcels of land creating a single parcel
            </summary>
            <param name="simulator"></param>
            <param name="west"></param>
            <param name="south"></param>
            <param name="east"></param>
            <param name="north"></param>
        </member>
        <member name="M:OpenMetaverse.ParcelManager.GetParcelLocalID(OpenMetaverse.Simulator,OpenMetaverse.Vector3)">
            <summary>
            Get a parcels LocalID
            </summary>
            <param name="simulator">Simulator parcel is in</param>
            <param name="position">Vector3 position in simulator (Z not used)</param>
            <returns>0 on failure, or parcel LocalID on success.</returns>
            <remarks>A call to <code>Parcels.RequestAllSimParcels</code> is required to populate map and
            dictionary.</remarks>
        </member>
        <member name="M:OpenMetaverse.ParcelManager.Terraform(OpenMetaverse.Simulator,System.Int32,OpenMetaverse.TerraformAction,OpenMetaverse.TerraformBrushSize)">
            <summary>
            Terraform (raise, lower, etc) an area or whole parcel of land
            </summary>
            <param name="simulator">Simulator land area is in.</param>
            <param name="localID">LocalID of parcel, or -1 if using bounding box</param>
            <param name="action">From Enum, Raise, Lower, Level, Smooth, Etc.</param>
            <param name="brushSize">Size of area to modify</param>
            <returns>true on successful request sent.</returns>
            <remarks>Settings.STORE_LAND_PATCHES must be true, 
            Parcel information must be downloaded using <code>RequestAllSimParcels()</code></remarks>
        </member>
        <member name="M:OpenMetaverse.ParcelManager.Terraform(OpenMetaverse.Simulator,System.Single,System.Single,System.Single,System.Single,OpenMetaverse.TerraformAction,OpenMetaverse.TerraformBrushSize)">
            <summary>
            Terraform (raise, lower, etc) an area or whole parcel of land
            </summary>
            <param name="simulator">Simulator land area is in.</param>
            <param name="west">west border of area to modify</param>
            <param name="south">south border of area to modify</param>
            <param name="east">east border of area to modify</param>
            <param name="north">north border of area to modify</param>
            <param name="action">From Enum, Raise, Lower, Level, Smooth, Etc.</param>
            <param name="brushSize">Size of area to modify</param>
            <returns>true on successful request sent.</returns>
            <remarks>Settings.STORE_LAND_PATCHES must be true, 
            Parcel information must be downloaded using <code>RequestAllSimParcels()</code></remarks>
        </member>
        <member name="M:OpenMetaverse.ParcelManager.Terraform(OpenMetaverse.Simulator,System.Int32,System.Single,System.Single,System.Single,System.Single,OpenMetaverse.TerraformAction,OpenMetaverse.TerraformBrushSize,System.Int32)">
            <summary>
            Terraform (raise, lower, etc) an area or whole parcel of land
            </summary>
            <param name="simulator">Simulator land area is in.</param>
            <param name="localID">LocalID of parcel, or -1 if using bounding box</param>
            <param name="west">west border of area to modify</param>
            <param name="south">south border of area to modify</param>
            <param name="east">east border of area to modify</param>
            <param name="north">north border of area to modify</param>
            <param name="action">From Enum, Raise, Lower, Level, Smooth, Etc.</param>
            <param name="brushSize">Size of area to modify</param>
            <param name="seconds">How many meters + or - to lower, 1 = 1 meter</param>
            <returns>true on successful request sent.</returns>
            <remarks>Settings.STORE_LAND_PATCHES must be true, 
            Parcel information must be downloaded using <code>RequestAllSimParcels()</code></remarks>
        </member>
        <member name="M:OpenMetaverse.ParcelManager.Terraform(OpenMetaverse.Simulator,System.Int32,System.Single,System.Single,System.Single,System.Single,OpenMetaverse.TerraformAction,OpenMetaverse.TerraformBrushSize,System.Int32,System.Single)">
            <summary>
            Terraform (raise, lower, etc) an area or whole parcel of land
            </summary>
            <param name="simulator">Simulator land area is in.</param>
            <param name="localID">LocalID of parcel, or -1 if using bounding box</param>
            <param name="west">west border of area to modify</param>
            <param name="south">south border of area to modify</param>
            <param name="east">east border of area to modify</param>
            <param name="north">north border of area to modify</param>
            <param name="action">From Enum, Raise, Lower, Level, Smooth, Etc.</param>
            <param name="brushSize">Size of area to modify</param>
            <param name="seconds">How many meters + or - to lower, 1 = 1 meter</param>
            <param name="height">Height at which the terraform operation is acting at</param>
        </member>
        <member name="M:OpenMetaverse.ParcelManager.SelectObjects(System.Int32,OpenMetaverse.ObjectReturnType,OpenMetaverse.UUID)">
            <summary>
            Sends a request to the simulator to return a list of objects owned by specific owners
            </summary>
            <param name="localID">Simulator local ID of parcel</param>
            <param name="selectType">Owners, Others, Etc</param>
            <param name="ownerID">List containing keys of avatars objects to select; 
            if List is null will return Objects of type <c>selectType</c></param>
            <remarks>Response data is returned in the event <seealso cref="E:OnParcelSelectedObjects"/></remarks>
        </member>
        <member name="M:OpenMetaverse.ParcelManager.EjectUser(OpenMetaverse.UUID,System.Boolean)">
            <summary>
            Eject and optionally ban a user from a parcel
            </summary>
            <param name="targetID">target key of avatar to eject</param>
            <param name="ban">true to also ban target</param>
        </member>
        <member name="M:OpenMetaverse.ParcelManager.FreezeUser(OpenMetaverse.UUID,System.Boolean)">
            <summary>
            Freeze or unfreeze an avatar over your land
            </summary>
            <param name="targetID">target key to freeze</param>
            <param name="freeze">true to freeze, false to unfreeze</param>
        </member>
        <member name="M:OpenMetaverse.ParcelManager.ReleaseParcel(OpenMetaverse.Simulator,System.Int32)">
            <summary>
            Abandon a parcel of land
            </summary>
            <param name="simulator">Simulator parcel is in</param>
            <param name="localID">Simulator local ID of parcel</param>
        </member>
        <member name="M:OpenMetaverse.ParcelManager.ParcelPropertiesReplyHandler(System.String,OpenMetaverse.StructuredData.OSD,OpenMetaverse.Simulator)">
            <summary>
            ParcelProperties replies sent over CAPS
            </summary>
            <param name="capsKey">Not used (will always be ParcelProperties)</param>
            <param name="llsd">LLSD Structured data</param>
            <param name="simulator">Object representing simulator</param>
        </member>
        <member name="M:OpenMetaverse.ParcelManager.ParcelAccessListReplyHandler(OpenMetaverse.Packets.Packet,OpenMetaverse.Simulator)">
            <summary>
            
            </summary>
            <param name="packet"></param>
            <param name="simulator"></param>
        </member>
        <member name="M:OpenMetaverse.ParcelManager.ParcelObjectOwnersReplyHandler(System.String,OpenMetaverse.StructuredData.OSD,OpenMetaverse.Simulator)">
            <summary>
            
            </summary>
            <param name="capsKey"></param>
            <param name="llsd"></param>
            <param name="simulator"></param>
        </member>
        <member name="M:OpenMetaverse.ParcelManager.SelectParcelObjectsReplyHandler(OpenMetaverse.Packets.Packet,OpenMetaverse.Simulator)">
            <summary>
            
            </summary>
            <param name="packet"></param>
            <param name="simulator"></param>
        </member>
        <member name="E:OpenMetaverse.ParcelManager.OnParcelDwell">
            <summary>Fired when a <seealso cref="T:OpenMetaverse.Packets.ParcelDwellReplyPacket"/> is received,
            in response to a <seealso cref="M:OpenMetaverse.ParcelManager.DwellRequest(OpenMetaverse.Simulator,System.Int32)"/></summary>
        </member>
        <member name="E:OpenMetaverse.ParcelManager.OnParcelInfo">
            <summary>Fired when a <seealso cref="T:OpenMetaverse.Packets.ParcelInfoReplyPacket"/> is received, 
            in response to a <seealso cref="M:OpenMetaverse.ParcelManager.InfoRequest(OpenMetaverse.UUID)"/></summary>
        </member>
        <member name="E:OpenMetaverse.ParcelManager.OnParcelProperties">
            <summary>Fired when a ParcelProperties Packet is received over the <seealso cref="!:OpenMetaverse.Capabilities"/> subsystem,
            in response to a <seealso cref="M:OpenMetaverse.ParcelManager.PropertiesRequest(OpenMetaverse.Simulator,System.Int32,System.Int32)"/></summary>
        </member>
        <member name="E:OpenMetaverse.ParcelManager.OnAccessListReply">
            <summary>Fired when a <seealso cref="T:OpenMetaverse.Packets.ParcelAccessListReplyPacket"/> is received,
            in response to a <seealso cref="M:OpenMetaverse.ParcelManager.AccessListRequest(OpenMetaverse.Simulator,System.Int32,OpenMetaverse.AccessList,System.Int32)"/></summary>
        </member>
        <member name="E:OpenMetaverse.ParcelManager.OnPrimOwnersListReply">
            <summary>Fired when the Agent receives a <seealso cref="T:OpenMetaverse.Packets.ParcelObjectOwnersReplyPacket"/>,
            in response to <seealso cref="M:OpenMetaverse.ParcelManager.ObjectOwnersRequest(OpenMetaverse.Simulator,System.Int32)"/></summary>
        </member>
        <member name="E:OpenMetaverse.ParcelManager.OnSimParcelsDownloaded">
            <summary>Fired when the simulator parcel dictionary is populated in response
            to a <seealso cref="M:OpenMetaverse.ParcelManager.RequestAllSimParcels(OpenMetaverse.Simulator)"/> request</summary>
        </member>
        <member name="E:OpenMetaverse.ParcelManager.OnParcelSelectedObjects">
            <summary>Fired when the Agent receives a <seealso cref="T:OpenMetaverse.Packets.ParcelSelectObjectsPacket"/>,
            in response to a <seealso cref="M:OpenMetaverse.ParcelManager.SelectObjects(System.Int32,OpenMetaverse.ObjectReturnType,OpenMetaverse.UUID)"/> request</summary>
        </member>
        <member name="E:OpenMetaverse.ParcelManager.OnParcelMediaUpdate">
            <summary>Fired when the Agent receives a <seealso cref="T:OpenMetaverse.Packets.ParcelMediaUpdatePacket"/> which
            occurs when the parcel media information is changed for the current parcel the Agent is over</summary>
        </member>
        <member name="T:OpenMetaverse.ParcelManager.ParcelAccessEntry">
            <summary>
            Parcel Accesslist
            </summary>
        </member>
        <member name="F:OpenMetaverse.ParcelManager.ParcelAccessEntry.AgentID">
            <summary>Agents <seealso cref="T:OpenMetaverse.UUID"/></summary>
        </member>
        <member name="F:OpenMetaverse.ParcelManager.ParcelAccessEntry.Time">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.ParcelManager.ParcelAccessEntry.Flags">
            <summary>Flags for specific entry in white/black lists</summary>
        </member>
        <member name="T:OpenMetaverse.ParcelManager.ParcelPrimOwners">
            <summary>
            Owners of primitives on parcel
            </summary>
        </member>
        <member name="F:OpenMetaverse.ParcelManager.ParcelPrimOwners.OwnerID">
            <summary>Prim Owners <seealso cref="T:OpenMetaverse.UUID"/></summary>
        </member>
        <member name="F:OpenMetaverse.ParcelManager.ParcelPrimOwners.IsGroupOwned">
            <summary>True of owner is group</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelManager.ParcelPrimOwners.Count">
            <summary>Total count of prims owned by OwnerID</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelManager.ParcelPrimOwners.OnlineStatus">
            <summary>true of OwnerID is currently online and is not a group</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelManager.ParcelPrimOwners.NewestPrim">
            <summary>The date of the most recent prim left by OwnerID</summary>
        </member>
        <member name="T:OpenMetaverse.ParcelManager.ParcelDwellCallback">
            <summary>
            
            </summary>
            <param name="parcelID">UUID of the requested parcel</param>
            <param name="localID">Simulator-local ID of the requested parcel</param>
            <param name="dwell">Dwell value of the requested parcel</param>
        </member>
        <member name="T:OpenMetaverse.ParcelManager.ParcelInfoCallback">
            <summary>
            
            </summary>
            <param name="parcel"></param>
        </member>
        <member name="T:OpenMetaverse.ParcelManager.ParcelPropertiesCallback">
            <summary>
            
            </summary>
            <param name="simulator">Simulator the parcel is in</param>
            <param name="parcel">Full properties for a single parcel. If result
            is NoData this will be incomplete or incorrect data</param>
            <param name="result">Success of the query</param>
            <param name="selectedPrims">Number of primitives your avatar is currently
            selecting and sitting on in this parcel</param>
            <param name="sequenceID">User-assigned identifier for the query</param>
            <param name="snapSelection">User-assigned boolean for the query</param>
        </member>
        <member name="T:OpenMetaverse.ParcelManager.ParcelAccessListReplyCallback">
            <summary>
            
            </summary>
            <param name="simulator">Simulator the parcel is in</param>
            <param name="sequenceID"></param>
            <param name="localID"></param>
            <param name="flags"></param>
            <param name="accessEntries"></param>
        </member>
        <member name="T:OpenMetaverse.ParcelManager.ParcelObjectOwnersListReplyCallback">
            <summary>
            Responses to a request for prim owners on a parcel
            </summary>
            <param name="simulator">simulator parcel is in</param>
            <param name="primOwners">List containing details or prim ownership</param>
        </member>
        <member name="T:OpenMetaverse.ParcelManager.SimParcelsDownloaded">
            <summary>
            Fired when all parcels are downloaded from simulator
            </summary>
            <param name="simulator">Simulator the parcel is in</param>
            <param name="simParcels">Read-only dictionary containing parcel details for the simulator</param>
            <param name="parcelMap">64,64 array containing sim position to localID mapping</param>
        </member>
        <member name="T:OpenMetaverse.ParcelManager.ForceSelectObjects">
            <summary>
            Fired in response to SelectParcelObjects
            </summary>
            <param name="simulator">simulator the objects are in</param>
            <param name="objectIDs">Local IDs of the selected objects</param>
            <param name="resetList">If true, list is start of a new selection</param>
        </member>
        <member name="T:OpenMetaverse.ParcelManager.ParcelMediaUpdateReplyCallback">
            <summary>
            Fired when a ParcelMediaUpdate packet is received, this occurs when the media on the parcel an avatar
            is over changes
            </summary>
            <param name="simulator">A reference to the simulator object</param>
            <param name="media">A struct containing updated media information</param>
        </member>
        <member name="T:OpenMetaverse.PermissionMask">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenMetaverse.PermissionWho">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenMetaverse.PermissionWho.Base">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.PermissionWho.Owner">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.PermissionWho.Group">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.PermissionWho.Everyone">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.PermissionWho.NextOwner">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.PermissionWho.All">
            <summary></summary>
        </member>
        <member name="T:OpenMetaverse.Permissions">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenMetaverse.PacketFrequency">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenMetaverse.PacketFrequency.Low">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.PacketFrequency.Medium">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.PacketFrequency.High">
            <summary></summary>
        </member>
        <member name="T:OpenMetaverse.FieldType">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenMetaverse.FieldType.U8">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.FieldType.U16">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.FieldType.U32">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.FieldType.U64">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.FieldType.S8">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.FieldType.S16">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.FieldType.S32">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.FieldType.F32">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.FieldType.F64">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.FieldType.UUID">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.FieldType.BOOL">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.FieldType.Vector3">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.FieldType.Vector3d">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.FieldType.Vector4">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.FieldType.Quaternion">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.FieldType.IPADDR">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.FieldType.IPPORT">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.FieldType.Variable">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.FieldType.Fixed">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.FieldType.Single">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.FieldType.Multiple">
            <summary></summary>
        </member>
        <member name="T:OpenMetaverse.MapField">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenMetaverse.MapField.KeywordPosition">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.MapField.Name">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.MapField.Type">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.MapField.Count">
            <summary></summary>
        </member>
        <member name="M:OpenMetaverse.MapField.CompareTo(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:OpenMetaverse.MapBlock">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenMetaverse.MapBlock.KeywordPosition">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.MapBlock.Name">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.MapBlock.Count">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.MapBlock.Fields">
            <summary></summary>
        </member>
        <member name="M:OpenMetaverse.MapBlock.CompareTo(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:OpenMetaverse.MapPacket">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenMetaverse.MapPacket.ID">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.MapPacket.Name">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.MapPacket.Frequency">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.MapPacket.Trusted">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.MapPacket.Encoded">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.MapPacket.Blocks">
            <summary></summary>
        </member>
        <member name="T:OpenMetaverse.ProtocolManager">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenMetaverse.ProtocolManager.TypeSizes">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.ProtocolManager.KeywordPositions">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.ProtocolManager.LowMaps">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.ProtocolManager.MediumMaps">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.ProtocolManager.HighMaps">
            <summary></summary>
        </member>
        <member name="M:OpenMetaverse.ProtocolManager.#ctor(System.String,OpenMetaverse.GridClient)">
            <summary>
            
            </summary>
            <param name="mapFile"></param>
            <param name="client"></param>
        </member>
        <member name="M:OpenMetaverse.ProtocolManager.Command(System.String)">
            <summary>
            
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:OpenMetaverse.ProtocolManager.Command(System.Byte[])">
            <summary>
            
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:OpenMetaverse.ProtocolManager.Command(System.UInt16,OpenMetaverse.PacketFrequency)">
            <summary>
            
            </summary>
            <param name="command"></param>
            <param name="frequency"></param>
            <returns></returns>
        </member>
        <member name="M:OpenMetaverse.ProtocolManager.PrintMap">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenMetaverse.ProtocolManager.PrintOneMap(OpenMetaverse.MapPacket[],System.String)">
            <summary>
            
            </summary>
            <param name="map"></param>
            <param name="frequency"></param>
        </member>
        <member name="M:OpenMetaverse.ProtocolManager.DecodeMapFile(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="mapFile"></param>
            <param name="outputFile"></param>
        </member>
        <member name="M:OpenMetaverse.ProtocolManager.LoadMapFile(System.String)">
            <summary>
            
            </summary>
            <param name="mapFile"></param>
        </member>
        <member name="T:OpenMetaverse.Settings">
            <summary>
            Class for controlling various system settings.
            </summary>
            <remarks>Some values are readonly because they affect things that
            happen when the GridClient object is initialized, so changing them at 
            runtime won't do any good. Non-readonly values may affect things that 
            happen at login or dynamically</remarks>
        </member>
        <member name="F:OpenMetaverse.Settings.AGNI_LOGIN_SERVER">
            <summary>Main grid login server</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.ADITI_LOGIN_SERVER">
            <summary>Beta grid login server</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.ENABLE_INVENTORY_STORE">
            <summary>
            InventoryManager requests inventory information on login,
            GridClient initializes an Inventory store for main inventory.
            </summary>
        </member>
        <member name="F:OpenMetaverse.Settings.ENABLE_LIBRARY_STORE">
            <summary>
            InventoryManager requests library information on login,
            GridClient initializes an Inventory store for the library.
            </summary>
        </member>
        <member name="F:OpenMetaverse.Settings.TRANSFER_TIMEOUT">
            <summary>Number of milliseconds before an asset transfer will time
            out</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.PING_INTERVAL">
            <summary>Number of milliseconds between sending pings to each sim</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.DEFAULT_AGENT_UPDATE_INTERVAL">
            <summary>Number of milliseconds between sending camera updates</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.INTERPOLATION_INTERVAL">
            <summary>Number of milliseconds between updating the current
            positions of moving, non-accelerating and non-colliding objects</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.NETWORK_TICK_INTERVAL">
            <summary>Millisecond interval between ticks, where all ACKs are 
            sent out and the age of unACKed packets is checked</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.PACKET_INBOX_SIZE">
            <summary>The initial size of the packet inbox, where packets are
            stored before processing</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.MAX_PACKET_SIZE">
            <summary>Maximum size of packet that we want to send over the wire</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.MAX_SEQUENCE">
            <summary>The maximum value of a packet sequence number before it
            rolls over back to one</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.PACKET_ARCHIVE_SIZE">
            <summary>The maximum size of the sequence number archive, used to
            check for resent and/or duplicate packets</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.RESOURCE_DIR">
            <summary>The relative directory where external resources are kept</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.LOGIN_SERVER">
            <summary>Login server to connect to</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.BIND_ADDR">
            <summary>IP Address the client will bind to</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.TELEPORT_TIMEOUT">
            <summary>Number of milliseconds before a teleport attempt will time
            out</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.LOGOUT_TIMEOUT">
            <summary>Number of milliseconds before NetworkManager.Logout() will
            time out</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.CAPS_TIMEOUT">
            <summary>Number of milliseconds before a CAPS call will time out 
            and try again</summary>
            <remarks>Setting this too low will cause web requests to repeatedly
            time out and retry</remarks>
        </member>
        <member name="F:OpenMetaverse.Settings.LOGIN_TIMEOUT">
            <summary>Number of milliseconds for xml-rpc to timeout</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.RESEND_TIMEOUT">
            <summary>Milliseconds before a packet is assumed lost and resent</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.SIMULATOR_TIMEOUT">
            <summary>Milliseconds without receiving a packet before the 
            connection to a simulator is assumed lost</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.MAP_REQUEST_TIMEOUT">
            <summary>Milliseconds to wait for a simulator info request through
            the grid interface</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.MAX_APPENDED_ACKS">
            <summary>Maximum number of ACKs to append to a packet</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.STATS_QUEUE_SIZE">
            <summary>Network stats queue length (seconds)</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.SYNC_PACKETCALLBACKS">
            <summary>Enable to process packets synchronously, where all of the
            callbacks for each packet must return before the next packet is
            processed</summary>
            <remarks>This is an experimental feature and is not completely
            reliable yet. Ideally it would reduce context switches and thread
            overhead, but several calls currently block for a long time and
            would need to be rewritten as asynchronous code before this is
            feasible</remarks>
        </member>
        <member name="F:OpenMetaverse.Settings.STORE_LAND_PATCHES">
            <summary>Enable/disable storing terrain heightmaps in the 
            TerrainManager</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.SEND_AGENT_UPDATES">
            <summary>Enable/disable sending periodic camera updates</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.SEND_AGENT_THROTTLE">
            <summary>Enable/disable automatically setting the bandwidth throttle
            after connecting to each simulator</summary>
            <remarks>The default throttle uses the equivalent of the maximum
            bandwidth setting in the official client. If you do not set a
            throttle your connection will by default be throttled well below
            the minimum values and you may experience connection problems</remarks>
        </member>
        <member name="F:OpenMetaverse.Settings.SEND_PINGS">
            <summary>Enable/disable the sending of pings to monitor lag and 
            packet loss</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.MULTIPLE_SIMS">
            <summary>Should we connect to multiple sims? This will allow
            viewing in to neighboring simulators and sim crossings
            (Experimental)</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.ALWAYS_DECODE_OBJECTS">
            <summary>If true, all object update packets will be decoded in to
            native objects. If false, only updates for our own agent will be
            decoded. Registering an event handler will force objects for that
            type to always be decoded. If this is disabled the object tracking
            will have missing or partial prim and avatar information</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.ALWAYS_REQUEST_OBJECTS">
            <summary>If true, when a cached object check is received from the
            server the full object info will automatically be requested</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.ENABLE_CAPS">
            <summary>Whether to establish connections to HTTP capabilities
            servers for simulators</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.ENABLE_SIMSTATS">
            <summary>Whether to decode sim stats</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.LOG_ALL_CAPS_ERRORS">
            <summary>The capabilities servers are currently designed to
            periodically return a 502 error which signals for the client to
            re-establish a connection. Set this to true to log those 502 errors</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.FETCH_MISSING_INVENTORY">
            <summary>If true, any reference received for a folder or item
            the library is not aware of will automatically be fetched</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.DISABLE_AGENT_UPDATE_DUPLICATE_CHECK">
            <summary>If true, and <code>SEND_AGENT_UPDATES</code> is true,
            AgentUpdate packets will continuously be sent out to give the bot
            smoother movement and autopiloting</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.AVATAR_TRACKING">
            <summary>If true, currently visible avatars will be stored
            in dictionaries inside <code>Simulator.ObjectAvatars</code>.
            If false, a new Avatar or Primitive object will be created
            each time an object update packet is received</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.OBJECT_TRACKING">
            <summary>If true, currently visible avatars will be stored
            in dictionaries inside <code>Simulator.ObjectPrimitives</code>.
            If false, a new Avatar or Primitive object will be created
            each time an object update packet is received</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.PARCEL_TRACKING">
            <summary>If true, parcel details will be stored in the 
            <code>Simulator.Parcels</code> dictionary as they are received</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.ALWAYS_REQUEST_PARCEL_ACL">
            <summary>
            If true, an incoming parcel properties reply will automatically send
            a request for the parcel access list
            </summary>
        </member>
        <member name="F:OpenMetaverse.Settings.ALWAYS_REQUEST_PARCEL_DWELL">
            <summary>
            if true, an incoming parcel properties reply will automatically send 
            a request for the traffic count.
            </summary>
        </member>
        <member name="F:OpenMetaverse.Settings.USE_TEXTURE_CACHE">
            <summary>
            If true, images downloaded from the server will be cached 
            in a local directory
            </summary>
        </member>
        <member name="F:OpenMetaverse.Settings.TEXTURE_CACHE_DIR">
            <summary>Path to store cached texture data</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.TEXTURE_CACHE_MAX_SIZE">
            <summary>Maximum size cached files are allowed to take on disk (bytes)</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.DEFAULT_EFFECT_COLOR">
            <summary>Default color used for viewer particle effects</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.MAX_RESEND_COUNT">
            <summary>Maximum number of times to resend a failed packet</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.THROTTLE_OUTGOING_PACKETS">
            <summary>Throttle outgoing packet rate</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.LOG_LEVEL">
            <summary>
            Get or set the minimum log level to output to the console by default
            
            If the library is not compiled with DEBUG defined and this level is set to DEBUG
            You will get no output on the console. This behavior can be overriden by creating
            a logger configuration file for log4net
            </summary>
        </member>
        <member name="F:OpenMetaverse.Settings.LOG_NAMES">
            <summary>Attach avatar names to log messages</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.LOG_RESENDS">
            <summary>Log packet retransmission info</summary>
        </member>
        <member name="M:OpenMetaverse.Settings.#ctor(OpenMetaverse.GridClient)">
            <summary>Constructor</summary>
            <param name="client">Reference to a GridClient object</param>
        </member>
        <member name="M:OpenMetaverse.Settings.EconomyDataHandler(OpenMetaverse.Packets.Packet,OpenMetaverse.Simulator)">
            <summary>
            Gets the cost of uploading an asset to the grid
            </summary>
            <param name="packet"></param>
            <param name="simulator"></param>
        </member>
        <member name="P:OpenMetaverse.Settings.MAX_PENDING_ACKS">
            <summary>Maximum number of queued ACKs to be sent before SendAcks()
            is forced</summary>
        </member>
        <member name="P:OpenMetaverse.Settings.UPLOAD_COST">
            <summary>Cost of uploading an asset</summary>
            <remarks>Read-only since this value is dynamically fetched at login</remarks>
        </member>
        <member name="T:OpenMetaverse.RegionFlags">
            <summary>
            Simulator (region) properties
            </summary>
        </member>
        <member name="F:OpenMetaverse.RegionFlags.None">
            <summary>No flags set</summary>
        </member>
        <member name="F:OpenMetaverse.RegionFlags.AllowDamage">
            <summary>Agents can take damage and be killed</summary>
        </member>
        <member name="F:OpenMetaverse.RegionFlags.AllowLandmark">
            <summary>Landmarks can be created here</summary>
        </member>
        <member name="F:OpenMetaverse.RegionFlags.AllowSetHome">
            <summary>Home position can be set in this sim</summary>
        </member>
        <member name="F:OpenMetaverse.RegionFlags.ResetHomeOnTeleport">
            <summary>Home position is reset when an agent teleports away</summary>
        </member>
        <member name="F:OpenMetaverse.RegionFlags.SunFixed">
            <summary>Sun does not move</summary>
        </member>
        <member name="F:OpenMetaverse.RegionFlags.TaxFree">
            <summary>No object, land, etc. taxes</summary>
        </member>
        <member name="F:OpenMetaverse.RegionFlags.BlockTerraform">
            <summary>Disable heightmap alterations (agents can still plant
            foliage)</summary>
        </member>
        <member name="F:OpenMetaverse.RegionFlags.BlockLandResell">
            <summary>Land cannot be released, sold, or purchased</summary>
        </member>
        <member name="F:OpenMetaverse.RegionFlags.Sandbox">
            <summary>All content is wiped nightly</summary>
        </member>
        <member name="F:OpenMetaverse.RegionFlags.NullLayer">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.RegionFlags.SkipAgentAction">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.RegionFlags.SkipUpdateInterestList">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.RegionFlags.SkipCollisions">
            <summary>No collision detection for non-agent objects</summary>
        </member>
        <member name="F:OpenMetaverse.RegionFlags.SkipScripts">
            <summary>No scripts are ran</summary>
        </member>
        <member name="F:OpenMetaverse.RegionFlags.SkipPhysics">
            <summary>All physics processing is turned off</summary>
        </member>
        <member name="F:OpenMetaverse.RegionFlags.ExternallyVisible">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.RegionFlags.MainlandVisible">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.RegionFlags.PublicAllowed">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.RegionFlags.BlockDwell">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.RegionFlags.NoFly">
            <summary>Flight is disabled (not currently enforced by the sim)</summary>
        </member>
        <member name="F:OpenMetaverse.RegionFlags.AllowDirectTeleport">
            <summary>Allow direct (p2p) teleporting</summary>
        </member>
        <member name="F:OpenMetaverse.RegionFlags.EstateSkipScripts">
            <summary>Estate owner has temporarily disabled scripting</summary>
        </member>
        <member name="F:OpenMetaverse.RegionFlags.RestrictPushObject">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.RegionFlags.DenyAnonymous">
            <summary>Deny agents with no payment info on file</summary>
        </member>
        <member name="F:OpenMetaverse.RegionFlags.DenyIdentified">
            <summary>Deny agents with payment info on file</summary>
        </member>
        <member name="F:OpenMetaverse.RegionFlags.DenyTransacted">
            <summary>Deny agents who have made a monetary transaction</summary>
        </member>
        <member name="F:OpenMetaverse.RegionFlags.AllowParcelChanges">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.RegionFlags.AbuseEmailToEstateOwner">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.RegionFlags.AllowVoice">
            <summary>Region is Voice Enabled</summary>
        </member>
        <member name="T:OpenMetaverse.SimAccess">
            <summary>
            Access level for a simulator
            </summary>
        </member>
        <member name="F:OpenMetaverse.SimAccess.Min">
            <summary>Minimum access level, no additional checks</summary>
        </member>
        <member name="F:OpenMetaverse.SimAccess.Trial">
            <summary>Trial accounts allowed</summary>
        </member>
        <member name="F:OpenMetaverse.SimAccess.PG">
            <summary>PG rating</summary>
        </member>
        <member name="F:OpenMetaverse.SimAccess.Mature">
            <summary>Mature rating</summary>
        </member>
        <member name="F:OpenMetaverse.SimAccess.Down">
            <summary>Simulator is offline</summary>
        </member>
        <member name="F:OpenMetaverse.SimAccess.NonExistent">
            <summary>Simulator does not exist</summary>
        </member>
        <member name="T:OpenMetaverse.Simulator">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenMetaverse.UDPBase">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenMetaverse.UDPBase.#ctor(System.Int32)">
            <summary>
            Initialize the UDP packet handler in server mode
            </summary>
            <param name="port">Port to listening for incoming UDP packets on</param>
        </member>
        <member name="M:OpenMetaverse.UDPBase.#ctor(System.Net.IPEndPoint)">
            <summary>
            Initialize the UDP packet handler in client mode
            </summary>
            <param name="endPoint">Remote UDP server to connect to</param>
        </member>
        <member name="M:OpenMetaverse.UDPBase.Start">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenMetaverse.UDPBase.Stop">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenMetaverse.UDPBase.IsRunning">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.Client">
            <summary>A public reference to the client that this Simulator object
            is attached to</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.ID">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.Caps">
            <summary>The capabilities for this simulator</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.Handle">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimVersion">
            <summary>The current version of software this simulator is running</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.Name">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.ParcelOverlay">
            <summary>A 64x64 grid of parcel coloring values. The values stored 
            in this array are of the <seealso cref="!:ParcelArrayType"/> type</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.ParcelOverlaysReceived">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.TerrainHeightRange00">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.TerrainHeightRange01">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.TerrainHeightRange10">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.TerrainHeightRange11">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.TerrainStartHeight00">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.TerrainStartHeight01">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.TerrainStartHeight10">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.TerrainStartHeight11">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.WaterHeight">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimOwner">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.TerrainBase0">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.TerrainBase1">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.TerrainBase2">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.TerrainBase3">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.TerrainDetail0">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.TerrainDetail1">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.TerrainDetail2">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.TerrainDetail3">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.IsEstateManager">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.Estate">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.Flags">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.Access">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.BillableFactor">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.Stats">
            <summary>Statistics information for this simulator and the
            connection to the simulator, calculated by the simulator itself
            and the library</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.ObjectsAvatars">
            <summary>Provides access to two thread-safe dictionaries containing
            avatars and primitives found in this simulator</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.Sequence">
            <summary>The current sequence number for packets sent to this
            simulator. Must be Interlocked before modifying. Only
            useful for applications manipulating sequence numbers</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.Parcels">
            <summary>
            Provides access to an internal thread-safe dictionary containing parcel
            information found in this simulator
            </summary>
        </member>
        <member name="M:OpenMetaverse.Simulator.IsParcelMapFull">
            <summary>
            Checks simulator parcel map to make sure it has downloaded all data successfully
            </summary>
            <returns>true if map is full (contains no 0's)</returns>
        </member>
        <member name="F:OpenMetaverse.Simulator.DisconnectCandidate">
            <summary>Used internally to track sim disconnections</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.ConnectedEvent">
            <summary>Event that is triggered when the simulator successfully
            establishes a connection</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.connected">
            <summary>Whether this sim is currently connected or not. Hooked up
            to the property Connected</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.avatarPositions">
            <summary>Coarse locations of avatars in this simulator</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.preyID">
            <summary>AvatarPositions key representing TrackAgent target</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.PacketArchive">
            <summary>Sequence numbers of packets we've received
            (for duplicate checking)</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.NeedAck">
            <summary>Packets we sent out that need ACKs from the simulator</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.pauseSerial">
            <summary>Sequence number for pause/resume</summary>
        </member>
        <member name="M:OpenMetaverse.Simulator.#ctor(OpenMetaverse.GridClient,System.Net.IPEndPoint,System.UInt64)">
            <summary>
            
            </summary>
            <param name="client">Reference to the GridClient object</param>
            <param name="address">IPEndPoint of the simulator</param>
            <param name="handle">handle of the simulator</param>
        </member>
        <member name="M:OpenMetaverse.Simulator.Dispose">
            <summary>
            Called when this Simulator object is being destroyed
            </summary>
        </member>
        <member name="M:OpenMetaverse.Simulator.Connect(System.Boolean)">
            <summary>
            Attempt to connect to this simulator
            </summary>
            <param name="moveToSim">Whether to move our agent in to this sim or not</param>
            <returns>True if the connection succeeded or connection status is
            unknown, false if there was a failure</returns>
        </member>
        <member name="M:OpenMetaverse.Simulator.Disconnect(System.Boolean)">
            <summary>
            Disconnect from this simulator
            </summary>
        </member>
        <member name="M:OpenMetaverse.Simulator.Pause">
            <summary>
            Instructs the simulator to stop sending update (and possibly other) packets
            </summary>
        </member>
        <member name="M:OpenMetaverse.Simulator.Resume">
            <summary>
            Instructs the simulator to resume sending update packets (unpause)
            </summary>
        </member>
        <member name="M:OpenMetaverse.Simulator.SendPacket(OpenMetaverse.Packets.Packet,System.Boolean)">
            <summary>
            Sends a packet
            </summary>
            <param name="packet">Packet to be sent</param>
            <param name="setSequence">True to set the sequence number, false to
            leave it as is</param>
        </member>
        <member name="M:OpenMetaverse.Simulator.SendPacket(OpenMetaverse.NetworkManager.OutgoingPacket)">
            <summary>
            Sends a packet
            </summary>
            <param name="outgoingPacket">Packet to be sent</param>
        </member>
        <member name="M:OpenMetaverse.Simulator.SendPacketUnqueued(OpenMetaverse.NetworkManager.OutgoingPacket)">
            <summary>
            Sends a packet directly to the simulator without queuing
            </summary>
            <param name="outgoingPacket">Packet to be sent</param>
        </member>
        <member name="M:OpenMetaverse.Simulator.SendPacketUnqueued(System.Byte[],System.Boolean)">
            <summary>
            Send a raw byte array payload as a packet
            </summary>
            <param name="payload">The packet payload</param>
            <param name="setSequence">Whether the second, third, and fourth bytes
            should be modified to the current stream sequence number</param>
        </member>
        <member name="M:OpenMetaverse.Simulator.SendPing">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenMetaverse.Simulator.ToString">
            <summary>
            Returns Simulator Name as a String
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenMetaverse.Simulator.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenMetaverse.Simulator.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:OpenMetaverse.Simulator.SendAcks">
            <summary>
            Sends out pending acknowledgements
            </summary>
        </member>
        <member name="M:OpenMetaverse.Simulator.ResendUnacked">
            <summary>
            Resend unacknowledged packets
            </summary>
        </member>
        <member name="P:OpenMetaverse.Simulator.ParcelMap">
            <summary>
            Provides access to an internal thread-safe multidimensional array containing a x,y grid mapped
            each 64x64 parcel's LocalID.
            </summary>
        </member>
        <member name="P:OpenMetaverse.Simulator.IPEndPoint">
            <summary>The IP address and port of the server</summary>
        </member>
        <member name="P:OpenMetaverse.Simulator.Connected">
            <summary>Whether there is a working connection to the simulator or 
            not</summary>
        </member>
        <member name="P:OpenMetaverse.Simulator.AvatarPositions">
            <summary>Coarse locations of avatars in this simulator</summary>
        </member>
        <member name="P:OpenMetaverse.Simulator.PreyID">
            <summary>AvatarPositions key representing TrackAgent target</summary>
        </member>
        <member name="T:OpenMetaverse.Simulator.SimStats">
            <summary>
            Simulator Statistics
            </summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.SentPackets">
            <summary>Total number of packets sent by this simulator to this agent</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.RecvPackets">
            <summary>Total number of packets received by this simulator to this agent</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.SentBytes">
            <summary>Total number of bytes sent by this simulator to this agent</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.RecvBytes">
            <summary>Total number of bytes received by this simulator to this agent</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.ConnectTime">
            <summary>Time in seconds agent has been connected to simulator</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.ResentPackets">
            <summary>Total number of packets that have been resent</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.ReceivedResends">
            <summary>Total number of resent packets recieved</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.SentPings">
            <summary>Total number of pings sent to this simulator by this agent</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.ReceivedPongs">
            <summary>Total number of ping replies sent to this agent by this simulator</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.IncomingBPS">
            <summary>
            Incoming bytes per second
            </summary>
            <remarks>It would be nice to have this claculated on the fly, but
            this is far, far easier</remarks>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.OutgoingBPS">
            <summary>
            Outgoing bytes per second
            </summary>
            <remarks>It would be nice to have this claculated on the fly, but
            this is far, far easier</remarks>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.LastPingSent">
            <summary>Time last ping was sent</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.LastPingID">
            <summary>ID of last Ping sent</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.LastLag">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.MissedPings">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.Dilation">
            <summary>Current time dilation of this simulator</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.FPS">
            <summary>Current Frames per second of simulator</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.PhysicsFPS">
            <summary>Current Physics frames per second of simulator</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.AgentUpdates">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.FrameTime">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.NetTime">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.PhysicsTime">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.ImageTime">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.ScriptTime">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.AgentTime">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.OtherTime">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.Objects">
            <summary>Total number of objects Simulator is simulating</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.ScriptedObjects">
            <summary>Total number of Active (Scripted) objects running</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.Agents">
            <summary>Number of agents currently in this simulator</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.ChildAgents">
            <summary>Number of agents in neighbor simulators</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.ActiveScripts">
            <summary>Number of Active scripts running in this simulator</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.LSLIPS">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.INPPS">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.OUTPPS">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.PendingDownloads">
            <summary>Number of downloads pending</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.PendingUploads">
            <summary>Number of uploads pending</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.VirtualSize">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.ResidentSize">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.PendingLocalUploads">
            <summary>Number of local uploads pending</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.UnackedBytes">
            <summary>Unacknowledged bytes in queue</summary>
        </member>
        <member name="M:OpenMetaverse.SoundManager.SoundTrigger(OpenMetaverse.UUID)">
            <summary>
            Plays a sound in the current region at full volume from avatar position
            </summary>
            <param name="soundID">UUID of the sound to be played</param>
        </member>
        <member name="M:OpenMetaverse.SoundManager.SoundTrigger(OpenMetaverse.UUID,OpenMetaverse.Vector3)">
            <summary>
            Plays a sound in the current region at full volume
            </summary>
            <param name="soundID">UUID of the sound to be played.</param>
            <param name="position">position for the sound to be played at. Normally the avatar.</param>
        </member>
        <member name="M:OpenMetaverse.SoundManager.SoundTrigger(OpenMetaverse.UUID,OpenMetaverse.Vector3,System.Single)">
            <summary>
            Plays a sound in the current region
            </summary>
            <param name="soundID">UUID of the sound to be played.</param>
            <param name="position">position for the sound to be played at. Normally the avatar.</param>
            <param name="gain">volume of the sound, from 0.0 to 1.0</param>
        </member>
        <member name="M:OpenMetaverse.SoundManager.SoundTrigger(OpenMetaverse.UUID,OpenMetaverse.Simulator,OpenMetaverse.Vector3,System.Single)">
            <summary>
            Plays a sound in the specified sim
            </summary>
            <param name="soundID">UUID of the sound to be played.</param>
            <param name="sim">UUID of the sound to be played.</param>
            <param name="position">position for the sound to be played at. Normally the avatar.</param>
            <param name="gain">volume of the sound, from 0.0 to 1.0</param>
        </member>
        <member name="M:OpenMetaverse.SoundManager.SoundTrigger(OpenMetaverse.UUID,System.UInt64,OpenMetaverse.Vector3,System.Single)">
            <summary>
            Plays a sound
            </summary>
            <param name="soundID">UUID of the sound to be played.</param>
            <param name="handle">handle id for the sim to be played in.</param>
            <param name="position">position for the sound to be played at. Normally the avatar.</param>
            <param name="gain">volume of the sound, from 0.0 to 1.0</param>
        </member>
        <member name="F:OpenMetaverse.TerrainPatch.X">
            <summary>X position of this patch</summary>
        </member>
        <member name="F:OpenMetaverse.TerrainPatch.Y">
            <summary>Y position of this patch</summary>
        </member>
        <member name="F:OpenMetaverse.TerrainPatch.Data">
            <summary>A 16x16 array of floats holding decompressed layer data</summary>
        </member>
        <member name="M:OpenMetaverse.TerrainCompressor.CreateLandPacket(System.Single[],System.Int32[])">
            <summary>
            Creates a LayerData packet for compressed land data given a full
            simulator heightmap and an array of indices of patches to compress
            </summary>
            <param name="heightmap">A 256 * 256 array of floating point values
            specifying the height at each meter in the simulator</param>
            <param name="patches">Array of indexes in the 16x16 grid of patches
            for this simulator. For example if 1 and 17 are specified, patches
            x=1,y=0 and x=1,y=1 are sent</param>
            <returns></returns>
        </member>
        <member name="M:OpenMetaverse.TerrainCompressor.CreatePatchFromHeightmap(OpenMetaverse.BitPack,System.Single[],System.Int32,System.Int32)">
            <summary>
            Add a patch of terrain to a BitPacker
            </summary>
            <param name="output">BitPacker to write the patch to</param>
            <param name="heightmap">Heightmap of the simulator, must be a 256 *
            256 float array</param>
            <param name="x">X offset of the patch to create, valid values are
            from 0 to 15</param>
            <param name="y">Y offset of the patch to create, valid values are
            from 0 to 15</param>
        </member>
        <member name="M:OpenMetaverse.TerrainManager.#ctor(OpenMetaverse.GridClient)">
            <summary>
            Default constructor
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:OpenMetaverse.TerrainManager.TerrainHeightAtPoint(System.UInt64,System.Int32,System.Int32,System.Single@)">
            <summary>
            Retrieve the terrain height at a given coordinate
            </summary>
            <param name="regionHandle">The region that the point of interest is in</param>
            <param name="x">Sim X coordinate, valid range is from 0 to 255</param>
            <param name="y">Sim Y coordinate, valid range is from 0 to 255</param>
            <param name="height">The terrain height at the given point if the
            lookup was successful, otherwise 0.0f</param>
            <returns>True if the lookup was successful, otherwise false</returns>
        </member>
        <member name="E:OpenMetaverse.TerrainManager.OnLandPatch">
            <summary></summary>
        </member>
        <member name="T:OpenMetaverse.TerrainManager.LandPatchCallback">
            <summary>
            
            </summary>
            <param name="simulator"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="data"></param>
        </member>
        <member name="T:OpenMetaverse.TextureCache">
            <summary>
            Class that handles the local image cache
            </summary>
        </member>
        <member name="M:OpenMetaverse.TextureCache.#ctor(OpenMetaverse.GridClient)">
            <summary>
            Default constructor
            </summary>
            <param name="client">A reference to the GridClient object</param>
        </member>
        <member name="M:OpenMetaverse.TextureCache.GetCachedImageBytes(OpenMetaverse.UUID)">
            <summary>
            Return bytes read from the local image cache, null if it does not exist
            </summary>
            <param name="imageID">UUID of the image we want to get</param>
            <returns>Raw bytes of the image, or null on failure</returns>
        </member>
        <member name="M:OpenMetaverse.TextureCache.GetCachedImage(OpenMetaverse.UUID)">
            <summary>
            Returns ImageDownload object of the
            image from the local image cache, null if it does not exist
            </summary>
            <param name="imageID">UUID of the image we want to get</param>
            <returns>ImageDownload object containing the image, or null on failure</returns>
        </member>
        <member name="M:OpenMetaverse.TextureCache.FileName(OpenMetaverse.UUID)">
            <summary>
            Constructs a file name of the cached image
            </summary>
            <param name="imageID">UUID of the image</param>
            <returns>String with the file name of the cahced image</returns>
        </member>
        <member name="M:OpenMetaverse.TextureCache.SaveImageToCache(OpenMetaverse.UUID,System.Byte[])">
            <summary>
            Saves an image to the local cache
            </summary>
            <param name="imageID">UUID of the image</param>
            <param name="imageData">Raw bytes the image consists of</param>
            <returns>Weather the operation was successfull</returns>
        </member>
        <member name="M:OpenMetaverse.TextureCache.ImageFileName(OpenMetaverse.UUID)">
            <summary>
            Get the file name of the asset stored with gived UUID
            </summary>
            <param name="imageID">UUID of the image</param>
            <returns>Null if we don't have that UUID cached on disk, file name if found in the cache folder</returns>
        </member>
        <member name="M:OpenMetaverse.TextureCache.HasImage(OpenMetaverse.UUID)">
            <summary>
            Checks if the image exists in the local cache
            </summary>
            <param name="imageID">UUID of the image</param>
            <returns>True is the image is stored in the cache, otherwise false</returns>
        </member>
        <member name="M:OpenMetaverse.TextureCache.Clear">
            <summary>
            Wipes out entire cache
            </summary>
        </member>
        <member name="M:OpenMetaverse.TextureCache.Prune">
            <summary>
            Brings cache size to the 90% of the max size
            </summary>
        </member>
        <member name="M:OpenMetaverse.TextureCache.BeginPrune">
            <summary>
            Asynchronously brings cache size to the 90% of the max size
            </summary>
        </member>
        <member name="M:OpenMetaverse.TextureCache.GetFileSize(System.IO.FileInfo[])">
            <summary>
            Adds up file sizes passes in a FileInfo array
            </summary>
        </member>
        <member name="M:OpenMetaverse.TextureCache.Operational">
            <summary>
            Checks whether caching is enabled
            </summary>
        </member>
        <member name="M:OpenMetaverse.TextureCache.cleanerTimer_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Periodically prune the cache
            </summary>
        </member>
        <member name="M:OpenMetaverse.TextureCache.NiceFileSize(System.Int64)">
            <summary>
            Nicely formats file sizes
            </summary>
            <param name="byteCount">Byte size we want to output</param>
            <returns>String with humanly readable file size</returns>
        </member>
        <member name="P:OpenMetaverse.TextureCache.AutoPruneEnabled">
            <summary>
            Allows setting weather to periodicale prune the cache if it grows too big
            Default is enabled, when caching is enabled
            </summary>
        </member>
        <member name="P:OpenMetaverse.TextureCache.AutoPruneInterval">
            <summary>
            How long (in ms) between cache checks (default is 5 min.) 
            </summary>
        </member>
        <member name="T:OpenMetaverse.TextureCache.SortFilesByAccesTimeHelper">
            <summary>
            Helper class for sorting files by their last accessed time
            </summary>
        </member>
        <member name="T:OpenMetaverse.TexturePipeline">
            <summary>
            Texture request download handler, allows a configurable number of download slots
            </summary>
        </member>
        <member name="F:OpenMetaverse.TexturePipeline.maxTextureRequests">
            <summary>Maximum concurrent texture requests</summary>
        </member>
        <member name="F:OpenMetaverse.TexturePipeline.requestQueue">
            <summary>Queue for image requests that have not been sent out yet</summary>
        </member>
        <member name="F:OpenMetaverse.TexturePipeline.currentRequests">
            <summary>Current texture downloads</summary>
        </member>
        <member name="F:OpenMetaverse.TexturePipeline.completedDownloads">
            <summary>Storage for completed texture downloads</summary>
        </member>
        <member name="M:OpenMetaverse.TexturePipeline.#ctor(OpenMetaverse.GridClient,System.Int32)">
            <summary>
            Default constructor
            </summary>
            <param name="client">Reference to <code>SecondLife</code> client</param>
            <param name="maxRequests">Maximum number of concurrent texture requests</param>
        </member>
        <member name="M:OpenMetaverse.TexturePipeline.RequestTexture(OpenMetaverse.UUID,OpenMetaverse.ImageType)">
            <summary>
            Request a texture be downloaded, once downloaded OnImageRenderReady event will be fired
            containing texture key which can be used to retrieve texture with GetTextureToRender method
            </summary>
            <param name="textureID">Texture to request</param>
            <param name="type">Type of the requested texture</param>
        </member>
        <member name="M:OpenMetaverse.TexturePipeline.GetTextureToRender(OpenMetaverse.UUID)">
            <summary>
            retrieve texture information from dictionary
            </summary>
            <param name="textureID">Texture ID</param>
            <returns>ImageDownload object</returns>
        </member>
        <member name="M:OpenMetaverse.TexturePipeline.RemoveFromPipeline(OpenMetaverse.UUID)">
            <summary>
            Remove no longer necessary texture from dictionary
            </summary>
            <param name="textureID"></param>
        </member>
        <member name="M:OpenMetaverse.TexturePipeline.DownloadThread">
            <summary>
            Master Download Thread, Queues up downloads in the threadpool
            </summary>
        </member>
        <member name="E:OpenMetaverse.TexturePipeline.OnDownloadFinished">
            <summary>Fired when a texture download completes</summary>
        </member>
        <member name="E:OpenMetaverse.TexturePipeline.OnDownloadProgress">
            <summary>Fired when some texture data is received</summary>
        </member>
        <member name="T:ThreadUtil">
            <summary>
            
            </summary>
        </member>
        <member name="F:ThreadUtil.wrapperInstance">
            <summary>
            An instance of DelegateWrapper which calls InvokeWrappedDelegate,
            which in turn calls the DynamicInvoke method of the wrapped
            delegate
            </summary>
        </member>
        <member name="F:ThreadUtil.callback">
            <summary>
            Callback used to call EndInvoke on the asynchronously
            invoked DelegateWrapper
            </summary>
        </member>
        <member name="M:ThreadUtil.FireAndForget(System.Delegate,System.Object[])">
            <summary>
            Executes the specified delegate with the specified arguments
            asynchronously on a thread pool thread
            </summary>
            <param name="d"></param>
            <param name="args"></param>
        </member>
        <member name="M:ThreadUtil.InvokeWrappedDelegate(System.Delegate,System.Object[])">
            <summary>
            Invokes the wrapped delegate synchronously
            </summary>
            <param name="d"></param>
            <param name="args"></param>
        </member>
        <member name="M:ThreadUtil.EndWrapperInvoke(System.IAsyncResult)">
            <summary>
            Calls EndInvoke on the wrapper and Close on the resulting WaitHandle
            to prevent resource leaks
            </summary>
            <param name="ar"></param>
        </member>
        <member name="T:ThreadUtil.DelegateWrapper">
            <summary>
            Delegate to wrap another delegate and its arguments
            </summary>
            <param name="d"></param>
            <param name="args"></param>
        </member>
        <member name="T:OpenMetaverse.Packets.MalformedDataException">
            <summary>
            Thrown when a packet could not be successfully deserialized
            </summary>
        </member>
        <member name="M:OpenMetaverse.Packets.MalformedDataException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenMetaverse.Packets.MalformedDataException.#ctor(System.String)">
            <summary>
            Constructor that takes an additional error message
            </summary>
            <param name="Message">An error message to attach to this exception</param>
        </member>
        <member name="T:OpenMetaverse.Packets.Header">
            <summary>
            The header of a message template packet. Either 5, 6, or 8 bytes in
            length at the beginning of the packet, and encapsulates any 
            appended ACKs at the end of the packet as well
            </summary>
        </member>
        <member name="F:OpenMetaverse.Packets.Header.Data">
            <summary>Raw header data, does not include appended ACKs</summary>
        </member>
        <member name="M:OpenMetaverse.Packets.Header.ToBytes(System.Byte[],System.Int32@)">
            <summary>Convert this header to a byte array, not including any
            appended ACKs</summary>
        </member>
        <member name="F:OpenMetaverse.Packets.Header.AckList">
            <summary>Array containing all the appended ACKs of this packet</summary>
        </member>
        <member name="M:OpenMetaverse.Packets.Header.AcksToBytes(System.Byte[],System.Int32@)">
            <summary>
            Convert the AckList to a byte array, used for packet serializing
            </summary>
            <param name="bytes">Reference to the target byte array</param>
            <param name="i">Beginning position to start writing to in the byte
            array, will be updated with the ending position of the ACK list</param>
        </member>
        <member name="M:OpenMetaverse.Packets.Header.BuildHeader(System.Byte[],System.Int32@,System.Int32@)">
            <summary>
            
            </summary>
            <param name="bytes"></param>
            <param name="pos"></param>
            <param name="packetEnd"></param>
            <returns></returns>
        </member>
        <member name="M:OpenMetaverse.Packets.Header.CreateAckList(System.Byte[],System.Int32@)">
            <summary>
            
            </summary>
            <param name="bytes"></param>
            <param name="packetEnd"></param>
        </member>
        <member name="P:OpenMetaverse.Packets.Header.Flags">
            <summary>Raw value of the flags byte</summary>
        </member>
        <member name="P:OpenMetaverse.Packets.Header.Reliable">
            <summary>Reliable flag, whether this packet requires an ACK</summary>
        </member>
        <member name="P:OpenMetaverse.Packets.Header.Resent">
            <summary>Resent flag, whether this same packet has already been 
            sent</summary>
        </member>
        <member name="P:OpenMetaverse.Packets.Header.Zerocoded">
            <summary>Zerocoded flag, whether this packet is compressed with 
            zerocoding</summary>
        </member>
        <member name="P:OpenMetaverse.Packets.Header.AppendedAcks">
            <summary>Appended ACKs flag, whether this packet has ACKs appended
            to the end</summary>
        </member>
        <member name="P:OpenMetaverse.Packets.Header.Sequence">
            <summary>Packet sequence number</summary>
        </member>
        <member name="P:OpenMetaverse.Packets.Header.ID">
            <summary>Numeric ID number of this packet</summary>
        </member>
        <member name="P:OpenMetaverse.Packets.Header.Frequency">
            <summary>Frequency classification of this packet, Low Medium or 
            High</summary>
        </member>
        <member name="T:OpenMetaverse.Packets.LowHeader">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenMetaverse.Packets.LowHeader.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenMetaverse.Packets.LowHeader.#ctor(System.Byte[],System.Int32@,System.Int32@)">
            <summary>
            
            </summary>
            <param name="bytes"></param>
            <param name="pos"></param>
            <param name="packetEnd"></param>
        </member>
        <member name="M:OpenMetaverse.Packets.LowHeader.ToBytes(System.Byte[],System.Int32@)">
            <summary>
            
            </summary>
            <param name="bytes"></param>
            <param name="i"></param>
        </member>
        <member name="P:OpenMetaverse.Packets.LowHeader.ID">
            <summary></summary>
        </member>
        <member name="P:OpenMetaverse.Packets.LowHeader.Frequency">
            <summary></summary>
        </member>
        <member name="T:OpenMetaverse.Packets.MediumHeader">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenMetaverse.Packets.MediumHeader.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenMetaverse.Packets.MediumHeader.#ctor(System.Byte[],System.Int32@,System.Int32@)">
            <summary>
            
            </summary>
            <param name="bytes"></param>
            <param name="pos"></param>
            <param name="packetEnd"></param>
        </member>
        <member name="M:OpenMetaverse.Packets.MediumHeader.ToBytes(System.Byte[],System.Int32@)">
            <summary>
            
            </summary>
            <param name="bytes"></param>
            <param name="i"></param>
        </member>
        <member name="P:OpenMetaverse.Packets.MediumHeader.ID">
            <summary></summary>
        </member>
        <member name="P:OpenMetaverse.Packets.MediumHeader.Frequency">
            <summary></summary>
        </member>
        <member name="T:OpenMetaverse.Packets.HighHeader">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenMetaverse.Packets.HighHeader.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenMetaverse.Packets.HighHeader.#ctor(System.Byte[],System.Int32@,System.Int32@)">
            <summary>
            
            </summary>
            <param name="bytes"></param>
            <param name="pos"></param>
            <param name="packetEnd"></param>
        </member>
        <member name="M:OpenMetaverse.Packets.HighHeader.ToBytes(System.Byte[],System.Int32@)">
            <summary>
            
            </summary>
            <param name="bytes"></param>
            <param name="i"></param>
        </member>
        <member name="P:OpenMetaverse.Packets.HighHeader.ID">
            <summary></summary>
        </member>
        <member name="P:OpenMetaverse.Packets.HighHeader.Frequency">
            <summary></summary>
        </member>
        <member name="T:OpenMetaverse.Packets.PacketBlock">
            <summary>
            A block of data in a packet. Packets are composed of one or more blocks,
            each block containing one or more fields
            </summary>
        </member>
        <member name="M:OpenMetaverse.Packets.PacketBlock.FromBytes(System.Byte[],System.Int32@)">
            <summary>
            Create a block from a byte array
            </summary>
            <param name="bytes">Byte array containing the serialized block</param>
            <param name="i">Starting position of the block in the byte array.
            This will point to the data after the end of the block when the
            call returns</param>
        </member>
        <member name="M:OpenMetaverse.Packets.PacketBlock.ToBytes(System.Byte[],System.Int32@)">
            <summary>
            Serialize this block into a byte array
            </summary>
            <param name="bytes">Byte array to serialize this block into</param>
            <param name="i">Starting position in the byte array to serialize to.
            This will point to the position directly after the end of the
            serialized block when the call returns</param>
        </member>
        <member name="P:OpenMetaverse.Packets.PacketBlock.Length">
            <summary>Current length of the data in this packet</summary>
        </member>
        <member name="F:OpenMetaverse.Packets.PacketType.Default">
            <summary>A generic value, not an actual packet type</summary>
        </member>
        <member name="T:OpenMetaverse.Packets.TestMessagePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.TestMessagePacket.TestBlock1Block">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.TestMessagePacket.NeighborBlockBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.UseCircuitCodePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.UseCircuitCodePacket.CircuitCodeBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.TelehubInfoPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.TelehubInfoPacket.TelehubBlockBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.TelehubInfoPacket.SpawnPointBlockBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.EconomyDataRequestPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.EconomyDataPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.EconomyDataPacket.InfoBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarPickerRequestPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarPickerRequestPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarPickerRequestPacket.DataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarPickerReplyPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarPickerReplyPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarPickerReplyPacket.DataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.PlacesQueryPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.PlacesQueryPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.PlacesQueryPacket.TransactionDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.PlacesQueryPacket.QueryDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.PlacesReplyPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.PlacesReplyPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.PlacesReplyPacket.TransactionDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.PlacesReplyPacket.QueryDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.DirFindQueryPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.DirFindQueryPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.DirFindQueryPacket.QueryDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.DirPlacesQueryPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.DirPlacesQueryPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.DirPlacesQueryPacket.QueryDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.DirPlacesReplyPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.DirPlacesReplyPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.DirPlacesReplyPacket.QueryDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.DirPlacesReplyPacket.QueryRepliesBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.DirPeopleReplyPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.DirPeopleReplyPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.DirPeopleReplyPacket.QueryDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.DirPeopleReplyPacket.QueryRepliesBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.DirEventsReplyPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.DirEventsReplyPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.DirEventsReplyPacket.QueryDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.DirEventsReplyPacket.QueryRepliesBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.DirGroupsReplyPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.DirGroupsReplyPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.DirGroupsReplyPacket.QueryDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.DirGroupsReplyPacket.QueryRepliesBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.DirClassifiedQueryPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.DirClassifiedQueryPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.DirClassifiedQueryPacket.QueryDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.DirClassifiedReplyPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.DirClassifiedReplyPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.DirClassifiedReplyPacket.QueryDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.DirClassifiedReplyPacket.QueryRepliesBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarClassifiedReplyPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarClassifiedReplyPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarClassifiedReplyPacket.DataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ClassifiedInfoRequestPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ClassifiedInfoRequestPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ClassifiedInfoRequestPacket.DataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ClassifiedInfoReplyPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ClassifiedInfoReplyPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ClassifiedInfoReplyPacket.DataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ClassifiedInfoUpdatePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ClassifiedInfoUpdatePacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ClassifiedInfoUpdatePacket.DataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ClassifiedDeletePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ClassifiedDeletePacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ClassifiedDeletePacket.DataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ClassifiedGodDeletePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ClassifiedGodDeletePacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ClassifiedGodDeletePacket.DataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.DirLandQueryPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.DirLandQueryPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.DirLandQueryPacket.QueryDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.DirLandReplyPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.DirLandReplyPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.DirLandReplyPacket.QueryDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.DirLandReplyPacket.QueryRepliesBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.DirPopularQueryPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.DirPopularQueryPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.DirPopularQueryPacket.QueryDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.DirPopularReplyPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.DirPopularReplyPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.DirPopularReplyPacket.QueryDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.DirPopularReplyPacket.QueryRepliesBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelInfoRequestPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelInfoRequestPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelInfoRequestPacket.DataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelInfoReplyPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelInfoReplyPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelInfoReplyPacket.DataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelObjectOwnersRequestPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelObjectOwnersRequestPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelObjectOwnersRequestPacket.ParcelDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelObjectOwnersReplyPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelObjectOwnersReplyPacket.DataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupNoticesListRequestPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupNoticesListRequestPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupNoticesListRequestPacket.DataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupNoticesListReplyPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupNoticesListReplyPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupNoticesListReplyPacket.DataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupNoticeRequestPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupNoticeRequestPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupNoticeRequestPacket.DataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.TeleportRequestPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.TeleportRequestPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.TeleportRequestPacket.InfoBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.TeleportLocationRequestPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.TeleportLocationRequestPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.TeleportLocationRequestPacket.InfoBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.TeleportLocalPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.TeleportLocalPacket.InfoBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.TeleportLandmarkRequestPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.TeleportLandmarkRequestPacket.InfoBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.TeleportProgressPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.TeleportProgressPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.TeleportProgressPacket.InfoBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.TeleportFinishPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.TeleportFinishPacket.InfoBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.StartLurePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.StartLurePacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.StartLurePacket.InfoBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.StartLurePacket.TargetDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.TeleportLureRequestPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.TeleportLureRequestPacket.InfoBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.TeleportCancelPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.TeleportCancelPacket.InfoBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.TeleportStartPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.TeleportStartPacket.InfoBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.TeleportFailedPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.TeleportFailedPacket.InfoBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.UndoPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.UndoPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.UndoPacket.ObjectDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RedoPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RedoPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RedoPacket.ObjectDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.UndoLandPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.UndoLandPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AgentPausePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AgentPausePacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AgentResumePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AgentResumePacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ChatFromViewerPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ChatFromViewerPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ChatFromViewerPacket.ChatDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AgentThrottlePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AgentThrottlePacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AgentThrottlePacket.ThrottleBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AgentFOVPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AgentFOVPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AgentFOVPacket.FOVBlockBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AgentHeightWidthPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AgentHeightWidthPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AgentHeightWidthPacket.HeightWidthBlockBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AgentSetAppearancePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AgentSetAppearancePacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AgentSetAppearancePacket.WearableDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AgentSetAppearancePacket.ObjectDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AgentSetAppearancePacket.VisualParamBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AgentQuitCopyPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AgentQuitCopyPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AgentQuitCopyPacket.FuseBlockBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ImageNotInDatabasePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ImageNotInDatabasePacket.ImageIDBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RebakeAvatarTexturesPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RebakeAvatarTexturesPacket.TextureDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.SetAlwaysRunPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.SetAlwaysRunPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectDeletePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectDeletePacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectDeletePacket.ObjectDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectDuplicatePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectDuplicatePacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectDuplicatePacket.SharedDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectDuplicatePacket.ObjectDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectDuplicateOnRayPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectDuplicateOnRayPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectDuplicateOnRayPacket.ObjectDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectScalePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectScalePacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectScalePacket.ObjectDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectRotationPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectRotationPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectRotationPacket.ObjectDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectFlagUpdatePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectFlagUpdatePacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectClickActionPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectClickActionPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectClickActionPacket.ObjectDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectImagePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectImagePacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectImagePacket.ObjectDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectMaterialPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectMaterialPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectMaterialPacket.ObjectDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectShapePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectShapePacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectShapePacket.ObjectDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectExtraParamsPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectExtraParamsPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectExtraParamsPacket.ObjectDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectOwnerPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectOwnerPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectOwnerPacket.HeaderDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectOwnerPacket.ObjectDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectGroupPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectGroupPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectGroupPacket.ObjectDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectBuyPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectBuyPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectBuyPacket.ObjectDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.BuyObjectInventoryPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.BuyObjectInventoryPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.BuyObjectInventoryPacket.DataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.DerezContainerPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.DerezContainerPacket.DataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectPermissionsPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectPermissionsPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectPermissionsPacket.HeaderDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectPermissionsPacket.ObjectDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectSaleInfoPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectSaleInfoPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectSaleInfoPacket.ObjectDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectNamePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectNamePacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectNamePacket.ObjectDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectDescriptionPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectDescriptionPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectDescriptionPacket.ObjectDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectCategoryPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectCategoryPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectCategoryPacket.ObjectDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectSelectPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectSelectPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectSelectPacket.ObjectDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectDeselectPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectDeselectPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectDeselectPacket.ObjectDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectAttachPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectAttachPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectAttachPacket.ObjectDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectDetachPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectDetachPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectDetachPacket.ObjectDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectDropPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectDropPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectDropPacket.ObjectDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectLinkPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectLinkPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectLinkPacket.ObjectDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectDelinkPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectDelinkPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectDelinkPacket.ObjectDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectGrabPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectGrabPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectGrabPacket.ObjectDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectGrabPacket.SurfaceInfoBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectGrabUpdatePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectGrabUpdatePacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectGrabUpdatePacket.ObjectDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectGrabUpdatePacket.SurfaceInfoBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectDeGrabPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectDeGrabPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectDeGrabPacket.ObjectDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectDeGrabPacket.SurfaceInfoBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectSpinStartPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectSpinStartPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectSpinStartPacket.ObjectDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectSpinUpdatePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectSpinUpdatePacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectSpinUpdatePacket.ObjectDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectSpinStopPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectSpinStopPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectSpinStopPacket.ObjectDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectExportSelectedPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectExportSelectedPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectExportSelectedPacket.ObjectDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ModifyLandPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ModifyLandPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ModifyLandPacket.ModifyBlockBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ModifyLandPacket.ParcelDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.VelocityInterpolateOnPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.VelocityInterpolateOnPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.VelocityInterpolateOffPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.VelocityInterpolateOffPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.StateSavePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.StateSavePacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.StateSavePacket.DataBlockBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ReportAutosaveCrashPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ReportAutosaveCrashPacket.AutosaveDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.SimWideDeletesPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.SimWideDeletesPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.SimWideDeletesPacket.DataBlockBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.TrackAgentPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.TrackAgentPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.TrackAgentPacket.TargetDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ViewerStatsPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ViewerStatsPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ViewerStatsPacket.DownloadTotalsBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ViewerStatsPacket.NetStatsBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ViewerStatsPacket.FailStatsBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ViewerStatsPacket.MiscStatsBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ScriptAnswerYesPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ScriptAnswerYesPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ScriptAnswerYesPacket.DataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.UserReportPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.UserReportPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.UserReportPacket.ReportDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AlertMessagePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AlertMessagePacket.AlertDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AgentAlertMessagePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AgentAlertMessagePacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AgentAlertMessagePacket.AlertDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.MeanCollisionAlertPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.MeanCollisionAlertPacket.MeanCollisionBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ViewerFrozenMessagePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ViewerFrozenMessagePacket.FrozenDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.HealthMessagePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.HealthMessagePacket.HealthDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ChatFromSimulatorPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ChatFromSimulatorPacket.ChatDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.SimStatsPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.SimStatsPacket.RegionBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.SimStatsPacket.StatBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.SimStatsPacket.PidStatBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RequestRegionInfoPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RequestRegionInfoPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RegionInfoPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RegionInfoPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RegionInfoPacket.RegionInfoBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GodUpdateRegionInfoPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GodUpdateRegionInfoPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GodUpdateRegionInfoPacket.RegionInfoBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.NearestLandingRegionUpdatedPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.NearestLandingRegionUpdatedPacket.RegionDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RegionHandshakePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RegionHandshakePacket.RegionInfoBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RegionHandshakePacket.RegionInfo2Block">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RegionHandshakeReplyPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RegionHandshakeReplyPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RegionHandshakeReplyPacket.RegionInfoBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.SimulatorViewerTimeMessagePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.SimulatorViewerTimeMessagePacket.TimeInfoBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.EnableSimulatorPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.EnableSimulatorPacket.SimulatorInfoBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.DisableSimulatorPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.TransferRequestPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.TransferRequestPacket.TransferInfoBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.TransferInfoPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.TransferInfoPacket.TransferInfoBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.TransferAbortPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.TransferAbortPacket.TransferInfoBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RequestXferPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RequestXferPacket.XferIDBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AbortXferPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AbortXferPacket.XferIDBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarAppearancePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarAppearancePacket.SenderBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarAppearancePacket.ObjectDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarAppearancePacket.VisualParamBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.SetFollowCamPropertiesPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.SetFollowCamPropertiesPacket.ObjectDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.SetFollowCamPropertiesPacket.CameraPropertyBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ClearFollowCamPropertiesPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ClearFollowCamPropertiesPacket.ObjectDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RequestPayPricePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RequestPayPricePacket.ObjectDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.PayPriceReplyPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.PayPriceReplyPacket.ObjectDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.PayPriceReplyPacket.ButtonDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.KickUserPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.KickUserPacket.TargetBlockBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.KickUserPacket.UserInfoBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.KickUserAckPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.KickUserAckPacket.UserInfoBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GodKickUserPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GodKickUserPacket.UserInfoBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.EjectUserPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.EjectUserPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.EjectUserPacket.DataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.FreezeUserPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.FreezeUserPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.FreezeUserPacket.DataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarPropertiesRequestPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarPropertiesRequestPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarPropertiesReplyPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarPropertiesReplyPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarPropertiesReplyPacket.PropertiesDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarInterestsReplyPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarInterestsReplyPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarInterestsReplyPacket.PropertiesDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarGroupsReplyPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarGroupsReplyPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarGroupsReplyPacket.GroupDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarGroupsReplyPacket.NewGroupDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarPropertiesUpdatePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarPropertiesUpdatePacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarPropertiesUpdatePacket.PropertiesDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarInterestsUpdatePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarInterestsUpdatePacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarInterestsUpdatePacket.PropertiesDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarNotesReplyPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarNotesReplyPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarNotesReplyPacket.DataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarNotesUpdatePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarNotesUpdatePacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarNotesUpdatePacket.DataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarPicksReplyPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarPicksReplyPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarPicksReplyPacket.DataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.EventInfoRequestPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.EventInfoRequestPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.EventInfoRequestPacket.EventDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.EventInfoReplyPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.EventInfoReplyPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.EventInfoReplyPacket.EventDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.EventNotificationAddRequestPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.EventNotificationAddRequestPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.EventNotificationAddRequestPacket.EventDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.EventNotificationRemoveRequestPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.EventNotificationRemoveRequestPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.EventNotificationRemoveRequestPacket.EventDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.EventGodDeletePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.EventGodDeletePacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.EventGodDeletePacket.EventDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.EventGodDeletePacket.QueryDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.PickInfoReplyPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.PickInfoReplyPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.PickInfoReplyPacket.DataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.PickInfoUpdatePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.PickInfoUpdatePacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.PickInfoUpdatePacket.DataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.PickDeletePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.PickDeletePacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.PickDeletePacket.DataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.PickGodDeletePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.PickGodDeletePacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.PickGodDeletePacket.DataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ScriptQuestionPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ScriptQuestionPacket.DataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ScriptControlChangePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ScriptControlChangePacket.DataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ScriptDialogPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ScriptDialogPacket.DataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ScriptDialogPacket.ButtonsBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ScriptDialogReplyPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ScriptDialogReplyPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ScriptDialogReplyPacket.DataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ForceScriptControlReleasePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ForceScriptControlReleasePacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RevokePermissionsPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RevokePermissionsPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RevokePermissionsPacket.DataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.LoadURLPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.LoadURLPacket.DataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ScriptTeleportRequestPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ScriptTeleportRequestPacket.DataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelOverlayPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelOverlayPacket.ParcelDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelPropertiesRequestByIDPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelPropertiesRequestByIDPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelPropertiesRequestByIDPacket.ParcelDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelPropertiesUpdatePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelPropertiesUpdatePacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelPropertiesUpdatePacket.ParcelDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelReturnObjectsPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelReturnObjectsPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelReturnObjectsPacket.ParcelDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelReturnObjectsPacket.TaskIDsBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelReturnObjectsPacket.OwnerIDsBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelSetOtherCleanTimePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelSetOtherCleanTimePacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelSetOtherCleanTimePacket.ParcelDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelDisableObjectsPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelDisableObjectsPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelDisableObjectsPacket.ParcelDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelDisableObjectsPacket.TaskIDsBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelDisableObjectsPacket.OwnerIDsBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelSelectObjectsPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelSelectObjectsPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelSelectObjectsPacket.ParcelDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelSelectObjectsPacket.ReturnIDsBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.EstateCovenantRequestPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.EstateCovenantRequestPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.EstateCovenantReplyPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.EstateCovenantReplyPacket.DataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ForceObjectSelectPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ForceObjectSelectPacket.HeaderBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ForceObjectSelectPacket.DataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelBuyPassPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelBuyPassPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelBuyPassPacket.ParcelDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelDeedToGroupPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelDeedToGroupPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelDeedToGroupPacket.DataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelReclaimPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelReclaimPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelReclaimPacket.DataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelClaimPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelClaimPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelClaimPacket.DataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelClaimPacket.ParcelDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelJoinPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelJoinPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelJoinPacket.ParcelDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelDividePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelDividePacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelDividePacket.ParcelDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelReleasePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelReleasePacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelReleasePacket.DataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelBuyPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelBuyPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelBuyPacket.DataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelBuyPacket.ParcelDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelGodForceOwnerPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelGodForceOwnerPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelGodForceOwnerPacket.DataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelAccessListRequestPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelAccessListRequestPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelAccessListRequestPacket.DataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelAccessListReplyPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelAccessListReplyPacket.DataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelAccessListReplyPacket.ListBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelAccessListUpdatePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelAccessListUpdatePacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelAccessListUpdatePacket.DataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelAccessListUpdatePacket.ListBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelDwellRequestPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelDwellRequestPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelDwellRequestPacket.DataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelDwellReplyPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelDwellReplyPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelDwellReplyPacket.DataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelGodMarkAsContentPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelGodMarkAsContentPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelGodMarkAsContentPacket.ParcelDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ViewerStartAuctionPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ViewerStartAuctionPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ViewerStartAuctionPacket.ParcelDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.UUIDNameRequestPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.UUIDNameRequestPacket.UUIDNameBlockBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.UUIDNameReplyPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.UUIDNameReplyPacket.UUIDNameBlockBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.UUIDGroupNameRequestPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.UUIDGroupNameRequestPacket.UUIDNameBlockBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.UUIDGroupNameReplyPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.UUIDGroupNameReplyPacket.UUIDNameBlockBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ChildAgentDyingPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ChildAgentDyingPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ChildAgentUnknownPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ChildAgentUnknownPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GetScriptRunningPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GetScriptRunningPacket.ScriptBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ScriptRunningReplyPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ScriptRunningReplyPacket.ScriptBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.SetScriptRunningPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.SetScriptRunningPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.SetScriptRunningPacket.ScriptBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ScriptResetPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ScriptResetPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ScriptResetPacket.ScriptBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ScriptSensorRequestPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ScriptSensorRequestPacket.RequesterBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ScriptSensorReplyPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ScriptSensorReplyPacket.RequesterBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ScriptSensorReplyPacket.SensedDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.CompleteAgentMovementPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.CompleteAgentMovementPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AgentMovementCompletePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AgentMovementCompletePacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AgentMovementCompletePacket.DataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AgentMovementCompletePacket.SimDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.LogoutRequestPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.LogoutRequestPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.LogoutReplyPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.LogoutReplyPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.LogoutReplyPacket.InventoryDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ImprovedInstantMessagePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ImprovedInstantMessagePacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ImprovedInstantMessagePacket.MessageBlockBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RetrieveInstantMessagesPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RetrieveInstantMessagesPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.FindAgentPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.FindAgentPacket.AgentBlockBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.FindAgentPacket.LocationBlockBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RequestGodlikePowersPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RequestGodlikePowersPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RequestGodlikePowersPacket.RequestBlockBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GrantGodlikePowersPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GrantGodlikePowersPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GrantGodlikePowersPacket.GrantDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GodlikeMessagePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GodlikeMessagePacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GodlikeMessagePacket.MethodDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GodlikeMessagePacket.ParamListBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.EstateOwnerMessagePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.EstateOwnerMessagePacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.EstateOwnerMessagePacket.MethodDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.EstateOwnerMessagePacket.ParamListBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GenericMessagePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GenericMessagePacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GenericMessagePacket.MethodDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GenericMessagePacket.ParamListBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.MuteListRequestPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.MuteListRequestPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.MuteListRequestPacket.MuteDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.UpdateMuteListEntryPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.UpdateMuteListEntryPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.UpdateMuteListEntryPacket.MuteDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RemoveMuteListEntryPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RemoveMuteListEntryPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RemoveMuteListEntryPacket.MuteDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.CopyInventoryFromNotecardPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.CopyInventoryFromNotecardPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.CopyInventoryFromNotecardPacket.NotecardDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.CopyInventoryFromNotecardPacket.InventoryDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.UpdateInventoryItemPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.UpdateInventoryItemPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.UpdateInventoryItemPacket.InventoryDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.UpdateCreateInventoryItemPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.UpdateCreateInventoryItemPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.UpdateCreateInventoryItemPacket.InventoryDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.MoveInventoryItemPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.MoveInventoryItemPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.MoveInventoryItemPacket.InventoryDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.CopyInventoryItemPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.CopyInventoryItemPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.CopyInventoryItemPacket.InventoryDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RemoveInventoryItemPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RemoveInventoryItemPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RemoveInventoryItemPacket.InventoryDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ChangeInventoryItemFlagsPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ChangeInventoryItemFlagsPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ChangeInventoryItemFlagsPacket.InventoryDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.SaveAssetIntoInventoryPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.SaveAssetIntoInventoryPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.SaveAssetIntoInventoryPacket.InventoryDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.CreateInventoryFolderPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.CreateInventoryFolderPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.CreateInventoryFolderPacket.FolderDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.UpdateInventoryFolderPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.UpdateInventoryFolderPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.UpdateInventoryFolderPacket.FolderDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.MoveInventoryFolderPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.MoveInventoryFolderPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.MoveInventoryFolderPacket.InventoryDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RemoveInventoryFolderPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RemoveInventoryFolderPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RemoveInventoryFolderPacket.FolderDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.FetchInventoryDescendentsPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.FetchInventoryDescendentsPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.FetchInventoryDescendentsPacket.InventoryDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.InventoryDescendentsPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.InventoryDescendentsPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.InventoryDescendentsPacket.FolderDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.InventoryDescendentsPacket.ItemDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.FetchInventoryPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.FetchInventoryPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.FetchInventoryPacket.InventoryDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.FetchInventoryReplyPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.FetchInventoryReplyPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.FetchInventoryReplyPacket.InventoryDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.BulkUpdateInventoryPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.BulkUpdateInventoryPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.BulkUpdateInventoryPacket.FolderDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.BulkUpdateInventoryPacket.ItemDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RequestInventoryAssetPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RequestInventoryAssetPacket.QueryDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.InventoryAssetResponsePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.InventoryAssetResponsePacket.QueryDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RemoveInventoryObjectsPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RemoveInventoryObjectsPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RemoveInventoryObjectsPacket.FolderDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RemoveInventoryObjectsPacket.ItemDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.PurgeInventoryDescendentsPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.PurgeInventoryDescendentsPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.PurgeInventoryDescendentsPacket.InventoryDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.UpdateTaskInventoryPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.UpdateTaskInventoryPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.UpdateTaskInventoryPacket.UpdateDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.UpdateTaskInventoryPacket.InventoryDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RemoveTaskInventoryPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RemoveTaskInventoryPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RemoveTaskInventoryPacket.InventoryDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.MoveTaskInventoryPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.MoveTaskInventoryPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.MoveTaskInventoryPacket.InventoryDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RequestTaskInventoryPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RequestTaskInventoryPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RequestTaskInventoryPacket.InventoryDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ReplyTaskInventoryPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ReplyTaskInventoryPacket.InventoryDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.DeRezObjectPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.DeRezObjectPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.DeRezObjectPacket.AgentBlockBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.DeRezObjectPacket.ObjectDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.DeRezAckPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.DeRezAckPacket.TransactionDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RezObjectPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RezObjectPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RezObjectPacket.RezDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RezObjectPacket.InventoryDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RezObjectFromNotecardPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RezObjectFromNotecardPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RezObjectFromNotecardPacket.RezDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RezObjectFromNotecardPacket.NotecardDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RezObjectFromNotecardPacket.InventoryDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AcceptFriendshipPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AcceptFriendshipPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AcceptFriendshipPacket.TransactionBlockBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AcceptFriendshipPacket.FolderDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.DeclineFriendshipPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.DeclineFriendshipPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.DeclineFriendshipPacket.TransactionBlockBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.FormFriendshipPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.FormFriendshipPacket.AgentBlockBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.TerminateFriendshipPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.TerminateFriendshipPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.TerminateFriendshipPacket.ExBlockBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.OfferCallingCardPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.OfferCallingCardPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.OfferCallingCardPacket.AgentBlockBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AcceptCallingCardPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AcceptCallingCardPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AcceptCallingCardPacket.TransactionBlockBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AcceptCallingCardPacket.FolderDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.DeclineCallingCardPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.DeclineCallingCardPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.DeclineCallingCardPacket.TransactionBlockBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RezScriptPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RezScriptPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RezScriptPacket.UpdateBlockBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RezScriptPacket.InventoryBlockBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.CreateInventoryItemPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.CreateInventoryItemPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.CreateInventoryItemPacket.InventoryBlockBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.CreateLandmarkForEventPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.CreateLandmarkForEventPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.CreateLandmarkForEventPacket.EventDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.CreateLandmarkForEventPacket.InventoryBlockBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RegionHandleRequestPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RegionHandleRequestPacket.RequestBlockBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RegionIDAndHandleReplyPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RegionIDAndHandleReplyPacket.ReplyBlockBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.MoneyTransferRequestPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.MoneyTransferRequestPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.MoneyTransferRequestPacket.MoneyDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.MoneyBalanceRequestPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.MoneyBalanceRequestPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.MoneyBalanceRequestPacket.MoneyDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.MoneyBalanceReplyPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.MoneyBalanceReplyPacket.MoneyDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RoutedMoneyBalanceReplyPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RoutedMoneyBalanceReplyPacket.TargetBlockBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RoutedMoneyBalanceReplyPacket.MoneyDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ActivateGesturesPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ActivateGesturesPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ActivateGesturesPacket.DataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.DeactivateGesturesPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.DeactivateGesturesPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.DeactivateGesturesPacket.DataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.MuteListUpdatePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.MuteListUpdatePacket.MuteDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.UseCachedMuteListPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.UseCachedMuteListPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GrantUserRightsPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GrantUserRightsPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GrantUserRightsPacket.RightsBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ChangeUserRightsPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ChangeUserRightsPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ChangeUserRightsPacket.RightsBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.OnlineNotificationPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.OnlineNotificationPacket.AgentBlockBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.OfflineNotificationPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.OfflineNotificationPacket.AgentBlockBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.SetStartLocationRequestPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.SetStartLocationRequestPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.SetStartLocationRequestPacket.StartLocationDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AssetUploadRequestPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AssetUploadRequestPacket.AssetBlockBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AssetUploadCompletePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AssetUploadCompletePacket.AssetBlockBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.CreateGroupRequestPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.CreateGroupRequestPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.CreateGroupRequestPacket.GroupDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.CreateGroupReplyPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.CreateGroupReplyPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.CreateGroupReplyPacket.ReplyDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.UpdateGroupInfoPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.UpdateGroupInfoPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.UpdateGroupInfoPacket.GroupDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupRoleChangesPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupRoleChangesPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupRoleChangesPacket.RoleChangeBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.JoinGroupRequestPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.JoinGroupRequestPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.JoinGroupRequestPacket.GroupDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.JoinGroupReplyPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.JoinGroupReplyPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.JoinGroupReplyPacket.GroupDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.EjectGroupMemberRequestPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.EjectGroupMemberRequestPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.EjectGroupMemberRequestPacket.GroupDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.EjectGroupMemberRequestPacket.EjectDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.EjectGroupMemberReplyPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.EjectGroupMemberReplyPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.EjectGroupMemberReplyPacket.GroupDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.EjectGroupMemberReplyPacket.EjectDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.LeaveGroupRequestPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.LeaveGroupRequestPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.LeaveGroupRequestPacket.GroupDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.LeaveGroupReplyPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.LeaveGroupReplyPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.LeaveGroupReplyPacket.GroupDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.InviteGroupRequestPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.InviteGroupRequestPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.InviteGroupRequestPacket.GroupDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.InviteGroupRequestPacket.InviteDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupProfileRequestPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupProfileRequestPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupProfileRequestPacket.GroupDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupProfileReplyPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupProfileReplyPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupProfileReplyPacket.GroupDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupAccountSummaryRequestPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupAccountSummaryRequestPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupAccountSummaryRequestPacket.MoneyDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupAccountSummaryReplyPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupAccountSummaryReplyPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupAccountSummaryReplyPacket.MoneyDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupAccountDetailsRequestPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupAccountDetailsRequestPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupAccountDetailsRequestPacket.MoneyDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupAccountDetailsReplyPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupAccountDetailsReplyPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupAccountDetailsReplyPacket.MoneyDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupAccountDetailsReplyPacket.HistoryDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupAccountTransactionsRequestPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupAccountTransactionsRequestPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupAccountTransactionsRequestPacket.MoneyDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupAccountTransactionsReplyPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupAccountTransactionsReplyPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupAccountTransactionsReplyPacket.MoneyDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupAccountTransactionsReplyPacket.HistoryDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupActiveProposalsRequestPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupActiveProposalsRequestPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupActiveProposalsRequestPacket.GroupDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupActiveProposalsRequestPacket.TransactionDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupActiveProposalItemReplyPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupActiveProposalItemReplyPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupActiveProposalItemReplyPacket.TransactionDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupActiveProposalItemReplyPacket.ProposalDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupVoteHistoryRequestPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupVoteHistoryRequestPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupVoteHistoryRequestPacket.GroupDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupVoteHistoryRequestPacket.TransactionDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupVoteHistoryItemReplyPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupVoteHistoryItemReplyPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupVoteHistoryItemReplyPacket.TransactionDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupVoteHistoryItemReplyPacket.HistoryItemDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupVoteHistoryItemReplyPacket.VoteItemBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.StartGroupProposalPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.StartGroupProposalPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.StartGroupProposalPacket.ProposalDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupProposalBallotPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupProposalBallotPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupProposalBallotPacket.ProposalDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupMembersRequestPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupMembersRequestPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupMembersRequestPacket.GroupDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupMembersReplyPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupMembersReplyPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupMembersReplyPacket.GroupDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupMembersReplyPacket.MemberDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ActivateGroupPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ActivateGroupPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.SetGroupContributionPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.SetGroupContributionPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.SetGroupContributionPacket.DataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.SetGroupAcceptNoticesPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.SetGroupAcceptNoticesPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.SetGroupAcceptNoticesPacket.DataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.SetGroupAcceptNoticesPacket.NewDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupRoleDataRequestPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupRoleDataRequestPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupRoleDataRequestPacket.GroupDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupRoleDataReplyPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupRoleDataReplyPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupRoleDataReplyPacket.GroupDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupRoleDataReplyPacket.RoleDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupRoleMembersRequestPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupRoleMembersRequestPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupRoleMembersRequestPacket.GroupDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupRoleMembersReplyPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupRoleMembersReplyPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupRoleMembersReplyPacket.MemberDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupTitlesRequestPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupTitlesRequestPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupTitlesReplyPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupTitlesReplyPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupTitlesReplyPacket.GroupDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupTitleUpdatePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupTitleUpdatePacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupRoleUpdatePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupRoleUpdatePacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupRoleUpdatePacket.RoleDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.LiveHelpGroupRequestPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.LiveHelpGroupRequestPacket.RequestDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.LiveHelpGroupReplyPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.LiveHelpGroupReplyPacket.ReplyDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AgentWearablesRequestPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AgentWearablesRequestPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AgentWearablesUpdatePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AgentWearablesUpdatePacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AgentWearablesUpdatePacket.WearableDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AgentIsNowWearingPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AgentIsNowWearingPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AgentIsNowWearingPacket.WearableDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AgentCachedTexturePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AgentCachedTexturePacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AgentCachedTexturePacket.WearableDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AgentCachedTextureResponsePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AgentCachedTextureResponsePacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AgentCachedTextureResponsePacket.WearableDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AgentDataUpdateRequestPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AgentDataUpdateRequestPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AgentDataUpdatePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AgentDataUpdatePacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupDataUpdatePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.GroupDataUpdatePacket.AgentGroupDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AgentGroupDataUpdatePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AgentGroupDataUpdatePacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AgentGroupDataUpdatePacket.GroupDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AgentDropGroupPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AgentDropGroupPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.CreateTrustedCircuitPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.CreateTrustedCircuitPacket.DataBlockBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.DenyTrustedCircuitPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.DenyTrustedCircuitPacket.DataBlockBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RequestTrustedCircuitPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RezSingleAttachmentFromInvPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RezSingleAttachmentFromInvPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RezSingleAttachmentFromInvPacket.ObjectDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RezMultipleAttachmentsFromInvPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RezMultipleAttachmentsFromInvPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RezMultipleAttachmentsFromInvPacket.HeaderDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RezMultipleAttachmentsFromInvPacket.ObjectDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.DetachAttachmentIntoInvPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.DetachAttachmentIntoInvPacket.ObjectDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.CreateNewOutfitAttachmentsPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.CreateNewOutfitAttachmentsPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.CreateNewOutfitAttachmentsPacket.HeaderDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.CreateNewOutfitAttachmentsPacket.ObjectDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.UserInfoRequestPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.UserInfoRequestPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.UserInfoReplyPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.UserInfoReplyPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.UserInfoReplyPacket.UserDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.UpdateUserInfoPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.UpdateUserInfoPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.UpdateUserInfoPacket.UserDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.InitiateDownloadPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.InitiateDownloadPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.InitiateDownloadPacket.FileDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.SystemMessagePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.SystemMessagePacket.MethodDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.SystemMessagePacket.ParamListBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.MapLayerRequestPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.MapLayerRequestPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.MapLayerReplyPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.MapLayerReplyPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.MapLayerReplyPacket.LayerDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.MapBlockRequestPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.MapBlockRequestPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.MapBlockRequestPacket.PositionDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.MapNameRequestPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.MapNameRequestPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.MapNameRequestPacket.NameDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.MapBlockReplyPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.MapBlockReplyPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.MapBlockReplyPacket.DataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.MapItemRequestPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.MapItemRequestPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.MapItemRequestPacket.RequestDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.MapItemReplyPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.MapItemReplyPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.MapItemReplyPacket.RequestDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.MapItemReplyPacket.DataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.SendPostcardPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.SendPostcardPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelMediaCommandMessagePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelMediaCommandMessagePacket.CommandBlockBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelMediaUpdatePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelMediaUpdatePacket.DataBlockBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelMediaUpdatePacket.DataBlockExtendedBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.LandStatRequestPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.LandStatRequestPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.LandStatRequestPacket.RequestDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.LandStatReplyPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.LandStatReplyPacket.RequestDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.LandStatReplyPacket.ReportDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ErrorPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ErrorPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ErrorPacket.DataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectIncludeInSearchPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectIncludeInSearchPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectIncludeInSearchPacket.ObjectDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.PacketAckPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.PacketAckPacket.PacketsBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.OpenCircuitPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.OpenCircuitPacket.CircuitInfoBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.CloseCircuitPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectAddPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectAddPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectAddPacket.ObjectDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.MultipleObjectUpdatePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.MultipleObjectUpdatePacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.MultipleObjectUpdatePacket.ObjectDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RequestMultipleObjectsPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RequestMultipleObjectsPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RequestMultipleObjectsPacket.ObjectDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectPositionPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectPositionPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectPositionPacket.ObjectDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RequestObjectPropertiesFamilyPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RequestObjectPropertiesFamilyPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RequestObjectPropertiesFamilyPacket.ObjectDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.CoarseLocationUpdatePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.CoarseLocationUpdatePacket.LocationBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.CoarseLocationUpdatePacket.IndexBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.CoarseLocationUpdatePacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.CrossedRegionPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.CrossedRegionPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.CrossedRegionPacket.RegionDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.CrossedRegionPacket.InfoBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ConfirmEnableSimulatorPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ConfirmEnableSimulatorPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectPropertiesPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectPropertiesPacket.ObjectDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectPropertiesFamilyPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectPropertiesFamilyPacket.ObjectDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelPropertiesRequestPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelPropertiesRequestPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelPropertiesRequestPacket.ParcelDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AttachedSoundPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AttachedSoundPacket.DataBlockBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AttachedSoundGainChangePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AttachedSoundGainChangePacket.DataBlockBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.PreloadSoundPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.PreloadSoundPacket.DataBlockBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ViewerEffectPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ViewerEffectPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ViewerEffectPacket.EffectBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.StartPingCheckPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.StartPingCheckPacket.PingIDBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.CompletePingCheckPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.CompletePingCheckPacket.PingIDBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AgentUpdatePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AgentUpdatePacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AgentAnimationPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AgentAnimationPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AgentAnimationPacket.AnimationListBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AgentAnimationPacket.PhysicalAvatarEventListBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AgentRequestSitPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AgentRequestSitPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AgentRequestSitPacket.TargetObjectBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AgentSitPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AgentSitPacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RequestImagePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RequestImagePacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.RequestImagePacket.RequestImageBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ImageDataPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ImageDataPacket.ImageIDBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ImageDataPacket.ImageDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ImagePacketPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ImagePacketPacket.ImageIDBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ImagePacketPacket.ImageDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.LayerDataPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.LayerDataPacket.LayerIDBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.LayerDataPacket.LayerDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectUpdatePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectUpdatePacket.RegionDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectUpdatePacket.ObjectDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectUpdateCompressedPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectUpdateCompressedPacket.RegionDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectUpdateCompressedPacket.ObjectDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectUpdateCachedPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectUpdateCachedPacket.RegionDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectUpdateCachedPacket.ObjectDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ImprovedTerseObjectUpdatePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ImprovedTerseObjectUpdatePacket.RegionDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ImprovedTerseObjectUpdatePacket.ObjectDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.KillObjectPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.KillObjectPacket.ObjectDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.TransferPacketPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.TransferPacketPacket.TransferDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.SendXferPacketPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.SendXferPacketPacket.XferIDBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.SendXferPacketPacket.DataPacketBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ConfirmXferPacketPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ConfirmXferPacketPacket.XferIDBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarAnimationPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarAnimationPacket.SenderBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarAnimationPacket.AnimationListBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarAnimationPacket.AnimationSourceListBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarAnimationPacket.PhysicalAvatarEventListBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarSitResponsePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarSitResponsePacket.SitObjectBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarSitResponsePacket.SitTransformBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.CameraConstraintPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.CameraConstraintPacket.CameraCollidePlaneBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelPropertiesPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelPropertiesPacket.ParcelDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelPropertiesPacket.AgeVerificationBlockBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ChildAgentUpdatePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ChildAgentUpdatePacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ChildAgentUpdatePacket.GroupDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ChildAgentUpdatePacket.AnimationDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ChildAgentUpdatePacket.GranterBlockBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ChildAgentUpdatePacket.NVPairDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ChildAgentUpdatePacket.VisualParamBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ChildAgentAlivePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ChildAgentAlivePacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ChildAgentPositionUpdatePacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.ChildAgentPositionUpdatePacket.AgentDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.SoundTriggerPacket">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.Packets.SoundTriggerPacket.SoundDataBlock">
            <exclude/>
        </member>
        <member name="T:OpenMetaverse.VisualParam">
            <summary>
            A single visual characteristic of an avatar mesh, such as eyebrow height
            </summary>
        </member>
        <member name="F:OpenMetaverse.VisualParam.ParamID">
            <summary>Index of this visual param</summary>
        </member>
        <member name="F:OpenMetaverse.VisualParam.Name">
            <summary>Internal name</summary>
        </member>
        <member name="F:OpenMetaverse.VisualParam.Group">
            <summary>Group ID this parameter belongs to</summary>
        </member>
        <member name="F:OpenMetaverse.VisualParam.Wearable">
            <summary>Name of the wearable this parameter belongs to</summary>
        </member>
        <member name="F:OpenMetaverse.VisualParam.Label">
            <summary>Displayable label of this characteristic</summary>
        </member>
        <member name="F:OpenMetaverse.VisualParam.LabelMin">
            <summary>Displayable label for the minimum value of this characteristic</summary>
        </member>
        <member name="F:OpenMetaverse.VisualParam.LabelMax">
            <summary>Displayable label for the maximum value of this characteristic</summary>
        </member>
        <member name="F:OpenMetaverse.VisualParam.DefaultValue">
            <summary>Default value</summary>
        </member>
        <member name="F:OpenMetaverse.VisualParam.MinValue">
            <summary>Minimum value</summary>
        </member>
        <member name="F:OpenMetaverse.VisualParam.MaxValue">
            <summary>Maximum value</summary>
        </member>
        <member name="M:OpenMetaverse.VisualParam.#ctor(System.Int32,System.String,System.Int32,System.String,System.String,System.String,System.String,System.Single,System.Single,System.Single)">
            <summary>
            Set all the values through the constructor
            </summary>
            <param name="paramID">Index of this visual param</param>
            <param name="name">Internal name</param>
            <param name="group"></param>
            <param name="wearable"></param>
            <param name="label">Displayable label of this characteristic</param>
            <param name="labelMin">Displayable label for the minimum value of this characteristic</param>
            <param name="labelMax">Displayable label for the maximum value of this characteristic</param>
            <param name="def">Default value</param>
            <param name="min">Minimum value</param>
            <param name="max">Maximum value</param>
        </member>
        <member name="T:OpenMetaverse.VisualParams">
            <summary>
            Holds the Params array of all the avatar appearance parameters
            </summary>
        </member>
        <member name="T:OpenMetaverse.Imaging.Baker">
            <summary>
            A set of textures that are layered on texture of each other and "baked"
            in to a single texture, for avatar appearances
            </summary>
        </member>
        <member name="F:OpenMetaverse.Imaging.Baker._client">
            <summary>Reference to the GridClient object</summary>
        </member>
        <member name="F:OpenMetaverse.Imaging.Baker._bakedTexture">
            <summary>Finald baked texture</summary>
        </member>
        <member name="F:OpenMetaverse.Imaging.Baker._paramValues">
            <summary>Appearance parameters the drive the baking process</summary>
        </member>
        <member name="F:OpenMetaverse.Imaging.Baker._textures">
            <summary>Wearable textures</summary>
        </member>
        <member name="F:OpenMetaverse.Imaging.Baker._textureCount">
            <summary>Total number of textures in the bake</summary>
        </member>
        <member name="F:OpenMetaverse.Imaging.Baker._bakeWidth">
            <summary>Width of the final baked image and scratchpad</summary>
        </member>
        <member name="F:OpenMetaverse.Imaging.Baker._bakeHeight">
            <summary>Height of the final baked image and scratchpad</summary>
        </member>
        <member name="F:OpenMetaverse.Imaging.Baker._bakeType">
            <summary>Bake type</summary>
        </member>
        <member name="M:OpenMetaverse.Imaging.Baker.#ctor(OpenMetaverse.GridClient,OpenMetaverse.AppearanceManager.BakeType,System.Int32,System.Collections.Generic.Dictionary{System.Int32,System.Single})">
            <summary>
            Default constructor
            </summary>
            <param name="client">Reference to the GridClient object</param>
            <param name="bakeType"></param>
            <param name="textureCount">Total number of layers this layer set is
            composed of</param>
            <param name="paramValues">Appearance parameters the drive the 
            baking process</param>
        </member>
        <member name="M:OpenMetaverse.Imaging.Baker.AddTexture(OpenMetaverse.AppearanceManager.TextureIndex,OpenMetaverse.AssetTexture,System.Boolean)">
            <summary>
            Adds an image to this baking texture and potentially processes it, or
            stores it for processing later
            </summary>
            <param name="index">The baking texture index of the image to be added</param>
            <param name="texture">JPEG2000 compressed image to be
            added to the baking texture</param>
            <param name="needsDecode">True if <code>Decode()</code> needs to be
            called for the texture, otherwise false</param>
            <returns>True if this texture is completely baked and JPEG2000 data 
            is available, otherwise false</returns>
        </member>
        <member name="M:OpenMetaverse.Imaging.Baker.InitBakedLayerColor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Fills a baked layer as a solid *appearing* color. The colors are 
            subtly dithered on a 16x16 grid to prevent the JPEG2000 stage from 
            compressing it too far since it seems to cause upload failures if 
            the image is a pure solid color
            </summary>
            <param name="r">Red value</param>
            <param name="g">Green value</param>
            <param name="b">Blue value</param>
        </member>
        <member name="F:OpenMetaverse.Imaging.ManagedImage.Width">
            <summary>
            Image width
            </summary>
        </member>
        <member name="F:OpenMetaverse.Imaging.ManagedImage.Height">
            <summary>
            Image height
            </summary>
        </member>
        <member name="F:OpenMetaverse.Imaging.ManagedImage.Channels">
            <summary>
            Image channel flags
            </summary>
        </member>
        <member name="F:OpenMetaverse.Imaging.ManagedImage.Red">
            <summary>
            Red channel data
            </summary>
        </member>
        <member name="F:OpenMetaverse.Imaging.ManagedImage.Green">
            <summary>
            Green channel data
            </summary>
        </member>
        <member name="F:OpenMetaverse.Imaging.ManagedImage.Blue">
            <summary>
            Blue channel data
            </summary>
        </member>
        <member name="F:OpenMetaverse.Imaging.ManagedImage.Alpha">
            <summary>
            Alpha channel data
            </summary>
        </member>
        <member name="F:OpenMetaverse.Imaging.ManagedImage.Bump">
            <summary>
            Bump channel data
            </summary>
        </member>
        <member name="M:OpenMetaverse.Imaging.ManagedImage.#ctor(System.Int32,System.Int32,OpenMetaverse.Imaging.ManagedImage.ImageChannels)">
            <summary>
            Create a new blank image
            </summary>
            <param name="width">width</param>
            <param name="height">height</param>
            <param name="channels">channel flags</param>
        </member>
        <member name="M:OpenMetaverse.Imaging.ManagedImage.#ctor(System.Drawing.Bitmap)">
            <summary>
            
            </summary>
            <param name="bitmap"></param>
        </member>
        <member name="M:OpenMetaverse.Imaging.ManagedImage.ConvertChannels(OpenMetaverse.Imaging.ManagedImage.ImageChannels)">
            <summary>
            Convert the channels in the image. Channels are created or destroyed as required.
            </summary>
            <param name="channels">new channel flags</param>
        </member>
        <member name="M:OpenMetaverse.Imaging.ManagedImage.ResizeNearestNeighbor(System.Int32,System.Int32)">
            <summary>
            Resize or stretch the image using nearest neighbor (ugly) resampling
            </summary>
            <param name="width">new width</param>
            <param name="height">new height</param>
        </member>
        <member name="M:OpenMetaverse.Imaging.ManagedImage.ExportRaw">
            <summary>
            Create a byte array containing 32-bit RGBA data with a bottom-left
            origin, suitable for feeding directly into OpenGL
            </summary>
            <returns>A byte array containing raw texture data</returns>
        </member>
        <member name="T:OpenMetaverse.Imaging.OpenJPEG">
            <summary>
            A Wrapper around openjpeg to encode and decode images to and from byte arrays
            </summary>
        </member>
        <member name="F:OpenMetaverse.Imaging.OpenJPEG.TGA_HEADER_SIZE">
            <summary>TGA Header size</summary>
        </member>
        <member name="F:OpenMetaverse.Imaging.OpenJPEG.OpenJPEGLock">
            <summary>OpenJPEG is not threadsafe, so this object is used to lock
            during calls into unmanaged code</summary>
        </member>
        <member name="M:OpenMetaverse.Imaging.OpenJPEG.Encode(OpenMetaverse.Imaging.ManagedImage,System.Boolean)">
            <summary>
            Encode a <seealso cref="T:OpenMetaverse.Imaging.ManagedImage"/> object into a byte array
            </summary>
            <param name="image">The <seealso cref="T:OpenMetaverse.Imaging.ManagedImage"/> object to encode</param>
            <param name="lossless">true to enable lossless conversion, only useful for small images ie: sculptmaps</param>
            <returns>A byte array containing the encoded Image object</returns>
        </member>
        <member name="M:OpenMetaverse.Imaging.OpenJPEG.Encode(OpenMetaverse.Imaging.ManagedImage)">
            <summary>
            Encode a <seealso cref="T:OpenMetaverse.Imaging.ManagedImage"/> object into a byte array
            </summary>
            <param name="image">The <seealso cref="T:OpenMetaverse.Imaging.ManagedImage"/> object to encode</param>
            <returns>a byte array of the encoded image</returns>
        </member>
        <member name="M:OpenMetaverse.Imaging.OpenJPEG.DecodeToImage(System.Byte[],OpenMetaverse.Imaging.ManagedImage@,System.Drawing.Image@)">
            <summary>
            Decode JPEG2000 data to an <seealso cref="T:System.Drawing.Image"/> and
            <seealso cref="T:OpenMetaverse.Imaging.ManagedImage"/>
            </summary>
            <param name="encoded">JPEG2000 encoded data</param>
            <param name="managedImage">ManagedImage object to decode to</param>
            <param name="image">Image object to decode to</param>
            <returns>True if the decode succeeds, otherwise false</returns>
        </member>
        <member name="M:OpenMetaverse.Imaging.OpenJPEG.DecodeToImage(System.Byte[],OpenMetaverse.Imaging.ManagedImage@)">
            <summary>
            
            </summary>
            <param name="encoded"></param>
            <param name="managedImage"></param>
            <returns></returns>
        </member>
        <member name="M:OpenMetaverse.Imaging.OpenJPEG.DecodeLayerBoundaries(System.Byte[],OpenMetaverse.Imaging.OpenJPEG.J2KLayerInfo[]@,System.Int32@)">
            <summary>
            
            </summary>
            <param name="encoded"></param>
            <param name="layerInfo"></param>
            <param name="components"></param>
            <returns></returns>
        </member>
        <member name="M:OpenMetaverse.Imaging.OpenJPEG.EncodeFromImage(System.Drawing.Bitmap,System.Boolean)">
            <summary>
            Encode a <seealso cref="T:System.Drawing.Bitmap"/> object into a byte array
            </summary>
            <param name="bitmap">The source <seealso cref="T:System.Drawing.Bitmap"/> object to encode</param>
            <param name="lossless">true to enable lossless decoding</param>
            <returns>A byte array containing the source Bitmap object</returns>
        </member>
        <member name="T:OpenMetaverse.Imaging.OpenJPEG.J2KLayerInfo">
            <summary>
            Defines the beginning and ending file positions of a layer in an
            LRCP-progression JPEG2000 file
            </summary>
        </member>
        <member name="T:OpenMetaverse.Imaging.OpenJPEG.MarshalledImage">
            <summary>
            This structure is used to marshal both encoded and decoded images.
            MUST MATCH THE STRUCT IN dotnet.h!
            </summary>
        </member>
        <member name="T:OpenMetaverse.Imaging.OpenJPEG.MarshalledPacket">
            <summary>
            Information about a single packet in a JPEG2000 stream
            </summary>
        </member>
        <member name="F:OpenMetaverse.Imaging.OpenJPEG.MarshalledPacket.start_pos">
            <summary>Packet start position</summary>
        </member>
        <member name="F:OpenMetaverse.Imaging.OpenJPEG.MarshalledPacket.end_ph_pos">
            <summary>Packet header end position</summary>
        </member>
        <member name="F:OpenMetaverse.Imaging.OpenJPEG.MarshalledPacket.end_pos">
            <summary>Packet end position</summary>
        </member>
        <member name="T:OpenMetaverse.Imaging.LoadTGAClass">
            <summary>
            Capability to load TGAs to Bitmap 
            </summary>
        </member>
        <member name="T:OpenMetaverse.Rendering.IRendering">
            <summary>
            Abstract base for rendering plugins
            </summary>
        </member>
        <member name="M:OpenMetaverse.Rendering.IRendering.GenerateSimpleMesh(OpenMetaverse.Primitive,OpenMetaverse.Rendering.DetailLevel)">
            <summary>
            Generates a basic mesh structure from a primitive
            </summary>
            <param name="prim">Primitive to generate the mesh from</param>
            <param name="lod">Level of detail to generate the mesh at</param>
            <returns>The generated mesh</returns>
        </member>
        <member name="M:OpenMetaverse.Rendering.IRendering.GenerateFacetedMesh(OpenMetaverse.Primitive,OpenMetaverse.Rendering.DetailLevel)">
            <summary>
            Generates a a series of faces, each face containing a mesh and
            metadata
            </summary>
            <param name="prim">Primitive to generate the mesh from</param>
            <param name="lod">Level of detail to generate the mesh at</param>
            <returns>The generated mesh</returns>
        </member>
        <member name="M:OpenMetaverse.Rendering.IRendering.TransformTexCoords(System.Collections.Generic.List{OpenMetaverse.Rendering.Vertex},OpenMetaverse.Vector3,OpenMetaverse.Primitive.TextureEntryFace)">
            <summary>
            Apply texture coordinate modifications from a
            <seealso cref="!:TextureEntryFace"/> to a list of vertices
            </summary>
            <param name="vertices">Vertex list to modify texture coordinates for</param>
            <param name="center">Center-point of the face</param>
            <param name="teFace">Face texture parameters</param>
        </member>
        <member name="T:OpenMetaverse.PCode">
            <summary>
            Identifier code for primitive types
            </summary>
        </member>
        <member name="F:OpenMetaverse.PCode.None">
            <summary>None</summary>
        </member>
        <member name="F:OpenMetaverse.PCode.Prim">
            <summary>A Primitive</summary>
        </member>
        <member name="F:OpenMetaverse.PCode.Avatar">
            <summary>A Avatar</summary>
        </member>
        <member name="F:OpenMetaverse.PCode.Grass">
            <summary>Linden grass</summary>
        </member>
        <member name="F:OpenMetaverse.PCode.NewTree">
            <summary>Linden tree</summary>
        </member>
        <member name="F:OpenMetaverse.PCode.ParticleSystem">
            <summary>A primitive that acts as the source for a particle stream</summary>
        </member>
        <member name="F:OpenMetaverse.PCode.Tree">
            <summary>A Linden tree</summary>
        </member>
        <member name="T:OpenMetaverse.PrimFlags">
            <summary>
            Primary parameters for primitives such as Physics Enabled or Phantom
            </summary>
        </member>
        <member name="F:OpenMetaverse.PrimFlags.None">
            <summary>Deprecated</summary>
        </member>
        <member name="F:OpenMetaverse.PrimFlags.Physics">
            <summary>Whether physics are enabled for this object</summary>
        </member>
        <member name="F:OpenMetaverse.PrimFlags.CreateSelected">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.PrimFlags.ObjectModify">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.PrimFlags.ObjectCopy">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.PrimFlags.ObjectAnyOwner">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.PrimFlags.ObjectYouOwner">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.PrimFlags.Scripted">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.PrimFlags.Touch">
            <summary>Whether this object contains an active touch script</summary>
        </member>
        <member name="F:OpenMetaverse.PrimFlags.ObjectMove">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.PrimFlags.Money">
            <summary>Whether this object can receive payments</summary>
        </member>
        <member name="F:OpenMetaverse.PrimFlags.Phantom">
            <summary>Whether this object is phantom (no collisions)</summary>
        </member>
        <member name="F:OpenMetaverse.PrimFlags.InventoryEmpty">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.PrimFlags.JointHinge">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.PrimFlags.JointP2P">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.PrimFlags.JointLP2P">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.PrimFlags.JointWheel">
            <summary>Deprecated</summary>
        </member>
        <member name="F:OpenMetaverse.PrimFlags.AllowInventoryDrop">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.PrimFlags.ObjectTransfer">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.PrimFlags.ObjectGroupOwned">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.PrimFlags.ObjectYouOfficer">
            <summary>Deprecated</summary>
        </member>
        <member name="F:OpenMetaverse.PrimFlags.CameraDecoupled">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.PrimFlags.AnimSource">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.PrimFlags.CameraSource">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.PrimFlags.CastShadows">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.PrimFlags.DieAtEdge">
            <summary>Server flag, will not be sent to clients. Specifies that
            the object is destroyed when it touches a simulator edge</summary>
        </member>
        <member name="F:OpenMetaverse.PrimFlags.ReturnAtEdge">
            <summary>Server flag, will not be sent to clients. Specifies that
            the object will be returned to the owner's inventory when it
            touches a simulator edge</summary>
        </member>
        <member name="F:OpenMetaverse.PrimFlags.Sandbox">
            <summary>Server flag, will not be sent to clients.</summary>
        </member>
        <member name="F:OpenMetaverse.PrimFlags.Flying">
            <summary>Server flag, will not be sent to client. Specifies that
            the object is hovering/flying</summary>
        </member>
        <member name="F:OpenMetaverse.PrimFlags.ObjectOwnerModify">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.PrimFlags.TemporaryOnRez">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.PrimFlags.Temporary">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.PrimFlags.ZlibCompressed">
            <summary></summary>
        </member>
        <member name="T:OpenMetaverse.SoundFlags">
            <summary>
            Sound flags for sounds attached to primitives
            </summary>
        </member>
        <member name="F:OpenMetaverse.SoundFlags.None">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.SoundFlags.Loop">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.SoundFlags.SyncMaster">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.SoundFlags.SyncSlave">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.SoundFlags.SyncPending">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.SoundFlags.Queue">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.SoundFlags.Stop">
            <summary></summary>
        </member>
        <member name="T:OpenMetaverse.Material">
            <summary>
            Material type for a primitive
            </summary>
        </member>
        <member name="F:OpenMetaverse.Material.Stone">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Material.Metal">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Material.Glass">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Material.Wood">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Material.Flesh">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Material.Plastic">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Material.Rubber">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Material.Light">
            <summary></summary>
        </member>
        <member name="T:OpenMetaverse.PrimType">
            <summary>
            Used in a helper function to roughly determine prim shape
            </summary>
        </member>
        <member name="T:OpenMetaverse.ExtraParamType">
            <summary>
            Extra parameters for primitives, these flags are for features that have
            been added after the original ObjectFlags that has all eight bits 
            reserved already
            </summary>
        </member>
        <member name="F:OpenMetaverse.ExtraParamType.Flexible">
            <summary>Whether this object has flexible parameters</summary>
        </member>
        <member name="F:OpenMetaverse.ExtraParamType.Light">
            <summary>Whether this object has light parameters</summary>
        </member>
        <member name="F:OpenMetaverse.ExtraParamType.Sculpt">
            <summary>Whether this object is a sculpted prim</summary>
        </member>
        <member name="T:OpenMetaverse.JointType">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenMetaverse.JointType.Invalid">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.JointType.Hinge">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.JointType.Point">
            <summary></summary>
        </member>
        <member name="T:OpenMetaverse.SculptType">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenMetaverse.SculptType.None">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.SculptType.Sphere">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.SculptType.Torus">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.SculptType.Plane">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.SculptType.Cylinder">
            <summary></summary>
        </member>
        <member name="T:OpenMetaverse.FaceType">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenMetaverse.FaceType.PathBegin">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.FaceType.PathEnd">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.FaceType.InnerSide">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.FaceType.ProfileBegin">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.FaceType.ProfileEnd">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.FaceType.OuterSide0">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.FaceType.OuterSide1">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.FaceType.OuterSide2">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.FaceType.OuterSide3">
            <summary></summary>
        </member>
        <member name="T:OpenMetaverse.ObjectCategory">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenMetaverse.ObjectCategory.Invalid">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.ObjectCategory.None">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.ObjectCategory.Owner">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.ObjectCategory.Group">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.ObjectCategory.Other">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.ObjectCategory.Selected">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.ObjectCategory.Temporary">
            <summary></summary>
        </member>
        <member name="T:OpenMetaverse.AttachmentPoint">
             <summary>
             Attachment points for objects on avatar bodies
             </summary>
             <remarks>
             Both InventoryObject and InventoryAttachment types can be attached
            </remarks>
        </member>
        <member name="F:OpenMetaverse.AttachmentPoint.Default">
            <summary>Right hand if object was not previously attached</summary>
        </member>
        <member name="F:OpenMetaverse.AttachmentPoint.Chest">
            <summary>Chest</summary>
        </member>
        <member name="F:OpenMetaverse.AttachmentPoint.Skull">
            <summary>Skull</summary>
        </member>
        <member name="F:OpenMetaverse.AttachmentPoint.LeftShoulder">
            <summary>Left shoulder</summary>
        </member>
        <member name="F:OpenMetaverse.AttachmentPoint.RightShoulder">
            <summary>Right shoulder</summary>
        </member>
        <member name="F:OpenMetaverse.AttachmentPoint.LeftHand">
            <summary>Left hand</summary>
        </member>
        <member name="F:OpenMetaverse.AttachmentPoint.RightHand">
            <summary>Right hand</summary>
        </member>
        <member name="F:OpenMetaverse.AttachmentPoint.LeftFoot">
            <summary>Left foot</summary>
        </member>
        <member name="F:OpenMetaverse.AttachmentPoint.RightFoot">
            <summary>Right foot</summary>
        </member>
        <member name="F:OpenMetaverse.AttachmentPoint.Spine">
            <summary>Spine</summary>
        </member>
        <member name="F:OpenMetaverse.AttachmentPoint.Pelvis">
            <summary>Pelvis</summary>
        </member>
        <member name="F:OpenMetaverse.AttachmentPoint.Mouth">
            <summary>Mouth</summary>
        </member>
        <member name="F:OpenMetaverse.AttachmentPoint.Chin">
            <summary>Chin</summary>
        </member>
        <member name="F:OpenMetaverse.AttachmentPoint.LeftEar">
            <summary>Left ear</summary>
        </member>
        <member name="F:OpenMetaverse.AttachmentPoint.RightEar">
            <summary>Right ear</summary>
        </member>
        <member name="F:OpenMetaverse.AttachmentPoint.LeftEyeball">
            <summary>Left eyeball</summary>
        </member>
        <member name="F:OpenMetaverse.AttachmentPoint.RightEyeball">
            <summary>Right eyeball</summary>
        </member>
        <member name="F:OpenMetaverse.AttachmentPoint.Nose">
            <summary>Nose</summary>
        </member>
        <member name="F:OpenMetaverse.AttachmentPoint.RightUpperArm">
            <summary>Right upper arm</summary>
        </member>
        <member name="F:OpenMetaverse.AttachmentPoint.RightForearm">
            <summary>Right forearm</summary>
        </member>
        <member name="F:OpenMetaverse.AttachmentPoint.LeftUpperArm">
            <summary>Left upper arm</summary>
        </member>
        <member name="F:OpenMetaverse.AttachmentPoint.LeftForearm">
            <summary>Left forearm</summary>
        </member>
        <member name="F:OpenMetaverse.AttachmentPoint.RightHip">
            <summary>Right hip</summary>
        </member>
        <member name="F:OpenMetaverse.AttachmentPoint.RightUpperLeg">
            <summary>Right upper leg</summary>
        </member>
        <member name="F:OpenMetaverse.AttachmentPoint.RightLowerLeg">
            <summary>Right lower leg</summary>
        </member>
        <member name="F:OpenMetaverse.AttachmentPoint.LeftHip">
            <summary>Left hip</summary>
        </member>
        <member name="F:OpenMetaverse.AttachmentPoint.LeftUpperLeg">
            <summary>Left upper leg</summary>
        </member>
        <member name="F:OpenMetaverse.AttachmentPoint.LeftLowerLeg">
            <summary>Left lower leg</summary>
        </member>
        <member name="F:OpenMetaverse.AttachmentPoint.Stomach">
            <summary>Stomach</summary>
        </member>
        <member name="F:OpenMetaverse.AttachmentPoint.LeftPec">
            <summary>Left pectoral</summary>
        </member>
        <member name="F:OpenMetaverse.AttachmentPoint.RightPec">
            <summary>Right pectoral</summary>
        </member>
        <member name="F:OpenMetaverse.AttachmentPoint.HUDCenter2">
            <summary>HUD Center position 2</summary>
        </member>
        <member name="F:OpenMetaverse.AttachmentPoint.HUDTopRight">
            <summary>HUD Top-right</summary>
        </member>
        <member name="F:OpenMetaverse.AttachmentPoint.HUDTop">
            <summary>HUD Top</summary>
        </member>
        <member name="F:OpenMetaverse.AttachmentPoint.HUDTopLeft">
            <summary>HUD Top-left</summary>
        </member>
        <member name="F:OpenMetaverse.AttachmentPoint.HUDCenter">
            <summary>HUD Center</summary>
        </member>
        <member name="F:OpenMetaverse.AttachmentPoint.HUDBottomLeft">
            <summary>HUD Bottom-left</summary>
        </member>
        <member name="F:OpenMetaverse.AttachmentPoint.HUDBottom">
            <summary>HUD Bottom</summary>
        </member>
        <member name="F:OpenMetaverse.AttachmentPoint.HUDBottomRight">
            <summary>HUD Bottom-right</summary>
        </member>
        <member name="T:OpenMetaverse.Tree">
            <summary>
            Tree foliage types
            </summary>
        </member>
        <member name="F:OpenMetaverse.Tree.Pine1">
            <summary>Pine1 tree</summary>
        </member>
        <member name="F:OpenMetaverse.Tree.Oak">
            <summary>Oak tree</summary>
        </member>
        <member name="F:OpenMetaverse.Tree.TropicalBush1">
            <summary>Tropical Bush1</summary>
        </member>
        <member name="F:OpenMetaverse.Tree.Palm1">
            <summary>Palm1 tree</summary>
        </member>
        <member name="F:OpenMetaverse.Tree.Dogwood">
            <summary>Dogwood tree</summary>
        </member>
        <member name="F:OpenMetaverse.Tree.TropicalBush2">
            <summary>Tropical Bush2</summary>
        </member>
        <member name="F:OpenMetaverse.Tree.Palm2">
            <summary>Palm2 tree</summary>
        </member>
        <member name="F:OpenMetaverse.Tree.Cypress1">
            <summary>Cypress1 tree</summary>
        </member>
        <member name="F:OpenMetaverse.Tree.Cypress2">
            <summary>Cypress2 tree</summary>
        </member>
        <member name="F:OpenMetaverse.Tree.Pine2">
            <summary>Pine2 tree</summary>
        </member>
        <member name="F:OpenMetaverse.Tree.Plumeria">
            <summary>Plumeria</summary>
        </member>
        <member name="F:OpenMetaverse.Tree.WinterPine1">
            <summary>Winter pinetree1</summary>
        </member>
        <member name="F:OpenMetaverse.Tree.WinterAspen">
            <summary>Winter Aspen tree</summary>
        </member>
        <member name="F:OpenMetaverse.Tree.WinterPine2">
            <summary>Winter pinetree2</summary>
        </member>
        <member name="F:OpenMetaverse.Tree.Eucalyptus">
            <summary>Eucalyptus tree</summary>
        </member>
        <member name="F:OpenMetaverse.Tree.Fern">
            <summary>Fern</summary>
        </member>
        <member name="F:OpenMetaverse.Tree.Eelgrass">
            <summary>Eelgrass</summary>
        </member>
        <member name="F:OpenMetaverse.Tree.SeaSword">
            <summary>Sea Sword</summary>
        </member>
        <member name="F:OpenMetaverse.Tree.Kelp1">
            <summary>Kelp1 plant</summary>
        </member>
        <member name="F:OpenMetaverse.Tree.BeachGrass1">
            <summary>Beach grass</summary>
        </member>
        <member name="F:OpenMetaverse.Tree.Kelp2">
            <summary>Kelp2 plant</summary>
        </member>
        <member name="T:OpenMetaverse.Grass">
            <summary>
            Grass foliage types
            </summary>
        </member>
        <member name="F:OpenMetaverse.Grass.Grass0">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Grass.Grass1">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Grass.Grass2">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Grass.Grass3">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Grass.Grass4">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Grass.Undergrowth1">
            <summary></summary>
        </member>
        <member name="T:OpenMetaverse.ClickAction">
            <summary>
            Action associated with clicking on an object
            </summary>
        </member>
        <member name="F:OpenMetaverse.ClickAction.Touch">
            <summary>Touch object</summary>
        </member>
        <member name="F:OpenMetaverse.ClickAction.Sit">
            <summary>Sit on object</summary>
        </member>
        <member name="F:OpenMetaverse.ClickAction.Buy">
            <summary>Purchase object or contents</summary>
        </member>
        <member name="F:OpenMetaverse.ClickAction.Pay">
            <summary>Pay the object</summary>
        </member>
        <member name="F:OpenMetaverse.ClickAction.OpenTask">
            <summary>Open task inventory</summary>
        </member>
        <member name="F:OpenMetaverse.ClickAction.PlayMedia">
            <summary>Play parcel media</summary>
        </member>
        <member name="F:OpenMetaverse.ClickAction.OpenMedia">
            <summary>Open parcel media</summary>
        </member>
        <member name="T:OpenMetaverse.Bumpiness">
            <summary>
            The type of bump-mapping applied to a face
            </summary>
        </member>
        <member name="F:OpenMetaverse.Bumpiness.None">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Bumpiness.Brightness">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Bumpiness.Darkness">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Bumpiness.Woodgrain">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Bumpiness.Bark">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Bumpiness.Bricks">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Bumpiness.Checker">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Bumpiness.Concrete">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Bumpiness.Crustytile">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Bumpiness.Cutstone">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Bumpiness.Discs">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Bumpiness.Gravel">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Bumpiness.Petridish">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Bumpiness.Siding">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Bumpiness.Stonetile">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Bumpiness.Stucco">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Bumpiness.Suction">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Bumpiness.Weave">
            <summary></summary>
        </member>
        <member name="T:OpenMetaverse.Shininess">
            <summary>
            The level of shininess applied to a face
            </summary>
        </member>
        <member name="F:OpenMetaverse.Shininess.None">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Shininess.Low">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Shininess.Medium">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.Shininess.High">
            <summary></summary>
        </member>
        <member name="T:OpenMetaverse.MappingType">
            <summary>
            The texture mapping style used for a face
            </summary>
        </member>
        <member name="F:OpenMetaverse.MappingType.Default">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.MappingType.Planar">
            <summary></summary>
        </member>
        <member name="T:OpenMetaverse.TextureAttributes">
            <summary>
            Flags in the TextureEntry block that describe which properties are 
            set
            </summary>
        </member>
        <member name="F:OpenMetaverse.TextureAttributes.None">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.TextureAttributes.TextureID">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.TextureAttributes.RGBA">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.TextureAttributes.RepeatU">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.TextureAttributes.RepeatV">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.TextureAttributes.OffsetU">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.TextureAttributes.OffsetV">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.TextureAttributes.Rotation">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.TextureAttributes.Material">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.TextureAttributes.Media">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.TextureAttributes.Glow">
            <summary></summary>
        </member>
        <member name="F:OpenMetaverse.TextureAttributes.All">
            <summary></summary>
        </member>
        <member name="T:OpenMetaverse.Rendering.LindenMesh.LODMesh">
            <summary>
            Level of Detail mesh
            </summary>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.AccountLogin(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            This is used to login a specific user account(s). It may only be called after
            Connector initialization has completed successfully
            </summary>
            <param name="ConnectorHandle">Handle returned from successful Connector ‘create’ request</param>
            <param name="AccountName">User's account name</param>
            <param name="AccountPassword">User's account password</param>
            <param name="AudioSessionAnswerMode">Values may be “AutoAnswer” or “VerifyAnswer”</param>
            <param name="AccountURI">""</param>
            <param name="ParticipantPropertyFrequency">This is an integer that specifies how often
            the daemon will send participant property events while in a channel. If this is not set
            the default will be “on state change”, which means that the events will be sent when
            the participant starts talking, stops talking, is muted, is unmuted.
            The valid values are:
            0 – Never
            5 – 10 times per second
            10 – 5 times per second
            50 – 1 time per second
            100 – on participant state change (this is the default)</param>
            <param name="EnableBuddiesAndPresence">false</param>
            <returns></returns>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.AccountLogout(System.String)">
            <summary>
            This is used to logout a user session. It should only be called with a valid AccountHandle.
            </summary>
            <param name="AccountHandle">Handle returned from successful Connector ‘login’ request</param>
            <returns></returns>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.AuxGetCaptureDevices">
            <summary>
            This is used to get a list of audio devices that can be used for capture (input) of voice.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.AuxGetRenderDevices">
            <summary>
            This is used to get a list of audio devices that can be used for render (playback) of voice.
            </summary>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.AuxSetRenderDevice(System.String)">
            <summary>
            This command is used to select the render device.
            </summary>
            <param name="RenderDeviceSpecifier">The name of the device as returned by the Aux.GetRenderDevices command.</param>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.AuxSetCaptureDevice(System.String)">
            <summary>
            This command is used to select the capture device.
            </summary>
            <param name="CaptureDeviceSpecifier">The name of the device as returned by the Aux.GetCaptureDevices command.</param>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.AuxCaptureAudioStart(System.Int32)">
            <summary>
            This command is used to start the audio capture process which will cause
            AuxAudioProperty Events to be raised. These events can be used to display a
            microphone VU meter for the currently selected capture device. This command
            should not be issued if the user is on a call.
            </summary>
            <param name="Duration">(unused but required)</param>
            <returns></returns>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.AuxCaptureAudioStop">
            <summary>
            This command is used to stop the audio capture process.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.AuxSetMicLevel(System.Int32)">
            <summary>
            This command is used to set the mic volume while in the audio tuning process.
            Once an acceptable mic level is attained, the application must issue a
            connector set mic volume command to have that level be used while on voice
            calls.
            </summary>
            <param name="Level">the microphone volume (-100 to 100 inclusive)</param>
            <returns></returns>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.AuxSetSpeakerLevel(System.Int32)">
            <summary>
            This command is used to set the speaker volume while in the audio tuning
            process. Once an acceptable speaker level is attained, the application must
            issue a connector set speaker volume command to have that level be used while
            on voice calls.
            </summary>
            <param name="Level">the speaker volume (-100 to 100 inclusive)</param>
            <returns></returns>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.ConnectorCreate(System.String,System.String,System.UInt16,System.UInt16,OpenMetaverse.Voice.VoiceGateway.VoiceLoggingSettings)">
            <summary>
            This is used to initialize and stop the Connector as a whole. The Connector
            Create call must be completed successfully before any other requests are made
            (typically during application initialization). The shutdown should be called
            when the application is shutting down to gracefully release resources
            </summary>
            <param name="ClientName">A string value indicting the Application name</param>
            <param name="AccountManagementServer">URL for the management server</param>
            <param name="Logging">LoggingSettings</param>
            <param name="MaximumPort"></param>
            <param name="MinimumPort"></param>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.ConnectorInitiateShutdown(System.String)">
            <summary>
            Shutdown Connector -- Should be called when the application is shutting down
            to gracefully release resources
            </summary>
            <param name="ConnectorHandle">Handle returned from successful Connector ‘create’ request</param>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.ConnectorMuteLocalMic(System.String,System.Boolean)">
            <summary>
            Mute or unmute the microphone
            </summary>
            <param name="ConnectorHandle">Handle returned from successful Connector ‘create’ request</param>
            <param name="Mute">true (mute) or false (unmute)</param>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.ConnectorMuteLocalSpeaker(System.String,System.Boolean)">
            <summary>
            Mute or unmute the speaker
            </summary>
            <param name="ConnectorHandle">Handle returned from successful Connector ‘create’ request</param>
            <param name="Mute">true (mute) or false (unmute)</param>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.ConnectorSetLocalMicVolume(System.String,System.Int32)">
            <summary>
            Set microphone volume
            </summary>
            <param name="ConnectorHandle">Handle returned from successful Connector ‘create’ request</param>
            <param name="Value">The level of the audio, a number between -100 and 100 where
            0 represents ‘normal’ speaking volume</param>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.ConnectorSetLocalSpeakerVolume(System.String,System.Int32)">
            <summary>
            Set local speaker volume
            </summary>
            <param name="ConnectorHandle">Handle returned from successful Connector ‘create’ request</param>
            <param name="Value">The level of the audio, a number between -100 and 100 where
            0 represents ‘normal’ speaking volume</param>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.StartDaemon(System.String,System.String)">
            <summary>
            Starts a thread that keeps the daemon running
            </summary>
            <param name="path"></param>
            <param name="args"></param>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.StopDaemon">
            <summary>
            Stops the daemon and the thread keeping it running
            </summary>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.ConnectToDaemon(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="address"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.SessionCreate(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Create a Session
            Sessions typically represent a connection to a media session with one or more
            participants. This is used to generate an ‘outbound’ call to another user or
            channel. The specifics depend on the media types involved. A session handle is
            required to control the local user functions within the session (or remote
            users if the current account has rights to do so). Currently creating a
            session automatically connects to the audio media, there is no need to call
            Session.Connect at this time, this is reserved for future use.
            </summary>
            <param name="AccountHandle">Handle returned from successful Connector ‘create’ request</param>
            <param name="URI">This is the URI of the terminating point of the session (ie who/what is being called)</param>
            <param name="Name">This is the display name of the entity being called (user or channel)</param>
            <param name="Password">Only needs to be supplied when the target URI is password protected</param>
            <param name="PasswordHashAlgorithm">This indicates the format of the password as passed in. This can either be
            “ClearText” or “SHA1UserName”. If this element does not exist, it is assumed to be “ClearText”. If it is
            “SHA1UserName”, the password as passed in is the SHA1 hash of the password and username concatenated together,
            then base64 encoded, with the final “=” character stripped off.</param>
            <param name="JoinAudio"></param>
            <param name="JoinText"></param>
            <returns></returns>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.SessionConnect(System.String,System.String)">
            <summary>
            Used to accept a call
            </summary>
            <param name="SessionHandle">SessionHandle such as received from SessionNewEvent</param>
            <param name="AudioMedia">"default"</param>
            <returns></returns>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.SessionRenderAudioStart(System.String,System.Boolean)">
            <summary>
            This command is used to start the audio render process, which will then play
            the passed in file through the selected audio render device. This command
            should not be issued if the user is on a call.
            </summary>
            <param name="SoundFilePath">The fully qualified path to the sound file.</param>
            <param name="Loop">True if the file is to be played continuously and false if it is should be played once.</param>
            <returns></returns>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.SessionRenderAudioStop(System.String)">
            <summary>
            This command is used to stop the audio render process.
            </summary>
            <param name="SoundFilePath">The fully qualified path to the sound file issued in the start render command.</param>
            <returns></returns>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.SessionTerminate(System.String)">
            <summary>
            This is used to ‘end’ an established session (i.e. hang-up or disconnect).
            </summary>
            <param name="SessionHandle">Handle returned from successful Session ‘create’ request or a SessionNewEvent</param>
            <returns></returns>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.SessionSet3DPosition(System.String,OpenMetaverse.Voice.VoiceGateway.VoicePosition,OpenMetaverse.Voice.VoiceGateway.VoicePosition)">
            <summary>
            Set the combined speaking and listening position in 3D space.
            There appears to be no response to this request.
            </summary>
            <param name="SessionHandle">Handle returned from successful Session ‘create’ request or a SessionNewEvent</param>
            <param name="SpeakerPosition">Speaking position</param>
            <param name="ListenerPosition">Listening position</param>
            <returns></returns>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.SessionSetParticipantVolumeForMe(System.String,System.String,System.Int32)">
            <summary>
            Set User Volume for a particular user. Does not affect how other users hear that user.
            </summary>
            <param name="SessionHandle">Handle returned from successful Session ‘create’ request or a SessionNewEvent</param>
            <param name="ParticipantURI"></param>
            <param name="Volume">The level of the audio, a number between -100 and 100 where 0 represents ‘normal’ speaking volume</param>
            <returns></returns>
        </member>
        <member name="E:OpenMetaverse.Voice.VoiceGateway.OnSessionCreateResponse">
            <summary>Response to Session.Create request</summary>
        </member>
        <member name="E:OpenMetaverse.Voice.VoiceGateway.OnSessionConnectResponse">
            <summary>Response to Session.Connect request</summary>
        </member>
        <member name="E:OpenMetaverse.Voice.VoiceGateway.OnSessionRenderAudioStartResponse">
            <summary>Response to Session.RenderAudioStart request</summary>
        </member>
        <member name="E:OpenMetaverse.Voice.VoiceGateway.OnSessionRenderAudioStopResponse">
            <summary>Response to Session.RenderAudioStop request</summary>
        </member>
        <member name="E:OpenMetaverse.Voice.VoiceGateway.OnSessionTerminateResponse">
            <summary>Response to Session.Terminate request</summary>
        </member>
        <member name="E:OpenMetaverse.Voice.VoiceGateway.OnSessionSetParticipantVolumeForMeResponse">
            <summary>Response to Session.SetParticipantVolumeForMe request</summary>
        </member>
        <member name="E:OpenMetaverse.Voice.VoiceGateway.OnSessionNewEvent">
            <summary>Sent when an incoming session occurs</summary>
        </member>
        <member name="E:OpenMetaverse.Voice.VoiceGateway.OnSessionStateChangeEvent">
            <summary>Sent for specific Session state changes (connected, disconnected)</summary>
        </member>
        <member name="E:OpenMetaverse.Voice.VoiceGateway.OnSessionParticipantStateChangeEvent">
            <summary>Sent for specific Participant state changes (new participants, dropped participants)</summary>
        </member>
        <member name="E:OpenMetaverse.Voice.VoiceGateway.OnSessionParticipantPropertiesEvent">
            <summary>Sent for specific Participant Property changes (IsSpeaking, Volume, Energy, etc.)</summary>
        </member>
        <member name="E:OpenMetaverse.Voice.VoiceGateway.OnSessionMediaEvent">
            <summary></summary>
        </member>
        <member name="E:OpenMetaverse.Voice.VoiceGateway.OnConnectorCreateResponse">
            <summary>Response to Connector.Create request</summary>
        </member>
        <member name="E:OpenMetaverse.Voice.VoiceGateway.OnConnectorInitiateShutdownResponse">
            <summary>Response to Connector.InitiateShutdown request</summary>
        </member>
        <member name="E:OpenMetaverse.Voice.VoiceGateway.OnConnectorMuteLocalMicResponse">
            <summary>Response to Connector.MuteLocalMic request</summary>
        </member>
        <member name="E:OpenMetaverse.Voice.VoiceGateway.OnConnectorMuteLocalSpeakerResponse">
            <summary>Response to Connector.MuteLocalSpeaker request</summary>
        </member>
        <member name="E:OpenMetaverse.Voice.VoiceGateway.OnConnectorSetLocalMicVolumeResponse">
            <summary>Response to Connector.SetLocalMicVolume request</summary>
        </member>
        <member name="E:OpenMetaverse.Voice.VoiceGateway.OnConnectorSetLocalSpeakerVolumeResponse">
            <summary>Response to Connector.SetLocalSpeakerVolume request</summary>
        </member>
        <member name="E:OpenMetaverse.Voice.VoiceGateway.OnAuxGetCaptureDevicesResponse">
            <summary>Response to Aux.GetCaptureDevices request</summary>
        </member>
        <member name="E:OpenMetaverse.Voice.VoiceGateway.OnAuxGetRenderDevicesResponse">
            <summary>Response to Aux.GetRenderDevices request</summary>
        </member>
        <member name="E:OpenMetaverse.Voice.VoiceGateway.OnAuxSetRenderDeviceResponse">
            <summary>Response to Aux.SetRenderDevice request</summary>
        </member>
        <member name="E:OpenMetaverse.Voice.VoiceGateway.OnAuxSetCaptureDeviceResponse">
            <summary>Response to Aux.SetCaptureDevice request</summary>
        </member>
        <member name="E:OpenMetaverse.Voice.VoiceGateway.OnAuxCaptureAudioStartResponse">
            <summary>Response to Aux.CaptureAudioStart request</summary>
        </member>
        <member name="E:OpenMetaverse.Voice.VoiceGateway.OnAuxCaptureAudioStopResponse">
            <summary>Response to Aux.CaptureAudioStop request</summary>
        </member>
        <member name="E:OpenMetaverse.Voice.VoiceGateway.OnAuxSetMicLevelResponse">
            <summary>Response to Aux.SetMicLevel request</summary>
        </member>
        <member name="E:OpenMetaverse.Voice.VoiceGateway.OnAuxSetSpeakerLevelResponse">
            <summary>Response to Aux.SetSpeakerLevel request</summary>
        </member>
        <member name="E:OpenMetaverse.Voice.VoiceGateway.OnAuxAudioPropertiesEvent">
            <summary>Audio Properties Events are sent after audio capture is started.
            These events are used to display a microphone VU meter</summary>
        </member>
        <member name="E:OpenMetaverse.Voice.VoiceGateway.OnAccountLoginResponse">
            <summary>Response to Account.Login request</summary>
        </member>
        <member name="E:OpenMetaverse.Voice.VoiceGateway.OnAccountLogoutResponse">
            <summary>Response to Account.Logout request</summary>
        </member>
        <member name="E:OpenMetaverse.Voice.VoiceGateway.OnAccountLoginStateChangeEvent">
            <summary>This event message is sent whenever the login state of the
            particular Account has transitioned from one value to another</summary>
        </member>
        <member name="F:OpenMetaverse.Voice.VoiceGateway.VoiceLoggingSettings.Enabled">
            <summary>Enable logging</summary>
        </member>
        <member name="F:OpenMetaverse.Voice.VoiceGateway.VoiceLoggingSettings.Folder">
            <summary>The folder where any logs will be created</summary>
        </member>
        <member name="F:OpenMetaverse.Voice.VoiceGateway.VoiceLoggingSettings.FileNamePrefix">
            <summary>This will be prepended to beginning of each log file</summary>
        </member>
        <member name="F:OpenMetaverse.Voice.VoiceGateway.VoiceLoggingSettings.FileNameSuffix">
            <summary>The suffix or extension to be appended to each log file</summary>
        </member>
        <member name="F:OpenMetaverse.Voice.VoiceGateway.VoiceLoggingSettings.LogLevel">
            <summary>
            0: NONE - No logging
            1: ERROR - Log errors only
            2: WARNING - Log errors and warnings
            3: INFO - Log errors, warnings and info
            4: DEBUG - Log errors, warnings, info and debug
            </summary>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.VoiceLoggingSettings.#ctor">
            <summary>
            Constructor for default logging settings
            </summary>
        </member>
        <member name="T:OpenMetaverse.Voice.VoiceGateway.SessionCreateResponseCallback">
            <summary>Response to Session.Create request</summary>
        </member>
        <member name="T:OpenMetaverse.Voice.VoiceGateway.SessionConnectResponseCallback">
            <summary>Response to Session.Connect request</summary>
        </member>
        <member name="T:OpenMetaverse.Voice.VoiceGateway.SessionRenderAudioStartResponseCallback">
            <summary>Response to Session.RenderAudioStart request</summary>
        </member>
        <member name="T:OpenMetaverse.Voice.VoiceGateway.SessionRenderAudioStopResponseCallback">
            <summary>Response to Session.RenderAudioStop request</summary>
        </member>
        <member name="T:OpenMetaverse.Voice.VoiceGateway.SessionTerminateResponseCallback">
            <summary>Response to Session.Terminate request</summary>
        </member>
        <member name="T:OpenMetaverse.Voice.VoiceGateway.SessionSetParticipantVolumeForMeResponseCallback">
            <summary>Response to Session.SetParticipantVolumeForMe request</summary>
        </member>
        <member name="T:OpenMetaverse.Voice.VoiceGateway.AuxAudioPropertiesEventCallback">
            <summary>
            Audio Properties Events are sent after audio capture is started. These events are used to display a microphone VU meter
            </summary>
            <param name="MicIsActive">True if voice is detected on the microphone</param>
            <param name="MicEnergy">audio energy, from 0 to 1</param>
            <param name="MicVolume">current mic volume</param>
            <param name="SpeakerVolume">currently unimplemented, and always 0</param>
        </member>
        <member name="F:OpenMetaverse.Voice.VoiceGateway.VoicePosition.Position">
            <summary>Positional vector of the users position</summary>
        </member>
        <member name="F:OpenMetaverse.Voice.VoiceGateway.VoicePosition.Velocity">
            <summary>Velocity vector of the position</summary>
        </member>
        <member name="F:OpenMetaverse.Voice.VoiceGateway.VoicePosition.AtOrientation">
            <summary>At Orientation (X axis) of the position</summary>
        </member>
        <member name="F:OpenMetaverse.Voice.VoiceGateway.VoicePosition.UpOrientation">
            <summary>Up Orientation (Y axis) of the position</summary>
        </member>
        <member name="F:OpenMetaverse.Voice.VoiceGateway.VoicePosition.LeftOrientation">
            <summary>Left Orientation (Z axis) of the position</summary>
        </member>
    </members>
</doc>
